
/Users/Abeyta/Documents/IoT/ABQ-Smart-Bus-Stop/Master_Code_SmartBusStop/target/3.2.0/argon/Master_Code_SmartBusStop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000057c0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000b97e0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000001e0  2003e354  000b97e4  0001e354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000002bc  2003e534  2003e534  0002e534  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000b99c4  000b99c4  000299c4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000b99ec  000b99ec  000299ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0010b520  00000000  00000000  000299f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 0001323c  00000000  00000000  00134f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    00034b51  00000000  00000000  0014814c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002b90  00000000  00000000  0017cc9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00009be8  00000000  00000000  0017f82d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003aca9  00000000  00000000  00189415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0003e845  00000000  00000000  001c40be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0012c90a  00000000  00000000  00202903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  000081b8  00000000  00000000  0032f210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f002 fe9e 	bl	b6d72 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f002 fec0 	bl	b6dc2 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e354 	.word	0x2003e354
   b404c:	000b97e4 	.word	0x000b97e4
   b4050:	2003e534 	.word	0x2003e534
   b4054:	2003e534 	.word	0x2003e534
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f001 ff45 	bl	b5ef0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b97bc 	.word	0x000b97bc
   b4080:	000b97e0 	.word	0x000b97e0

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b82e 	b.w	b40e4 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f8a7 	bl	b41dc <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f001 bee5 	b.w	b5e60 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f000 bfa5 	b.w	b4fe4 <malloc>

000b409a <_Znaj>:
   b409a:	f000 bfa3 	b.w	b4fe4 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f000 bfa9 	b.w	b4ff4 <free>
	...

000b40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	2100      	movs	r1, #0
   b40aa:	200c      	movs	r0, #12
   b40ac:	f000 fefe 	bl	b4eac <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b4bcd 	.word	0x000b4bcd

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40c8:	b40e      	push	{r1, r2, r3}
   b40ca:	b503      	push	{r0, r1, lr}
   b40cc:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40ce:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40d0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40d4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40d6:	f001 f9fc 	bl	b54d2 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40da:	b002      	add	sp, #8
   b40dc:	f85d eb04 	ldr.w	lr, [sp], #4
   b40e0:	b003      	add	sp, #12
   b40e2:	4770      	bx	lr

000b40e4 <setup>:
Adafruit_MQTT_Publish mqttObj1 = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/abq_gps");
Adafruit_MQTT_Subscribe mqttON_OFFobject = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/ON_OFF");

SYSTEM_MODE(SEMI_AUTOMATIC);

void setup() {
   b40e4:	b538      	push	{r3, r4, r5, lr}
    Serial.begin(9600);
   b40e6:	f001 fdf1 	bl	b5ccc <_Z16_fetch_usbserialv>
   b40ea:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40ee:	f001 fde1 	bl	b5cb4 <_ZN9USBSerial5beginEl>
    pinMode(FLAMEPIN, INPUT);
   b40f2:	2100      	movs	r1, #0
   b40f4:	2011      	movs	r0, #17
   b40f6:	f001 ff6b 	bl	b5fd0 <pinMode>
    pinMode(MQ4ANALOGPIN, INPUT);
   b40fa:	2100      	movs	r1, #0
   b40fc:	2010      	movs	r0, #16
   b40fe:	f001 ff67 	bl	b5fd0 <pinMode>
    pinMode(MQ4DIGITALPIN, INPUT);
   b4102:	2100      	movs	r1, #0
   b4104:	2005      	movs	r0, #5
   b4106:	f001 ff63 	bl	b5fd0 <pinMode>
    pinMode(DIODEPIN, INPUT);
   b410a:	2100      	movs	r1, #0
   b410c:	200f      	movs	r0, #15
   b410e:	f001 ff5f 	bl	b5fd0 <pinMode>
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b4112:	4c0f      	ldr	r4, [pc, #60]	; (b4150 <setup+0x6c>)
    pinMode(LEDPIN, OUTPUT);

     WiFi.connect();
    while (WiFi.connecting()) {
        Serial.printf(".");
   b4114:	4d0f      	ldr	r5, [pc, #60]	; (b4154 <setup+0x70>)
    pinMode(LEDPIN, OUTPUT);
   b4116:	2101      	movs	r1, #1
   b4118:	200e      	movs	r0, #14
   b411a:	f001 ff59 	bl	b5fd0 <pinMode>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   b411e:	2300      	movs	r3, #0
   b4120:	6860      	ldr	r0, [r4, #4]
   b4122:	461a      	mov	r2, r3
   b4124:	4619      	mov	r1, r3
   b4126:	f000 fefd 	bl	b4f24 <network_connect>
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   b412a:	2200      	movs	r2, #0
   b412c:	6860      	ldr	r0, [r4, #4]
   b412e:	4611      	mov	r1, r2
   b4130:	f000 ff00 	bl	b4f34 <network_connecting>
    while (WiFi.connecting()) {
   b4134:	b128      	cbz	r0, b4142 <setup+0x5e>
        Serial.printf(".");
   b4136:	f001 fdc9 	bl	b5ccc <_Z16_fetch_usbserialv>
   b413a:	4629      	mov	r1, r5
   b413c:	f7ff ffc4 	bl	b40c8 <_ZN5Print6printfEPKcz>
    while (WiFi.connecting()) {
   b4140:	e7f3      	b.n	b412a <setup+0x46>
    }

     // Setup MQTT subscription for onoff feed.
    mqtt.subscribe(&mqttON_OFFobject);
}
   b4142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mqtt.subscribe(&mqttON_OFFobject);
   b4146:	4904      	ldr	r1, [pc, #16]	; (b4158 <setup+0x74>)
   b4148:	4804      	ldr	r0, [pc, #16]	; (b415c <setup+0x78>)
   b414a:	f000 ba75 	b.w	b4638 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>
   b414e:	bf00      	nop
   b4150:	2003e70c 	.word	0x2003e70c
   b4154:	000b9044 	.word	0x000b9044
   b4158:	2003e66c 	.word	0x2003e66c
   b415c:	2003e598 	.word	0x2003e598

000b4160 <_Z12MQTT_connectv>:
    }
     analogWrite(LEDPIN,nightLed);
}


void MQTT_connect() {
   b4160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int8_t ret;

    // Stop if already connected.
    if (mqtt.connected()) {
   b4164:	4818      	ldr	r0, [pc, #96]	; (b41c8 <_Z12MQTT_connectv+0x68>)
   b4166:	f000 fc7a 	bl	b4a5e <_ZN19Adafruit_MQTT_SPARK9connectedEv>
   b416a:	bb58      	cbnz	r0, b41c4 <_Z12MQTT_connectv+0x64>
        return;
    }

    Serial.print("Connecting to MQTT... ");
   b416c:	f001 fdae 	bl	b5ccc <_Z16_fetch_usbserialv>
   b4170:	4916      	ldr	r1, [pc, #88]	; (b41cc <_Z12MQTT_connectv+0x6c>)

    while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   b4172:	4e15      	ldr	r6, [pc, #84]	; (b41c8 <_Z12MQTT_connectv+0x68>)
        Serial.printf("%s\n", (char *)mqtt.connectErrorString(ret));
   b4174:	f8df 8060 	ldr.w	r8, [pc, #96]	; b41d8 <_Z12MQTT_connectv+0x78>
        Serial.printf("Retrying MQTT connection in 5 seconds..\n");
   b4178:	4f15      	ldr	r7, [pc, #84]	; (b41d0 <_Z12MQTT_connectv+0x70>)
    Serial.print("Connecting to MQTT... ");
   b417a:	f001 f96f 	bl	b545c <_ZN5Print5printEPKc>
    while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   b417e:	4812      	ldr	r0, [pc, #72]	; (b41c8 <_Z12MQTT_connectv+0x68>)
   b4180:	f000 fbf5 	bl	b496e <_ZN13Adafruit_MQTT7connectEv>
   b4184:	4604      	mov	r4, r0
   b4186:	b1c0      	cbz	r0, b41ba <_Z12MQTT_connectv+0x5a>
        Serial.printf("%s\n", (char *)mqtt.connectErrorString(ret));
   b4188:	f001 fda0 	bl	b5ccc <_Z16_fetch_usbserialv>
   b418c:	4621      	mov	r1, r4
   b418e:	4605      	mov	r5, r0
   b4190:	4630      	mov	r0, r6
   b4192:	f000 fa2f 	bl	b45f4 <_ZN13Adafruit_MQTT18connectErrorStringEa>
   b4196:	4641      	mov	r1, r8
   b4198:	4602      	mov	r2, r0
   b419a:	4628      	mov	r0, r5
   b419c:	f7ff ff94 	bl	b40c8 <_ZN5Print6printfEPKcz>
        Serial.printf("Retrying MQTT connection in 5 seconds..\n");
   b41a0:	f001 fd94 	bl	b5ccc <_Z16_fetch_usbserialv>
   b41a4:	4639      	mov	r1, r7
   b41a6:	f7ff ff8f 	bl	b40c8 <_ZN5Print6printfEPKcz>
        mqtt.disconnect();
   b41aa:	4630      	mov	r0, r6
   b41ac:	f000 fa30 	bl	b4610 <_ZN13Adafruit_MQTT10disconnectEv>
        delay(5000); // wait 5 seconds
   b41b0:	f241 3088 	movw	r0, #5000	; 0x1388
   b41b4:	f000 ff5a 	bl	b506c <delay>
    while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   b41b8:	e7e1      	b.n	b417e <_Z12MQTT_connectv+0x1e>
    }
    Serial.printf("MQTT Connected!\n");
   b41ba:	f001 fd87 	bl	b5ccc <_Z16_fetch_usbserialv>
   b41be:	4905      	ldr	r1, [pc, #20]	; (b41d4 <_Z12MQTT_connectv+0x74>)
   b41c0:	f7ff ff82 	bl	b40c8 <_ZN5Print6printfEPKcz>
}
   b41c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b41c8:	2003e598 	.word	0x2003e598
   b41cc:	000b8d38 	.word	0x000b8d38
   b41d0:	000b8d53 	.word	0x000b8d53
   b41d4:	000b8d7c 	.word	0x000b8d7c
   b41d8:	000b8d4f 	.word	0x000b8d4f

000b41dc <loop>:
void loop() {
   b41dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   MQTT_connect();
   b41de:	f7ff ffbf 	bl	b4160 <_Z12MQTT_connectv>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b41e2:	f000 fcfb 	bl	b4bdc <HAL_Timer_Get_Milli_Seconds>
  if((currentTime1-lastTime1) > 6000){
   b41e6:	4c63      	ldr	r4, [pc, #396]	; (b4374 <loop+0x198>)
  currentTime1 = millis();
   b41e8:	4b63      	ldr	r3, [pc, #396]	; (b4378 <loop+0x19c>)
   b41ea:	6018      	str	r0, [r3, #0]
  if((currentTime1-lastTime1) > 6000){
   b41ec:	6823      	ldr	r3, [r4, #0]
   b41ee:	1ac0      	subs	r0, r0, r3
   b41f0:	f241 7370 	movw	r3, #6000	; 0x1770
   b41f4:	4298      	cmp	r0, r3
   b41f6:	dd11      	ble.n	b421c <loop+0x40>
      if(mqtt.Update()) {
   b41f8:	4860      	ldr	r0, [pc, #384]	; (b437c <loop+0x1a0>)
   b41fa:	f000 fcb6 	bl	b4b6a <_ZN19Adafruit_MQTT_SPARK6UpdateEv>
   b41fe:	b150      	cbz	r0, b4216 <loop+0x3a>
        mqttObj1.publish(value1);
   b4200:	4d5f      	ldr	r5, [pc, #380]	; (b4380 <loop+0x1a4>)
   b4202:	4860      	ldr	r0, [pc, #384]	; (b4384 <loop+0x1a8>)
   b4204:	6829      	ldr	r1, [r5, #0]
   b4206:	f000 fc0e 	bl	b4a26 <_ZN21Adafruit_MQTT_Publish7publishEi>
        Serial.printf("Publishing %0.2f \n",value1);
   b420a:	f001 fd5f 	bl	b5ccc <_Z16_fetch_usbserialv>
   b420e:	682a      	ldr	r2, [r5, #0]
   b4210:	495d      	ldr	r1, [pc, #372]	; (b4388 <loop+0x1ac>)
   b4212:	f7ff ff59 	bl	b40c8 <_ZN5Print6printfEPKcz>
   b4216:	f000 fce1 	bl	b4bdc <HAL_Timer_Get_Milli_Seconds>
      lastTime1 = millis();
   b421a:	6020      	str	r0, [r4, #0]
    while ((subscription = mqtt.readSubscription(100))) {
   b421c:	4e57      	ldr	r6, [pc, #348]	; (b437c <loop+0x1a0>)
        if (subscription == &mqttON_OFFobject) {
   b421e:	4d5b      	ldr	r5, [pc, #364]	; (b438c <loop+0x1b0>)
    while ((subscription = mqtt.readSubscription(100))) {
   b4220:	2164      	movs	r1, #100	; 0x64
   b4222:	4630      	mov	r0, r6
   b4224:	f000 fa23 	bl	b466e <_ZN13Adafruit_MQTT16readSubscriptionEs>
   b4228:	b188      	cbz	r0, b424e <loop+0x72>
        if (subscription == &mqttON_OFFobject) {
   b422a:	42a8      	cmp	r0, r5
   b422c:	d1f8      	bne.n	b4220 <loop+0x44>
            ON_OFF = atof((char *)mqttON_OFFobject.lastread);
   b422e:	1d68      	adds	r0, r5, #5
   b4230:	f002 fd88 	bl	b6d44 <atof>
   b4234:	ec51 0b10 	vmov	r0, r1, d0
   b4238:	f002 fd18 	bl	b6c6c <__aeabi_d2iz>
   b423c:	4c54      	ldr	r4, [pc, #336]	; (b4390 <loop+0x1b4>)
   b423e:	6020      	str	r0, [r4, #0]
            Serial.printf("Received %i from Adafruit.io feed FeedNameB \n", ON_OFF);
   b4240:	f001 fd44 	bl	b5ccc <_Z16_fetch_usbserialv>
   b4244:	6822      	ldr	r2, [r4, #0]
   b4246:	4953      	ldr	r1, [pc, #332]	; (b4394 <loop+0x1b8>)
   b4248:	f7ff ff3e 	bl	b40c8 <_ZN5Print6printfEPKcz>
   b424c:	e7e8      	b.n	b4220 <loop+0x44>
   b424e:	f000 fcc5 	bl	b4bdc <HAL_Timer_Get_Milli_Seconds>
    if ((currentTime2 - lastTime2) > 1000) {
   b4252:	4e51      	ldr	r6, [pc, #324]	; (b4398 <loop+0x1bc>)
    currentTime2 = millis();
   b4254:	4b51      	ldr	r3, [pc, #324]	; (b439c <loop+0x1c0>)
   b4256:	6018      	str	r0, [r3, #0]
    if ((currentTime2 - lastTime2) > 1000) {
   b4258:	6833      	ldr	r3, [r6, #0]
   b425a:	1ac0      	subs	r0, r0, r3
   b425c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b4260:	dd1d      	ble.n	b429e <loop+0xc2>
        Serial.println("The distance to obstacles in front is: ");
   b4262:	f001 fd33 	bl	b5ccc <_Z16_fetch_usbserialv>
   b4266:	494e      	ldr	r1, [pc, #312]	; (b43a0 <loop+0x1c4>)
   b4268:	f001 f90b 	bl	b5482 <_ZN5Print7printlnEPKc>
        RangeInCentimeters = ultrasonic.MeasureInCentimeters(); // two measurements should keep an interval
   b426c:	484d      	ldr	r0, [pc, #308]	; (b43a4 <loop+0x1c8>)
   b426e:	f000 f905 	bl	b447c <_ZN10Ultrasonic20MeasureInCentimetersEv>
   b4272:	4604      	mov	r4, r0
        Serial.print(RangeInCentimeters);                       // 0~400cm
   b4274:	f001 fd2a 	bl	b5ccc <_Z16_fetch_usbserialv>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b4278:	2c00      	cmp	r4, #0
   b427a:	4605      	mov	r5, r0
   b427c:	da78      	bge.n	b4370 <loop+0x194>
            t = print('-');
   b427e:	212d      	movs	r1, #45	; 0x2d
   b4280:	f001 f8f0 	bl	b5464 <_ZN5Print5printEc>
            val = -n;
   b4284:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4286:	220a      	movs	r2, #10
   b4288:	4628      	mov	r0, r5
   b428a:	f001 f904 	bl	b5496 <_ZN5Print11printNumberEmh>
        Serial.println(" cm");
   b428e:	f001 fd1d 	bl	b5ccc <_Z16_fetch_usbserialv>
   b4292:	4945      	ldr	r1, [pc, #276]	; (b43a8 <loop+0x1cc>)
   b4294:	f001 f8f5 	bl	b5482 <_ZN5Print7printlnEPKc>
   b4298:	f000 fca0 	bl	b4bdc <HAL_Timer_Get_Milli_Seconds>
        lastTime2 = millis();
   b429c:	6030      	str	r0, [r6, #0]
   b429e:	f000 fc9d 	bl	b4bdc <HAL_Timer_Get_Milli_Seconds>
    if ((currentTime3 - lastTime3) > 1000) {
   b42a2:	4c42      	ldr	r4, [pc, #264]	; (b43ac <loop+0x1d0>)
    currentTime3 = millis();
   b42a4:	4b42      	ldr	r3, [pc, #264]	; (b43b0 <loop+0x1d4>)
   b42a6:	6018      	str	r0, [r3, #0]
    if ((currentTime3 - lastTime3) > 1000) {
   b42a8:	6823      	ldr	r3, [r4, #0]
   b42aa:	1ac0      	subs	r0, r0, r3
   b42ac:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b42b0:	dd17      	ble.n	b42e2 <loop+0x106>
        flameSensor = analogRead(FLAMEPIN);
   b42b2:	2011      	movs	r0, #17
   b42b4:	f001 feb6 	bl	b6024 <analogRead>
   b42b8:	4d3e      	ldr	r5, [pc, #248]	; (b43b4 <loop+0x1d8>)
        if (flameSensor < 1500) {
   b42ba:	f240 53db 	movw	r3, #1499	; 0x5db
   b42be:	4298      	cmp	r0, r3
        flameSensor = analogRead(FLAMEPIN);
   b42c0:	6028      	str	r0, [r5, #0]
        if (flameSensor < 1500) {
   b42c2:	dc04      	bgt.n	b42ce <loop+0xf2>
            Serial.printf("Flame Detected!");
   b42c4:	f001 fd02 	bl	b5ccc <_Z16_fetch_usbserialv>
   b42c8:	493b      	ldr	r1, [pc, #236]	; (b43b8 <loop+0x1dc>)
   b42ca:	f7ff fefd 	bl	b40c8 <_ZN5Print6printfEPKcz>
        Serial.printf("flame sensor:%i DIGITAL:%i\n", flameSensor, FLAMEPINDIGITAL);
   b42ce:	f001 fcfd 	bl	b5ccc <_Z16_fetch_usbserialv>
   b42d2:	682a      	ldr	r2, [r5, #0]
   b42d4:	4939      	ldr	r1, [pc, #228]	; (b43bc <loop+0x1e0>)
   b42d6:	2306      	movs	r3, #6
   b42d8:	f7ff fef6 	bl	b40c8 <_ZN5Print6printfEPKcz>
   b42dc:	f000 fc7e 	bl	b4bdc <HAL_Timer_Get_Milli_Seconds>
        lastTime3 = millis();
   b42e0:	6020      	str	r0, [r4, #0]
   b42e2:	f000 fc7b 	bl	b4bdc <HAL_Timer_Get_Milli_Seconds>
    if ((currentTime4 - lastTime4) > 2000) {
   b42e6:	4c36      	ldr	r4, [pc, #216]	; (b43c0 <loop+0x1e4>)
    currentTime4= millis();
   b42e8:	4b36      	ldr	r3, [pc, #216]	; (b43c4 <loop+0x1e8>)
   b42ea:	6018      	str	r0, [r3, #0]
    if ((currentTime4 - lastTime4) > 2000) {
   b42ec:	6823      	ldr	r3, [r4, #0]
   b42ee:	1ac0      	subs	r0, r0, r3
   b42f0:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b42f4:	dd13      	ble.n	b431e <loop+0x142>
        mq4Analog = analogRead(MQ4ANALOGPIN);
   b42f6:	2010      	movs	r0, #16
   b42f8:	f001 fe94 	bl	b6024 <analogRead>
   b42fc:	4d32      	ldr	r5, [pc, #200]	; (b43c8 <loop+0x1ec>)
        mq4Digital = analogRead(MQ4DIGITALPIN);
   b42fe:	4e33      	ldr	r6, [pc, #204]	; (b43cc <loop+0x1f0>)
        mq4Analog = analogRead(MQ4ANALOGPIN);
   b4300:	6028      	str	r0, [r5, #0]
        mq4Digital = analogRead(MQ4DIGITALPIN);
   b4302:	2005      	movs	r0, #5
   b4304:	f001 fe8e 	bl	b6024 <analogRead>
   b4308:	6030      	str	r0, [r6, #0]
        Serial.printf("mq4 Analog Read:%imq Digital Read:%i\n", mq4Analog, mq4Digital);
   b430a:	f001 fcdf 	bl	b5ccc <_Z16_fetch_usbserialv>
   b430e:	6833      	ldr	r3, [r6, #0]
   b4310:	682a      	ldr	r2, [r5, #0]
   b4312:	492f      	ldr	r1, [pc, #188]	; (b43d0 <loop+0x1f4>)
   b4314:	f7ff fed8 	bl	b40c8 <_ZN5Print6printfEPKcz>
   b4318:	f000 fc60 	bl	b4bdc <HAL_Timer_Get_Milli_Seconds>
        lastTime4 = millis();
   b431c:	6020      	str	r0, [r4, #0]
    diodeState = analogRead(DIODEPIN);
   b431e:	200f      	movs	r0, #15
   b4320:	f001 fe80 	bl	b6024 <analogRead>
   b4324:	4e2b      	ldr	r6, [pc, #172]	; (b43d4 <loop+0x1f8>)
    nightLed = map(diodeState,120,195,255,-0);
   b4326:	4c2c      	ldr	r4, [pc, #176]	; (b43d8 <loop+0x1fc>)
    diodeState = analogRead(DIODEPIN);
   b4328:	6030      	str	r0, [r6, #0]
    nightLed = map(diodeState,120,195,255,-0);
   b432a:	2300      	movs	r3, #0
   b432c:	9300      	str	r3, [sp, #0]
   b432e:	22c3      	movs	r2, #195	; 0xc3
   b4330:	23ff      	movs	r3, #255	; 0xff
   b4332:	2178      	movs	r1, #120	; 0x78
   b4334:	f000 fe8e 	bl	b5054 <_Z3mapiiiii>
   b4338:	6020      	str	r0, [r4, #0]
   b433a:	f000 fc4f 	bl	b4bdc <HAL_Timer_Get_Milli_Seconds>
    if((currentTime5-lastTime5)>2000){
   b433e:	4d27      	ldr	r5, [pc, #156]	; (b43dc <loop+0x200>)
    currentTime5 = millis();
   b4340:	4b27      	ldr	r3, [pc, #156]	; (b43e0 <loop+0x204>)
   b4342:	6018      	str	r0, [r3, #0]
    if((currentTime5-lastTime5)>2000){
   b4344:	682b      	ldr	r3, [r5, #0]
   b4346:	1ac0      	subs	r0, r0, r3
   b4348:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b434c:	dd09      	ble.n	b4362 <loop+0x186>
    Serial.printf("diode State:%i conversion:%i\n", diodeState,nightLed);
   b434e:	f001 fcbd 	bl	b5ccc <_Z16_fetch_usbserialv>
   b4352:	6823      	ldr	r3, [r4, #0]
   b4354:	6832      	ldr	r2, [r6, #0]
   b4356:	4923      	ldr	r1, [pc, #140]	; (b43e4 <loop+0x208>)
   b4358:	f7ff feb6 	bl	b40c8 <_ZN5Print6printfEPKcz>
   b435c:	f000 fc3e 	bl	b4bdc <HAL_Timer_Get_Milli_Seconds>
    lastTime5 =millis();
   b4360:	6028      	str	r0, [r5, #0]
     analogWrite(LEDPIN,nightLed);
   b4362:	6821      	ldr	r1, [r4, #0]
   b4364:	200e      	movs	r0, #14
}
   b4366:	b002      	add	sp, #8
   b4368:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     analogWrite(LEDPIN,nightLed);
   b436c:	f001 be71 	b.w	b6052 <_Z11analogWritetm>
            val = n;
   b4370:	4621      	mov	r1, r4
   b4372:	e788      	b.n	b4286 <loop+0xaa>
   b4374:	2003e57c 	.word	0x2003e57c
   b4378:	2003e560 	.word	0x2003e560
   b437c:	2003e598 	.word	0x2003e598
   b4380:	2003e354 	.word	0x2003e354
   b4384:	2003e6a4 	.word	0x2003e6a4
   b4388:	000b8d8d 	.word	0x000b8d8d
   b438c:	2003e66c 	.word	0x2003e66c
   b4390:	2003e534 	.word	0x2003e534
   b4394:	000b8da0 	.word	0x000b8da0
   b4398:	2003e580 	.word	0x2003e580
   b439c:	2003e564 	.word	0x2003e564
   b43a0:	000b8dce 	.word	0x000b8dce
   b43a4:	2003e6b4 	.word	0x2003e6b4
   b43a8:	000b8df6 	.word	0x000b8df6
   b43ac:	2003e584 	.word	0x2003e584
   b43b0:	2003e568 	.word	0x2003e568
   b43b4:	2003e578 	.word	0x2003e578
   b43b8:	000b8dfa 	.word	0x000b8dfa
   b43bc:	000b8e0a 	.word	0x000b8e0a
   b43c0:	2003e588 	.word	0x2003e588
   b43c4:	2003e56c 	.word	0x2003e56c
   b43c8:	2003e590 	.word	0x2003e590
   b43cc:	2003e594 	.word	0x2003e594
   b43d0:	000b8e26 	.word	0x000b8e26
   b43d4:	2003e574 	.word	0x2003e574
   b43d8:	2003e6b0 	.word	0x2003e6b0
   b43dc:	2003e58c 	.word	0x2003e58c
   b43e0:	2003e570 	.word	0x2003e570
   b43e4:	000b8e4c 	.word	0x000b8e4c

000b43e8 <_GLOBAL__sub_I_flameSensor>:
}
   b43e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
TCPClient TheClient;
   b43ea:	4d17      	ldr	r5, [pc, #92]	; (b4448 <_GLOBAL__sub_I_flameSensor+0x60>)
Ultrasonic ultrasonic(A2);
   b43ec:	4817      	ldr	r0, [pc, #92]	; (b444c <_GLOBAL__sub_I_flameSensor+0x64>)
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   b43ee:	4c18      	ldr	r4, [pc, #96]	; (b4450 <_GLOBAL__sub_I_flameSensor+0x68>)
   b43f0:	2111      	movs	r1, #17
   b43f2:	f000 f841 	bl	b4478 <_ZN10UltrasonicC1Ei>
TCPClient TheClient;
   b43f6:	4628      	mov	r0, r5
   b43f8:	f001 fb9a 	bl	b5b30 <_ZN9TCPClientC1Ev>
   b43fc:	4b15      	ldr	r3, [pc, #84]	; (b4454 <_GLOBAL__sub_I_flameSensor+0x6c>)
   b43fe:	9300      	str	r3, [sp, #0]
   b4400:	4915      	ldr	r1, [pc, #84]	; (b4458 <_GLOBAL__sub_I_flameSensor+0x70>)
   b4402:	4b16      	ldr	r3, [pc, #88]	; (b445c <_GLOBAL__sub_I_flameSensor+0x74>)
   b4404:	f240 725b 	movw	r2, #1883	; 0x75b
   b4408:	4620      	mov	r0, r4
   b440a:	f000 f86f 	bl	b44ec <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   b440e:	4b14      	ldr	r3, [pc, #80]	; (b4460 <_GLOBAL__sub_I_flameSensor+0x78>)
   b4410:	6023      	str	r3, [r4, #0]
Adafruit_MQTT_Publish mqttObj1 = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/abq_gps");
   b4412:	4621      	mov	r1, r4
   b4414:	4a13      	ldr	r2, [pc, #76]	; (b4464 <_GLOBAL__sub_I_flameSensor+0x7c>)
   b4416:	4814      	ldr	r0, [pc, #80]	; (b4468 <_GLOBAL__sub_I_flameSensor+0x80>)
   b4418:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
   b441c:	2300      	movs	r3, #0
   b441e:	f000 fafd 	bl	b4a1c <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Subscribe mqttON_OFFobject = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/ON_OFF");
   b4422:	4a12      	ldr	r2, [pc, #72]	; (b446c <_GLOBAL__sub_I_flameSensor+0x84>)
   b4424:	4812      	ldr	r0, [pc, #72]	; (b4470 <_GLOBAL__sub_I_flameSensor+0x88>)
   b4426:	2300      	movs	r3, #0
   b4428:	4621      	mov	r1, r4
   b442a:	f000 fb0b 	bl	b4a44 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b442e:	4b11      	ldr	r3, [pc, #68]	; (b4474 <_GLOBAL__sub_I_flameSensor+0x8c>)
   b4430:	2200      	movs	r2, #0
   b4432:	e9c3 2200 	strd	r2, r2, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4436:	2002      	movs	r0, #2
    SleepResult() {}
   b4438:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b443c:	609a      	str	r2, [r3, #8]
}
   b443e:	b003      	add	sp, #12
   b4440:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        set_system_mode(mode);
   b4444:	f000 bd42 	b.w	b4ecc <set_system_mode>
   b4448:	2003e544 	.word	0x2003e544
   b444c:	2003e6b4 	.word	0x2003e6b4
   b4450:	2003e598 	.word	0x2003e598
   b4454:	000b8e82 	.word	0x000b8e82
   b4458:	000b8e72 	.word	0x000b8e72
   b445c:	000b8e6a 	.word	0x000b8e6a
   b4460:	000b9100 	.word	0x000b9100
   b4464:	000b8ea3 	.word	0x000b8ea3
   b4468:	2003e6a4 	.word	0x2003e6a4
   b446c:	000b8eb9 	.word	0x000b8eb9
   b4470:	2003e66c 	.word	0x2003e66c
   b4474:	2003e538 	.word	0x2003e538

000b4478 <_ZN10UltrasonicC1Ei>:

#endif

Ultrasonic::Ultrasonic(int pin)
{
	_pin = pin;
   b4478:	6001      	str	r1, [r0, #0]
}
   b447a:	4770      	bx	lr

000b447c <_ZN10Ultrasonic20MeasureInCentimetersEv>:
/*The measured distance from the range 0 to 400 Centimeters*/
long Ultrasonic::MeasureInCentimeters(void)
{
   b447c:	b510      	push	{r4, lr}
   b447e:	4604      	mov	r4, r0
	pinMode(_pin, OUTPUT);
   b4480:	2101      	movs	r1, #1
   b4482:	8800      	ldrh	r0, [r0, #0]
   b4484:	f001 fda4 	bl	b5fd0 <pinMode>
	digitalWrite(_pin, LOW);
   b4488:	8820      	ldrh	r0, [r4, #0]
   b448a:	2100      	movs	r1, #0
   b448c:	f001 fdb1 	bl	b5ff2 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b4490:	2002      	movs	r0, #2
   b4492:	f000 fb9b 	bl	b4bcc <HAL_Delay_Microseconds>
	delayMicroseconds(2);
	digitalWrite(_pin, HIGH);
   b4496:	8820      	ldrh	r0, [r4, #0]
   b4498:	2101      	movs	r1, #1
   b449a:	f001 fdaa 	bl	b5ff2 <digitalWrite>
   b449e:	2005      	movs	r0, #5
   b44a0:	f000 fb94 	bl	b4bcc <HAL_Delay_Microseconds>
	delayMicroseconds(5);
	digitalWrite(_pin,LOW);
   b44a4:	8820      	ldrh	r0, [r4, #0]
   b44a6:	2100      	movs	r1, #0
   b44a8:	f001 fda3 	bl	b5ff2 <digitalWrite>
	pinMode(_pin,INPUT);
   b44ac:	8820      	ldrh	r0, [r4, #0]
   b44ae:	2100      	movs	r1, #0
   b44b0:	f001 fd8e 	bl	b5fd0 <pinMode>
	long duration;
	duration = pulseIn(_pin,HIGH);
   b44b4:	8820      	ldrh	r0, [r4, #0]
   b44b6:	2101      	movs	r1, #1
   b44b8:	f001 fdf1 	bl	b609e <pulseIn>
	long RangeInCentimeters;
	RangeInCentimeters = duration/29/2;
	return RangeInCentimeters;
}
   b44bc:	233a      	movs	r3, #58	; 0x3a
   b44be:	fb90 f0f3 	sdiv	r0, r0, r3
   b44c2:	bd10      	pop	{r4, pc}

000b44c4 <_ZL11stringprintPhPKct.constprop.0>:
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   b44c4:	b513      	push	{r0, r1, r4, lr}
   b44c6:	4604      	mov	r4, r0
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   b44c8:	4608      	mov	r0, r1
   b44ca:	9101      	str	r1, [sp, #4]
   b44cc:	f002 fcc2 	bl	b6e54 <strlen>
  /*
  for (uint8_t i=0; i<len; i++) {
    Serial.write(pgm_read_byte(s+i));
  }
  */
  p[0] = len >> 8; p++;
   b44d0:	f3c0 2307 	ubfx	r3, r0, #8, #8
   b44d4:	7023      	strb	r3, [r4, #0]
  p[0] = len & 0xFF; p++;
   b44d6:	7060      	strb	r0, [r4, #1]
   b44d8:	1ca3      	adds	r3, r4, #2
  strncpy((char *)p, s, len);
   b44da:	b284      	uxth	r4, r0
   b44dc:	9901      	ldr	r1, [sp, #4]
   b44de:	4622      	mov	r2, r4
   b44e0:	4618      	mov	r0, r3
   b44e2:	f002 fcf5 	bl	b6ed0 <strncpy>
  return p+len;
}
   b44e6:	4420      	add	r0, r4
   b44e8:	b002      	add	sp, #8
   b44ea:	bd10      	pop	{r4, pc}

000b44ec <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   b44ec:	b530      	push	{r4, r5, lr}
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
   b44ee:	8102      	strh	r2, [r0, #8]
  clientid = "";
   b44f0:	4a0a      	ldr	r2, [pc, #40]	; (b451c <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x30>)
                             const char *pass) {
   b44f2:	4d0b      	ldr	r5, [pc, #44]	; (b4520 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x34>)
  username = user;
   b44f4:	e9c0 2303 	strd	r2, r3, [r0, #12]
  password = pass;
   b44f8:	9b03      	ldr	r3, [sp, #12]
   b44fa:	6143      	str	r3, [r0, #20]

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   b44fc:	2300      	movs	r3, #0
  servername = server;
   b44fe:	e9c0 5100 	strd	r5, r1, [r0]
    subscriptions[i] = 0;
   b4502:	e9c0 332f 	strd	r3, r3, [r0, #188]	; 0xbc
   b4506:	e9c0 3331 	strd	r3, r3, [r0, #196]	; 0xc4
  }

  will_topic = 0;
  will_payload = 0;
   b450a:	e9c0 3306 	strd	r3, r3, [r0, #24]
    subscriptions[i] = 0;
   b450e:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  will_qos = 0;
   b4512:	8403      	strh	r3, [r0, #32]
  will_retain = 0;

  packet_id_counter = 0;
   b4514:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   b4518:	bd30      	pop	{r4, r5, pc}
   b451a:	bf00      	nop
   b451c:	000b8dcd 	.word	0x000b8dcd
   b4520:	000b90b4 	.word	0x000b90b4

000b4524 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>:
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   b4524:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4528:	4616      	mov	r6, r2
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   b452a:	6802      	ldr	r2, [r0, #0]
   b452c:	b21b      	sxth	r3, r3
   b452e:	6997      	ldr	r7, [r2, #24]
   b4530:	9301      	str	r3, [sp, #4]
   b4532:	2201      	movs	r2, #1
uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   b4534:	4605      	mov	r5, r0
   b4536:	460c      	mov	r4, r1
  rlen = readPacket(pbuff, 1, timeout);
   b4538:	47b8      	blx	r7
  if (rlen != 1) return 0;
   b453a:	b2c7      	uxtb	r7, r0
   b453c:	2f01      	cmp	r7, #1
   b453e:	9b01      	ldr	r3, [sp, #4]
   b4540:	d003      	beq.n	b454a <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x26>
   b4542:	2000      	movs	r0, #0
    rlen = readPacket(pbuff, value, timeout);
  }
  //DEBUG_PRINT(F("Remaining packet:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);

  return ((pbuff - buffer)+rlen);
}
   b4544:	b003      	add	sp, #12
   b4546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pbuff++;
   b454a:	f104 0801 	add.w	r8, r4, #1
  uint32_t multiplier = 1;
   b454e:	f104 0a05 	add.w	sl, r4, #5
  uint32_t value = 0;
   b4552:	f04f 0900 	mov.w	r9, #0
    rlen = readPacket(pbuff, 1, timeout);
   b4556:	682a      	ldr	r2, [r5, #0]
   b4558:	9301      	str	r3, [sp, #4]
   b455a:	f8d2 b018 	ldr.w	fp, [r2, #24]
   b455e:	4641      	mov	r1, r8
   b4560:	2201      	movs	r2, #1
   b4562:	4628      	mov	r0, r5
   b4564:	47d8      	blx	fp
    if (rlen != 1) return 0;
   b4566:	b2c0      	uxtb	r0, r0
   b4568:	2801      	cmp	r0, #1
   b456a:	d1ea      	bne.n	b4542 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    encodedByte = pbuff[0]; // save the last read val
   b456c:	f818 2b01 	ldrb.w	r2, [r8], #1
    uint32_t intermediate = encodedByte & 0x7F;
   b4570:	f002 017f 	and.w	r1, r2, #127	; 0x7f
    if (multiplier > (128UL*128UL*128UL)) {
   b4574:	45c2      	cmp	sl, r8
    value += intermediate;
   b4576:	fb01 9907 	mla	r9, r1, r7, r9
    multiplier *= 128;
   b457a:	ea4f 17c7 	mov.w	r7, r7, lsl #7
    if (multiplier > (128UL*128UL*128UL)) {
   b457e:	d0e0      	beq.n	b4542 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
  } while (encodedByte & 0x80);
   b4580:	f012 0f80 	tst.w	r2, #128	; 0x80
   b4584:	9b01      	ldr	r3, [sp, #4]
   b4586:	d1e6      	bne.n	b4556 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x32>
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   b4588:	eba8 0404 	sub.w	r4, r8, r4
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   b458c:	b2a7      	uxth	r7, r4
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   b458e:	1b34      	subs	r4, r6, r4
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   b4590:	682a      	ldr	r2, [r5, #0]
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   b4592:	3c01      	subs	r4, #1
   b4594:	454c      	cmp	r4, r9
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   b4596:	f8d2 a018 	ldr.w	sl, [r2, #24]
   b459a:	bf3d      	ittte	cc
   b459c:	f106 32ff 	addcc.w	r2, r6, #4294967295	; 0xffffffff
   b45a0:	1bd2      	subcc	r2, r2, r7
   b45a2:	b292      	uxthcc	r2, r2
    rlen = readPacket(pbuff, value, timeout);
   b45a4:	fa1f f289 	uxthcs.w	r2, r9
   b45a8:	4641      	mov	r1, r8
   b45aa:	4628      	mov	r0, r5
   b45ac:	47d0      	blx	sl
   b45ae:	b2c0      	uxtb	r0, r0
  return ((pbuff - buffer)+rlen);
   b45b0:	4438      	add	r0, r7
   b45b2:	b280      	uxth	r0, r0
   b45b4:	e7c6      	b.n	b4544 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x20>
	...

000b45b8 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>:
uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   b45b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      ERROR_PRINTLN(F("Dropped a packet"));
   b45bc:	f8df 8030 	ldr.w	r8, [pc, #48]	; b45f0 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x38>
uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   b45c0:	4605      	mov	r5, r0
   b45c2:	460c      	mov	r4, r1
   b45c4:	4616      	mov	r6, r2
   b45c6:	461f      	mov	r7, r3
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   b45c8:	463b      	mov	r3, r7
   b45ca:	2296      	movs	r2, #150	; 0x96
   b45cc:	4621      	mov	r1, r4
   b45ce:	4628      	mov	r0, r5
   b45d0:	f7ff ffa8 	bl	b4524 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
   b45d4:	b148      	cbz	r0, b45ea <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x32>
    if ((buffer[0] >> 4) == waitforpackettype) {
   b45d6:	7823      	ldrb	r3, [r4, #0]
   b45d8:	ebb6 1f13 	cmp.w	r6, r3, lsr #4
   b45dc:	d005      	beq.n	b45ea <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x32>
      ERROR_PRINTLN(F("Dropped a packet"));
   b45de:	f001 fb75 	bl	b5ccc <_Z16_fetch_usbserialv>
   b45e2:	4641      	mov	r1, r8
   b45e4:	f000 ff4d 	bl	b5482 <_ZN5Print7printlnEPKc>
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   b45e8:	e7ee      	b.n	b45c8 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x10>
}
   b45ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b45ee:	bf00      	nop
   b45f0:	000b8ece 	.word	0x000b8ece

000b45f4 <_ZN13Adafruit_MQTT18connectErrorStringEa>:

const FLASH_STRING* Adafruit_MQTT::connectErrorString(int8_t code)
{
   switch (code) {
   b45f4:	3102      	adds	r1, #2
   b45f6:	b2c9      	uxtb	r1, r1
   b45f8:	2909      	cmp	r1, #9
   b45fa:	bf9a      	itte	ls
   b45fc:	4b02      	ldrls	r3, [pc, #8]	; (b4608 <_ZN13Adafruit_MQTT18connectErrorStringEa+0x14>)
   b45fe:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
   b4602:	4802      	ldrhi	r0, [pc, #8]	; (b460c <_ZN13Adafruit_MQTT18connectErrorStringEa+0x18>)
      case 7: return F("You have been banned from connecting. Please contact the MQTT server administrator for more details.");
      case -1: return F("Connection failed");
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}
   b4604:	4770      	bx	lr
   b4606:	bf00      	nop
   b4608:	000b90d0 	.word	0x000b90d0
   b460c:	000b8edf 	.word	0x000b8edf

000b4610 <_ZN13Adafruit_MQTT10disconnectEv>:

bool Adafruit_MQTT::disconnect() {
   b4610:	b510      	push	{r4, lr}
  DEBUG_PRINTBUFFER(buffer, 4);
  return 4;
}

uint8_t Adafruit_MQTT::disconnectPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_DISCONNECT << 4;
   b4612:	23e0      	movs	r3, #224	; 0xe0
   b4614:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  uint8_t len = disconnectPacket(buffer);
   b4618:	4601      	mov	r1, r0
  packet[1] = 0;
   b461a:	2300      	movs	r3, #0
   b461c:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
  if (! sendPacket(buffer, len))
   b4620:	f851 3b22 	ldr.w	r3, [r1], #34
bool Adafruit_MQTT::disconnect() {
   b4624:	4604      	mov	r4, r0
  if (! sendPacket(buffer, len))
   b4626:	695b      	ldr	r3, [r3, #20]
   b4628:	2202      	movs	r2, #2
   b462a:	4798      	blx	r3
  return disconnectServer();
   b462c:	6823      	ldr	r3, [r4, #0]
   b462e:	4620      	mov	r0, r4
   b4630:	691b      	ldr	r3, [r3, #16]
}
   b4632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return disconnectServer();
   b4636:	4718      	bx	r3

000b4638 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>:
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   b4638:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
   b463c:	b530      	push	{r4, r5, lr}
   b463e:	4613      	mov	r3, r2
   b4640:	f100 04d0 	add.w	r4, r0, #208	; 0xd0
    if (subscriptions[i] == sub) {
   b4644:	f853 5b04 	ldr.w	r5, [r3], #4
   b4648:	428d      	cmp	r5, r1
   b464a:	d009      	beq.n	b4660 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x28>
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   b464c:	42a3      	cmp	r3, r4
   b464e:	d1f9      	bne.n	b4644 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0xc>
   b4650:	2300      	movs	r3, #0
      if (subscriptions[i] == 0) {
   b4652:	f852 4b04 	ldr.w	r4, [r2], #4
   b4656:	b92c      	cbnz	r4, b4664 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x2c>
        subscriptions[i] = sub;
   b4658:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   b465c:	f8c0 10bc 	str.w	r1, [r0, #188]	; 0xbc
      return true;
   b4660:	2001      	movs	r0, #1
   b4662:	e003      	b.n	b466c <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   b4664:	3301      	adds	r3, #1
   b4666:	2b05      	cmp	r3, #5
   b4668:	d1f3      	bne.n	b4652 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x1a>
  return false;
   b466a:	2000      	movs	r0, #0
}
   b466c:	bd30      	pop	{r4, r5, pc}

000b466e <_ZN13Adafruit_MQTT16readSubscriptionEs>:
Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   b466e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   b4672:	f100 0922 	add.w	r9, r0, #34	; 0x22
   b4676:	b28b      	uxth	r3, r1
Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   b4678:	b085      	sub	sp, #20
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   b467a:	2296      	movs	r2, #150	; 0x96
   b467c:	4649      	mov	r1, r9
Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   b467e:	4605      	mov	r5, r0
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   b4680:	f7ff ff50 	bl	b4524 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (!len)
   b4684:	4606      	mov	r6, r0
   b4686:	b1f0      	cbz	r0, b46c6 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x58>
  topiclen = buffer[3];
   b4688:	f895 7025 	ldrb.w	r7, [r5, #37]	; 0x25
   b468c:	9700      	str	r7, [sp, #0]
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   b468e:	f105 0abc 	add.w	sl, r5, #188	; 0xbc
  topiclen = buffer[3];
   b4692:	f04f 0800 	mov.w	r8, #0
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   b4696:	f105 0b26 	add.w	fp, r5, #38	; 0x26
    if (subscriptions[i]) {
   b469a:	f85a 4b04 	ldr.w	r4, [sl], #4
   b469e:	b16c      	cbz	r4, b46bc <_ZN13Adafruit_MQTT16readSubscriptionEs+0x4e>
      if (strlen(subscriptions[i]->topic) != topiclen)
   b46a0:	6821      	ldr	r1, [r4, #0]
   b46a2:	9101      	str	r1, [sp, #4]
   b46a4:	4608      	mov	r0, r1
   b46a6:	f002 fbd5 	bl	b6e54 <strlen>
   b46aa:	42b8      	cmp	r0, r7
   b46ac:	d106      	bne.n	b46bc <_ZN13Adafruit_MQTT16readSubscriptionEs+0x4e>
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   b46ae:	9901      	ldr	r1, [sp, #4]
   b46b0:	463a      	mov	r2, r7
   b46b2:	4658      	mov	r0, fp
   b46b4:	f002 fbd6 	bl	b6e64 <strncasecmp>
   b46b8:	2800      	cmp	r0, #0
   b46ba:	d048      	beq.n	b474e <_ZN13Adafruit_MQTT16readSubscriptionEs+0xe0>
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   b46bc:	f108 0801 	add.w	r8, r8, #1
   b46c0:	f1b8 0f05 	cmp.w	r8, #5
   b46c4:	d1e9      	bne.n	b469a <_ZN13Adafruit_MQTT16readSubscriptionEs+0x2c>
    return NULL;  // No data available, just quit.
   b46c6:	2000      	movs	r0, #0
   b46c8:	e03e      	b.n	b4748 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xda>
    packetid = buffer[topiclen+4];
   b46ca:	19ea      	adds	r2, r5, r7
   b46cc:	f892 0026 	ldrb.w	r0, [r2, #38]	; 0x26
    packetid |= buffer[topiclen+5];
   b46d0:	f892 a027 	ldrb.w	sl, [r2, #39]	; 0x27
   b46d4:	ea4a 2a00 	orr.w	sl, sl, r0, lsl #8
  memset(subscriptions[i]->lastread, 0, SUBSCRIPTIONDATALEN);
   b46d8:	2214      	movs	r2, #20
   b46da:	2100      	movs	r1, #0
   b46dc:	1d60      	adds	r0, r4, #5
   b46de:	f002 fb70 	bl	b6dc2 <memset>
  datalen = len - topiclen - packet_id_len - 4;
   b46e2:	9b00      	ldr	r3, [sp, #0]
   b46e4:	f5c3 447f 	rsb	r4, r3, #65280	; 0xff00
   b46e8:	34fc      	adds	r4, #252	; 0xfc
   b46ea:	4426      	add	r6, r4
   b46ec:	eb05 0888 	add.w	r8, r5, r8, lsl #2
   b46f0:	eba6 060b 	sub.w	r6, r6, fp
   b46f4:	b2b6      	uxth	r6, r6
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   b46f6:	2e15      	cmp	r6, #21
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   b46f8:	f8d8 00bc 	ldr.w	r0, [r8, #188]	; 0xbc
   b46fc:	f107 0104 	add.w	r1, r7, #4
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   b4700:	bf28      	it	cs
   b4702:	2613      	movcs	r6, #19
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   b4704:	4459      	add	r1, fp
   b4706:	4632      	mov	r2, r6
   b4708:	4449      	add	r1, r9
   b470a:	3005      	adds	r0, #5
   b470c:	f002 fb3f 	bl	b6d8e <memmove>
  subscriptions[i]->datalen = datalen;
   b4710:	f8d8 30bc 	ldr.w	r3, [r8, #188]	; 0xbc
   b4714:	835e      	strh	r6, [r3, #26]
  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
   b4716:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
   b471a:	f003 0306 	and.w	r3, r3, #6
   b471e:	2b02      	cmp	r3, #2
   b4720:	d110      	bne.n	b4744 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xd6>
  packet[1] = 2;
   b4722:	f88d 300d 	strb.w	r3, [sp, #13]
  packet[2] = packetid >> 8;
   b4726:	ea4f 231a 	mov.w	r3, sl, lsr #8
   b472a:	f88d 300e 	strb.w	r3, [sp, #14]
    if (!sendPacket(ackpacket, len))
   b472e:	682b      	ldr	r3, [r5, #0]
  packet[3] = packetid;
   b4730:	f88d a00f 	strb.w	sl, [sp, #15]
  packet[0] = MQTT_CTRL_PUBACK << 4;
   b4734:	2240      	movs	r2, #64	; 0x40
   b4736:	f88d 200c 	strb.w	r2, [sp, #12]
    if (!sendPacket(ackpacket, len))
   b473a:	695b      	ldr	r3, [r3, #20]
   b473c:	2204      	movs	r2, #4
   b473e:	a903      	add	r1, sp, #12
   b4740:	4628      	mov	r0, r5
   b4742:	4798      	blx	r3
  return subscriptions[i];
   b4744:	f8d8 00bc 	ldr.w	r0, [r8, #188]	; 0xbc
}
   b4748:	b005      	add	sp, #20
   b474a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((buffer[0] & 0x6) == 0x2) {
   b474e:	f895 b022 	ldrb.w	fp, [r5, #34]	; 0x22
   b4752:	f00b 0b06 	and.w	fp, fp, #6
   b4756:	f1bb 0f02 	cmp.w	fp, #2
   b475a:	d0b6      	beq.n	b46ca <_ZN13Adafruit_MQTT16readSubscriptionEs+0x5c>
  uint16_t packetid=0;
   b475c:	4682      	mov	sl, r0
  uint8_t packet_id_len = 0;
   b475e:	4683      	mov	fp, r0
   b4760:	e7ba      	b.n	b46d8 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x6a>
	...

000b4764 <_ZN13Adafruit_MQTT13connectPacketEPh>:
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   b4764:	b538      	push	{r3, r4, r5, lr}
   b4766:	4605      	mov	r5, r0
  p[0] = (MQTT_CTRL_CONNECT << 4) | 0x0;
   b4768:	4608      	mov	r0, r1
   b476a:	2310      	movs	r3, #16
   b476c:	f800 3b02 	strb.w	r3, [r0], #2
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   b4770:	460c      	mov	r4, r1
    p = stringprint(p, "MQTT");
   b4772:	4929      	ldr	r1, [pc, #164]	; (b4818 <_ZN13Adafruit_MQTT13connectPacketEPh+0xb4>)
   b4774:	f7ff fea6 	bl	b44c4 <_ZL11stringprintPhPKct.constprop.0>
  p[0] = MQTT_PROTOCOL_LEVEL;
   b4778:	2304      	movs	r3, #4
   b477a:	7003      	strb	r3, [r0, #0]
  p[0] = MQTT_CONN_CLEANSESSION;
   b477c:	2302      	movs	r3, #2
   b477e:	7043      	strb	r3, [r0, #1]
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   b4780:	69ab      	ldr	r3, [r5, #24]
   b4782:	b18b      	cbz	r3, b47a8 <_ZN13Adafruit_MQTT13connectPacketEPh+0x44>
   b4784:	781b      	ldrb	r3, [r3, #0]
   b4786:	b17b      	cbz	r3, b47a8 <_ZN13Adafruit_MQTT13connectPacketEPh+0x44>
    p[0] |= MQTT_CONN_WILLFLAG;
   b4788:	2306      	movs	r3, #6
   b478a:	7043      	strb	r3, [r0, #1]
    if(will_qos == 1)
   b478c:	f895 3020 	ldrb.w	r3, [r5, #32]
   b4790:	2b01      	cmp	r3, #1
   b4792:	d139      	bne.n	b4808 <_ZN13Adafruit_MQTT13connectPacketEPh+0xa4>
      p[0] |= MQTT_CONN_WILLQOS_1;
   b4794:	230e      	movs	r3, #14
      p[0] |= MQTT_CONN_WILLQOS_2;
   b4796:	7043      	strb	r3, [r0, #1]
    if(will_retain == 1)
   b4798:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   b479c:	2b01      	cmp	r3, #1
      p[0] |= MQTT_CONN_WILLRETAIN;
   b479e:	bf02      	ittt	eq
   b47a0:	7843      	ldrbeq	r3, [r0, #1]
   b47a2:	f043 0320 	orreq.w	r3, r3, #32
   b47a6:	7043      	strbeq	r3, [r0, #1]
  if (pgm_read_byte(username) != 0)
   b47a8:	692b      	ldr	r3, [r5, #16]
   b47aa:	781b      	ldrb	r3, [r3, #0]
   b47ac:	b11b      	cbz	r3, b47b6 <_ZN13Adafruit_MQTT13connectPacketEPh+0x52>
    p[0] |= MQTT_CONN_USERNAMEFLAG;
   b47ae:	7843      	ldrb	r3, [r0, #1]
   b47b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   b47b4:	7043      	strb	r3, [r0, #1]
  if (pgm_read_byte(password) != 0)
   b47b6:	696b      	ldr	r3, [r5, #20]
   b47b8:	781b      	ldrb	r3, [r3, #0]
   b47ba:	b11b      	cbz	r3, b47c4 <_ZN13Adafruit_MQTT13connectPacketEPh+0x60>
    p[0] |= MQTT_CONN_PASSWORDFLAG;
   b47bc:	7843      	ldrb	r3, [r0, #1]
   b47be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   b47c2:	7043      	strb	r3, [r0, #1]
  p[0] = MQTT_CONN_KEEPALIVE >> 8;
   b47c4:	2301      	movs	r3, #1
   b47c6:	7083      	strb	r3, [r0, #2]
  p[0] = MQTT_CONN_KEEPALIVE & 0xFF;
   b47c8:	232c      	movs	r3, #44	; 0x2c
   b47ca:	70c3      	strb	r3, [r0, #3]
    if (pgm_read_byte(clientid) != 0) {
   b47cc:	68e9      	ldr	r1, [r5, #12]
   b47ce:	780b      	ldrb	r3, [r1, #0]
   b47d0:	b1f3      	cbz	r3, b4810 <_ZN13Adafruit_MQTT13connectPacketEPh+0xac>
      p = stringprint(p, clientid);
   b47d2:	3004      	adds	r0, #4
   b47d4:	f7ff fe76 	bl	b44c4 <_ZL11stringprintPhPKct.constprop.0>
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   b47d8:	69a9      	ldr	r1, [r5, #24]
   b47da:	b131      	cbz	r1, b47ea <_ZN13Adafruit_MQTT13connectPacketEPh+0x86>
   b47dc:	780b      	ldrb	r3, [r1, #0]
   b47de:	b123      	cbz	r3, b47ea <_ZN13Adafruit_MQTT13connectPacketEPh+0x86>
    p = stringprint(p, will_topic);
   b47e0:	f7ff fe70 	bl	b44c4 <_ZL11stringprintPhPKct.constprop.0>
    p = stringprint(p, will_payload);
   b47e4:	69e9      	ldr	r1, [r5, #28]
   b47e6:	f7ff fe6d 	bl	b44c4 <_ZL11stringprintPhPKct.constprop.0>
  if (pgm_read_byte(username) != 0) {
   b47ea:	6929      	ldr	r1, [r5, #16]
   b47ec:	780b      	ldrb	r3, [r1, #0]
   b47ee:	b10b      	cbz	r3, b47f4 <_ZN13Adafruit_MQTT13connectPacketEPh+0x90>
    p = stringprint(p, username);
   b47f0:	f7ff fe68 	bl	b44c4 <_ZL11stringprintPhPKct.constprop.0>
  if (pgm_read_byte(password) != 0) {
   b47f4:	6969      	ldr	r1, [r5, #20]
   b47f6:	780b      	ldrb	r3, [r1, #0]
   b47f8:	b10b      	cbz	r3, b47fe <_ZN13Adafruit_MQTT13connectPacketEPh+0x9a>
    p = stringprint(p, password);
   b47fa:	f7ff fe63 	bl	b44c4 <_ZL11stringprintPhPKct.constprop.0>
  len = p - packet;
   b47fe:	1b00      	subs	r0, r0, r4
  packet[1] = len-2;  // don't include the 2 bytes of fixed header data
   b4800:	b2c0      	uxtb	r0, r0
   b4802:	1e83      	subs	r3, r0, #2
   b4804:	7063      	strb	r3, [r4, #1]
}
   b4806:	bd38      	pop	{r3, r4, r5, pc}
    else if(will_qos == 2)
   b4808:	2b02      	cmp	r3, #2
   b480a:	d1c5      	bne.n	b4798 <_ZN13Adafruit_MQTT13connectPacketEPh+0x34>
      p[0] |= MQTT_CONN_WILLQOS_2;
   b480c:	231e      	movs	r3, #30
   b480e:	e7c2      	b.n	b4796 <_ZN13Adafruit_MQTT13connectPacketEPh+0x32>
      p[0] = 0x0;
   b4810:	7103      	strb	r3, [r0, #4]
      p[0] = 0x0;
   b4812:	7143      	strb	r3, [r0, #5]
      p++;
   b4814:	3006      	adds	r0, #6
   b4816:	e7df      	b.n	b47d8 <_ZN13Adafruit_MQTT13connectPacketEPh+0x74>
   b4818:	000b8eed 	.word	0x000b8eed

000b481c <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>:
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   b481c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b4820:	4605      	mov	r5, r0
  len += strlen(topic); // topic length
   b4822:	4610      	mov	r0, r2
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   b4824:	460e      	mov	r6, r1
   b4826:	4698      	mov	r8, r3
  len += strlen(topic); // topic length
   b4828:	9201      	str	r2, [sp, #4]
   b482a:	f002 fb13 	bl	b6e54 <strlen>
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   b482e:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   b4832:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
  if(qos > 0) { 
   b4836:	9901      	ldr	r1, [sp, #4]
  len += strlen(topic); // topic length
   b4838:	b284      	uxth	r4, r0
  if(qos > 0) { 
   b483a:	f1b9 0f00 	cmp.w	r9, #0
   b483e:	d135      	bne.n	b48ac <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x90>
  len += strlen(topic); // topic length
   b4840:	3402      	adds	r4, #2
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   b4842:	ea4f 0349 	mov.w	r3, r9, lsl #1
   b4846:	4630      	mov	r0, r6
    len += 2; // qos packet id
   b4848:	b2a4      	uxth	r4, r4
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   b484a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
  len += bLen; // payload length
   b484e:	443c      	add	r4, r7
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   b4850:	f800 3b01 	strb.w	r3, [r0], #1
  len += bLen; // payload length
   b4854:	b2a4      	uxth	r4, r4
    uint8_t encodedByte = len % 128;
   b4856:	4622      	mov	r2, r4
   b4858:	f004 037f 	and.w	r3, r4, #127	; 0x7f
    if ( len > 0 ) {
   b485c:	2a7f      	cmp	r2, #127	; 0x7f
      encodedByte |= 0x80;
   b485e:	bf88      	it	hi
   b4860:	f043 0380 	orrhi.w	r3, r3, #128	; 0x80
  } while ( len > 0 );
   b4864:	2a7f      	cmp	r2, #127	; 0x7f
    p[0] = encodedByte;
   b4866:	f800 3b01 	strb.w	r3, [r0], #1
    len /= 128;
   b486a:	ea4f 14d4 	mov.w	r4, r4, lsr #7
  } while ( len > 0 );
   b486e:	d8f2      	bhi.n	b4856 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x3a>
  p = stringprint(p, topic);
   b4870:	f7ff fe28 	bl	b44c4 <_ZL11stringprintPhPKct.constprop.0>
   b4874:	4603      	mov	r3, r0
  if(qos > 0) {
   b4876:	f1b9 0f00 	cmp.w	r9, #0
   b487a:	d00c      	beq.n	b4896 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x7a>
    p[0] = (packet_id_counter >> 8) & 0xFF;
   b487c:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   b4880:	0a12      	lsrs	r2, r2, #8
   b4882:	7002      	strb	r2, [r0, #0]
    p[1] = packet_id_counter & 0xFF;
   b4884:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   b4888:	7042      	strb	r2, [r0, #1]
    packet_id_counter++;
   b488a:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   b488e:	3201      	adds	r2, #1
    p+=2;
   b4890:	3302      	adds	r3, #2
    packet_id_counter++;
   b4892:	f8a5 20b8 	strh.w	r2, [r5, #184]	; 0xb8
  memmove(p, data, bLen);
   b4896:	463a      	mov	r2, r7
   b4898:	4641      	mov	r1, r8
   b489a:	4618      	mov	r0, r3
   b489c:	f002 fa77 	bl	b6d8e <memmove>
  p+= bLen;
   b48a0:	4438      	add	r0, r7
  len = p - packet;
   b48a2:	1b80      	subs	r0, r0, r6
}
   b48a4:	b280      	uxth	r0, r0
   b48a6:	b003      	add	sp, #12
   b48a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    len += 2; // qos packet id
   b48ac:	3404      	adds	r4, #4
   b48ae:	e7c8      	b.n	b4842 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x26>

000b48b0 <_ZN13Adafruit_MQTT7publishEPKcPhth>:
bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   b48b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b48b2:	f89d 6018 	ldrb.w	r6, [sp, #24]
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   b48b6:	f100 0522 	add.w	r5, r0, #34	; 0x22
bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   b48ba:	4604      	mov	r4, r0
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   b48bc:	e9cd 3600 	strd	r3, r6, [sp]
   b48c0:	4613      	mov	r3, r2
   b48c2:	460a      	mov	r2, r1
   b48c4:	4629      	mov	r1, r5
   b48c6:	f7ff ffa9 	bl	b481c <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>
  if (!sendPacket(buffer, len))
   b48ca:	6823      	ldr	r3, [r4, #0]
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   b48cc:	4602      	mov	r2, r0
  if (!sendPacket(buffer, len))
   b48ce:	695b      	ldr	r3, [r3, #20]
   b48d0:	4629      	mov	r1, r5
   b48d2:	4620      	mov	r0, r4
   b48d4:	4798      	blx	r3
   b48d6:	b910      	cbnz	r0, b48de <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2e>
    return false;
   b48d8:	2000      	movs	r0, #0
}
   b48da:	b002      	add	sp, #8
   b48dc:	bd70      	pop	{r4, r5, r6, pc}
  if (qos > 0) {
   b48de:	2e00      	cmp	r6, #0
   b48e0:	d0fb      	beq.n	b48da <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2a>
    len = readFullPacket(buffer, MAXBUFFERSIZE, PUBLISH_TIMEOUT_MS);
   b48e2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   b48e6:	2296      	movs	r2, #150	; 0x96
   b48e8:	4629      	mov	r1, r5
   b48ea:	4620      	mov	r0, r4
   b48ec:	f7ff fe1a 	bl	b4524 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
    if (len != 4)
   b48f0:	2804      	cmp	r0, #4
   b48f2:	d1f1      	bne.n	b48d8 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
    if ((buffer[0] >> 4) != MQTT_CTRL_PUBACK)
   b48f4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b48f8:	091b      	lsrs	r3, r3, #4
   b48fa:	2b04      	cmp	r3, #4
   b48fc:	d1ec      	bne.n	b48d8 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
    packnum |= buffer[3];
   b48fe:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    if (packnum != packet_id_counter)
   b4900:	f8b4 00b8 	ldrh.w	r0, [r4, #184]	; 0xb8
   b4904:	ba5b      	rev16	r3, r3
    packnum++;
   b4906:	3301      	adds	r3, #1
    if (packnum != packet_id_counter)
   b4908:	b29b      	uxth	r3, r3
   b490a:	1ac3      	subs	r3, r0, r3
   b490c:	4258      	negs	r0, r3
   b490e:	4158      	adcs	r0, r3
   b4910:	e7e3      	b.n	b48da <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2a>

000b4912 <_ZN13Adafruit_MQTT7publishEPKcS1_h>:
bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   b4912:	b530      	push	{r4, r5, lr}
   b4914:	b085      	sub	sp, #20
   b4916:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   b4918:	4610      	mov	r0, r2
bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   b491a:	461d      	mov	r5, r3
   b491c:	9103      	str	r1, [sp, #12]
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   b491e:	9202      	str	r2, [sp, #8]
   b4920:	f002 fa98 	bl	b6e54 <strlen>
   b4924:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   b4928:	b283      	uxth	r3, r0
   b492a:	9500      	str	r5, [sp, #0]
   b492c:	4620      	mov	r0, r4
   b492e:	f7ff ffbf 	bl	b48b0 <_ZN13Adafruit_MQTT7publishEPKcPhth>
}
   b4932:	b005      	add	sp, #20
   b4934:	bd30      	pop	{r4, r5, pc}

000b4936 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>:
                                       uint8_t qos) {
   b4936:	b538      	push	{r3, r4, r5, lr}
   b4938:	461d      	mov	r5, r3
  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
   b493a:	2382      	movs	r3, #130	; 0x82
   b493c:	700b      	strb	r3, [r1, #0]
  p[0] = (packet_id_counter >> 8) & 0xFF;
   b493e:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   b4942:	0a1b      	lsrs	r3, r3, #8
   b4944:	708b      	strb	r3, [r1, #2]
  p[1] = packet_id_counter & 0xFF;
   b4946:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   b494a:	70cb      	strb	r3, [r1, #3]
  packet_id_counter++;
   b494c:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
                                       uint8_t qos) {
   b4950:	460c      	mov	r4, r1
  packet_id_counter++;
   b4952:	3301      	adds	r3, #1
   b4954:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8
  p = stringprint(p, topic);
   b4958:	4611      	mov	r1, r2
   b495a:	1d20      	adds	r0, r4, #4
   b495c:	f7ff fdb2 	bl	b44c4 <_ZL11stringprintPhPKct.constprop.0>
  p[0] = qos;
   b4960:	f800 5b01 	strb.w	r5, [r0], #1
  len = p - packet;
   b4964:	1b00      	subs	r0, r0, r4
  packet[1] = len-2; // don't include the 2 bytes of fixed header data
   b4966:	b2c0      	uxtb	r0, r0
   b4968:	1e83      	subs	r3, r0, #2
   b496a:	7063      	strb	r3, [r4, #1]
}
   b496c:	bd38      	pop	{r3, r4, r5, pc}

000b496e <_ZN13Adafruit_MQTT7connectEv>:
int8_t Adafruit_MQTT::connect() {
   b496e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!connectServer())
   b4972:	6803      	ldr	r3, [r0, #0]
   b4974:	68db      	ldr	r3, [r3, #12]
int8_t Adafruit_MQTT::connect() {
   b4976:	4604      	mov	r4, r0
  if (!connectServer())
   b4978:	4798      	blx	r3
   b497a:	2800      	cmp	r0, #0
   b497c:	d04b      	beq.n	b4a16 <_ZN13Adafruit_MQTT7connectEv+0xa8>
  uint8_t len = connectPacket(buffer);
   b497e:	f104 0522 	add.w	r5, r4, #34	; 0x22
   b4982:	4629      	mov	r1, r5
   b4984:	4620      	mov	r0, r4
   b4986:	f7ff feed 	bl	b4764 <_ZN13Adafruit_MQTT13connectPacketEPh>
  if (!sendPacket(buffer, len))
   b498a:	6823      	ldr	r3, [r4, #0]
   b498c:	b282      	uxth	r2, r0
   b498e:	695b      	ldr	r3, [r3, #20]
   b4990:	4629      	mov	r1, r5
   b4992:	4620      	mov	r0, r4
   b4994:	4798      	blx	r3
   b4996:	2800      	cmp	r0, #0
   b4998:	d03d      	beq.n	b4a16 <_ZN13Adafruit_MQTT7connectEv+0xa8>
  len = readFullPacket(buffer, MAXBUFFERSIZE, CONNECT_TIMEOUT_MS);
   b499a:	f241 7370 	movw	r3, #6000	; 0x1770
   b499e:	2296      	movs	r2, #150	; 0x96
   b49a0:	4629      	mov	r1, r5
   b49a2:	4620      	mov	r0, r4
   b49a4:	f7ff fdbe 	bl	b4524 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (len != 4)
   b49a8:	b2c0      	uxtb	r0, r0
   b49aa:	2804      	cmp	r0, #4
   b49ac:	d133      	bne.n	b4a16 <_ZN13Adafruit_MQTT7connectEv+0xa8>
  if ((buffer[0] != (MQTT_CTRL_CONNECTACK << 4)) || (buffer[1] != 2))
   b49ae:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b49b0:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
   b49b4:	d12f      	bne.n	b4a16 <_ZN13Adafruit_MQTT7connectEv+0xa8>
  if (buffer[3] != 0)
   b49b6:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   b49ba:	b110      	cbz	r0, b49c2 <_ZN13Adafruit_MQTT7connectEv+0x54>
    return buffer[3];
   b49bc:	b240      	sxtb	r0, r0
}
   b49be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b49c2:	f104 07bc 	add.w	r7, r4, #188	; 0xbc
   b49c6:	f104 08d0 	add.w	r8, r4, #208	; 0xd0
    if (subscriptions[i] == 0) continue;
   b49ca:	f857 3b04 	ldr.w	r3, [r7], #4
   b49ce:	b1f3      	cbz	r3, b4a0e <_ZN13Adafruit_MQTT7connectEv+0xa0>
   b49d0:	2603      	movs	r6, #3
      uint8_t len = subscribePacket(buffer, subscriptions[i]->topic, subscriptions[i]->qos);
   b49d2:	f857 2c04 	ldr.w	r2, [r7, #-4]
   b49d6:	4629      	mov	r1, r5
   b49d8:	7913      	ldrb	r3, [r2, #4]
   b49da:	6812      	ldr	r2, [r2, #0]
   b49dc:	4620      	mov	r0, r4
   b49de:	f7ff ffaa 	bl	b4936 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>
      if (!sendPacket(buffer, len))
   b49e2:	6823      	ldr	r3, [r4, #0]
   b49e4:	b282      	uxth	r2, r0
   b49e6:	695b      	ldr	r3, [r3, #20]
   b49e8:	4629      	mov	r1, r5
   b49ea:	4620      	mov	r0, r4
   b49ec:	4798      	blx	r3
   b49ee:	b190      	cbz	r0, b4a16 <_ZN13Adafruit_MQTT7connectEv+0xa8>
      if (processPacketsUntil(buffer, MQTT_CTRL_SUBACK, SUBACK_TIMEOUT_MS)) {
   b49f0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   b49f4:	2209      	movs	r2, #9
   b49f6:	4629      	mov	r1, r5
   b49f8:	4620      	mov	r0, r4
   b49fa:	f7ff fddd 	bl	b45b8 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
   b49fe:	b930      	cbnz	r0, b4a0e <_ZN13Adafruit_MQTT7connectEv+0xa0>
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
   b4a00:	3e01      	subs	r6, #1
   b4a02:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   b4a06:	d1e4      	bne.n	b49d2 <_ZN13Adafruit_MQTT7connectEv+0x64>
    if (! success) return -2; // failed to sub for some reason
   b4a08:	f06f 0001 	mvn.w	r0, #1
   b4a0c:	e7d7      	b.n	b49be <_ZN13Adafruit_MQTT7connectEv+0x50>
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
   b4a0e:	45b8      	cmp	r8, r7
   b4a10:	d1db      	bne.n	b49ca <_ZN13Adafruit_MQTT7connectEv+0x5c>
  return 0;
   b4a12:	2000      	movs	r0, #0
   b4a14:	e7d3      	b.n	b49be <_ZN13Adafruit_MQTT7connectEv+0x50>
    return -1;
   b4a16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4a1a:	e7d0      	b.n	b49be <_ZN13Adafruit_MQTT7connectEv+0x50>

000b4a1c <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   b4a1c:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   b4a1e:	e9c0 1200 	strd	r1, r2, [r0]
  qos = q;
   b4a22:	7203      	strb	r3, [r0, #8]
}
   b4a24:	bd10      	pop	{r4, pc}

000b4a26 <_ZN21Adafruit_MQTT_Publish7publishEi>:

bool Adafruit_MQTT_Publish::publish(int i) {
   b4a26:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b4a28:	4604      	mov	r4, r0
  char payload[12];
  ltoa(i, payload, 10);
   b4a2a:	220a      	movs	r2, #10
bool Adafruit_MQTT_Publish::publish(int i) {
   b4a2c:	4608      	mov	r0, r1
  ltoa(i, payload, 10);
   b4a2e:	a901      	add	r1, sp, #4
   b4a30:	f001 f9b0 	bl	b5d94 <ltoa>
  return mqtt->publish(topic, payload, qos);
   b4a34:	e9d4 0100 	ldrd	r0, r1, [r4]
   b4a38:	7a23      	ldrb	r3, [r4, #8]
   b4a3a:	aa01      	add	r2, sp, #4
   b4a3c:	f7ff ff69 	bl	b4912 <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   b4a40:	b004      	add	sp, #16
   b4a42:	bd10      	pop	{r4, pc}

000b4a44 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>:
}


// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
   b4a44:	b510      	push	{r4, lr}
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
  qos = q;
   b4a46:	7103      	strb	r3, [r0, #4]
  datalen = 0;
   b4a48:	2300      	movs	r3, #0
  callback_uint32t = 0;
  callback_buffer = 0;
  callback_double = 0;
   b4a4a:	e9c0 3308 	strd	r3, r3, [r0, #32]
  callback_io = 0;
   b4a4e:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  mqtt = mqttserver;
   b4a52:	6341      	str	r1, [r0, #52]	; 0x34
  topic = feed;
   b4a54:	6002      	str	r2, [r0, #0]
  datalen = 0;
   b4a56:	8343      	strh	r3, [r0, #26]
  callback_uint32t = 0;
   b4a58:	61c3      	str	r3, [r0, #28]
  io_feed = 0;
   b4a5a:	6303      	str	r3, [r0, #48]	; 0x30
}
   b4a5c:	bd10      	pop	{r4, pc}

000b4a5e <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   b4a5e:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   b4a60:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b4a64:	6803      	ldr	r3, [r0, #0]
   b4a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4a68:	4798      	blx	r3
}
   b4a6a:	3800      	subs	r0, #0
   b4a6c:	bf18      	it	ne
   b4a6e:	2001      	movne	r0, #1
   b4a70:	bd08      	pop	{r3, pc}

000b4a72 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   b4a72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4a74:	4606      	mov	r6, r0
   b4a76:	460f      	mov	r7, r1
   b4a78:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   b4a7a:	b1c4      	cbz	r4, b4aae <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   b4a7c:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b4a80:	6803      	ldr	r3, [r0, #0]
   b4a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4a84:	4798      	blx	r3
   b4a86:	b908      	cbnz	r0, b4a8c <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   b4a88:	2000      	movs	r0, #0
    }
  }
  return true;
}
   b4a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ret = client->write(buffer, sendlen);
   b4a8c:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   b4a90:	2cfa      	cmp	r4, #250	; 0xfa
   b4a92:	6803      	ldr	r3, [r0, #0]
   b4a94:	4625      	mov	r5, r4
   b4a96:	bfa8      	it	ge
   b4a98:	25fa      	movge	r5, #250	; 0xfa
   b4a9a:	68db      	ldr	r3, [r3, #12]
   b4a9c:	462a      	mov	r2, r5
   b4a9e:	4639      	mov	r1, r7
   b4aa0:	4798      	blx	r3
   b4aa2:	b283      	uxth	r3, r0
      len -= ret;
   b4aa4:	1ae4      	subs	r4, r4, r3
      if (ret != sendlen) {
   b4aa6:	429d      	cmp	r5, r3
      len -= ret;
   b4aa8:	b2a4      	uxth	r4, r4
      if (ret != sendlen) {
   b4aaa:	d0e6      	beq.n	b4a7a <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   b4aac:	e7ec      	b.n	b4a88 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
  return true;
   b4aae:	2001      	movs	r0, #1
   b4ab0:	e7eb      	b.n	b4a8a <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x18>

000b4ab2 <_ZN19Adafruit_MQTT_SPARKD1Ev>:
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   b4ab2:	4770      	bx	lr

000b4ab4 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
                                          int16_t timeout) {
   b4ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4ab8:	4606      	mov	r6, r0
   b4aba:	4688      	mov	r8, r1
   b4abc:	4691      	mov	r9, r2
   b4abe:	461f      	mov	r7, r3
   b4ac0:	461d      	mov	r5, r3
  uint16_t len = 0;
   b4ac2:	2400      	movs	r4, #0
  while (client->connected() && (timeout >= 0)) {
   b4ac4:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b4ac8:	6803      	ldr	r3, [r0, #0]
   b4aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4acc:	4798      	blx	r3
   b4ace:	b1d0      	cbz	r0, b4b06 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   b4ad0:	2d00      	cmp	r5, #0
   b4ad2:	db18      	blt.n	b4b06 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    while (client->available()) {
   b4ad4:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b4ad8:	6803      	ldr	r3, [r0, #0]
   b4ada:	691b      	ldr	r3, [r3, #16]
   b4adc:	4798      	blx	r3
   b4ade:	b160      	cbz	r0, b4afa <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      char c = client->read();
   b4ae0:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b4ae4:	6803      	ldr	r3, [r0, #0]
   b4ae6:	695b      	ldr	r3, [r3, #20]
   b4ae8:	4798      	blx	r3
   b4aea:	f808 0004 	strb.w	r0, [r8, r4]
      len++;
   b4aee:	3401      	adds	r4, #1
   b4af0:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   b4af2:	454c      	cmp	r4, r9
   b4af4:	d007      	beq.n	b4b06 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
      timeout = t;  // reset the timeout
   b4af6:	463d      	mov	r5, r7
   b4af8:	e7ec      	b.n	b4ad4 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   b4afa:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   b4afc:	200a      	movs	r0, #10
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   b4afe:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   b4b00:	f000 fab4 	bl	b506c <delay>
  while (client->connected() && (timeout >= 0)) {
   b4b04:	e7de      	b.n	b4ac4 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
}
   b4b06:	4620      	mov	r0, r4
   b4b08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b4b0c <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
bool Adafruit_MQTT_SPARK::connectServer(){
   b4b0c:	b570      	push	{r4, r5, r6, lr}
   b4b0e:	4604      	mov	r4, r0
  memset(buffer, 0, sizeof(buffer));
   b4b10:	f100 0522 	add.w	r5, r0, #34	; 0x22
   b4b14:	2296      	movs	r2, #150	; 0x96
   b4b16:	2100      	movs	r1, #0
   b4b18:	4628      	mov	r0, r5
   b4b1a:	f002 f952 	bl	b6dc2 <memset>
  strcpy((char *)buffer, servername);
   b4b1e:	6861      	ldr	r1, [r4, #4]
   b4b20:	4628      	mov	r0, r5
   b4b22:	f002 f98f 	bl	b6e44 <strcpy>
  int r = client->connect((char *)buffer, portnum);
   b4b26:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   b4b2a:	8922      	ldrh	r2, [r4, #8]
   b4b2c:	6803      	ldr	r3, [r0, #0]
   b4b2e:	4629      	mov	r1, r5
   b4b30:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   b4b32:	2300      	movs	r3, #0
   b4b34:	47b0      	blx	r6
}
   b4b36:	3800      	subs	r0, #0
   b4b38:	bf18      	it	ne
   b4b3a:	2001      	movne	r0, #1
   b4b3c:	bd70      	pop	{r4, r5, r6, pc}

000b4b3e <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   b4b3e:	b510      	push	{r4, lr}
   b4b40:	21d4      	movs	r1, #212	; 0xd4
   b4b42:	4604      	mov	r4, r0
   b4b44:	f7ff faab 	bl	b409e <_ZdlPvj>
   b4b48:	4620      	mov	r0, r4
   b4b4a:	bd10      	pop	{r4, pc}

000b4b4c <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:
bool Adafruit_MQTT_SPARK::disconnectServer() {
   b4b4c:	b510      	push	{r4, lr}
   b4b4e:	4604      	mov	r4, r0
  if (client->connected()) {
   b4b50:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b4b54:	6803      	ldr	r3, [r0, #0]
   b4b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4b58:	4798      	blx	r3
   b4b5a:	b120      	cbz	r0, b4b66 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   b4b5c:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   b4b60:	6803      	ldr	r3, [r0, #0]
   b4b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4b64:	4798      	blx	r3
}
   b4b66:	2001      	movs	r0, #1
   b4b68:	bd10      	pop	{r4, pc}

000b4b6a <_ZN19Adafruit_MQTT_SPARK6UpdateEv>:
{
   b4b6a:	b570      	push	{r4, r5, r6, lr}
    if (!connected())
   b4b6c:	6803      	ldr	r3, [r0, #0]
   b4b6e:	689b      	ldr	r3, [r3, #8]
{
   b4b70:	4604      	mov	r4, r0
    if (!connected())
   b4b72:	4798      	blx	r3
   b4b74:	b9c8      	cbnz	r0, b4baa <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x40>
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   b4b76:	4620      	mov	r0, r4
   b4b78:	f7ff fef9 	bl	b496e <_ZN13Adafruit_MQTT7connectEv>
   b4b7c:	2504      	movs	r5, #4
   b4b7e:	b170      	cbz	r0, b4b9e <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
   b4b80:	3d01      	subs	r5, #1
   b4b82:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b4b86:	d00a      	beq.n	b4b9e <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
            disconnect();
   b4b88:	4620      	mov	r0, r4
   b4b8a:	f7ff fd41 	bl	b4610 <_ZN13Adafruit_MQTT10disconnectEv>
            delay(5000);  // wait 5 seconds
   b4b8e:	f241 3088 	movw	r0, #5000	; 0x1388
   b4b92:	f000 fa6b 	bl	b506c <delay>
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   b4b96:	4620      	mov	r0, r4
   b4b98:	f7ff fee9 	bl	b496e <_ZN13Adafruit_MQTT7connectEv>
   b4b9c:	e7ef      	b.n	b4b7e <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x14>
        if( connected() )
   b4b9e:	6823      	ldr	r3, [r4, #0]
   b4ba0:	4620      	mov	r0, r4
   b4ba2:	689b      	ldr	r3, [r3, #8]
}
   b4ba4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if( connected() )
   b4ba8:	4718      	bx	r3
}
   b4baa:	bd70      	pop	{r4, r5, r6, pc}

000b4bac <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4bac:	b508      	push	{r3, lr}
   b4bae:	4b02      	ldr	r3, [pc, #8]	; (b4bb8 <os_mutex_recursive_create+0xc>)
   b4bb0:	681b      	ldr	r3, [r3, #0]
   b4bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4bb4:	9301      	str	r3, [sp, #4]
   b4bb6:	bd08      	pop	{r3, pc}
   b4bb8:	00030248 	.word	0x00030248

000b4bbc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4bbc:	b508      	push	{r3, lr}
   b4bbe:	4b02      	ldr	r3, [pc, #8]	; (b4bc8 <HAL_RNG_GetRandomNumber+0xc>)
   b4bc0:	681b      	ldr	r3, [r3, #0]
   b4bc2:	685b      	ldr	r3, [r3, #4]
   b4bc4:	9301      	str	r3, [sp, #4]
   b4bc6:	bd08      	pop	{r3, pc}
   b4bc8:	00030218 	.word	0x00030218

000b4bcc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4bcc:	b508      	push	{r3, lr}
   b4bce:	4b02      	ldr	r3, [pc, #8]	; (b4bd8 <HAL_Delay_Microseconds+0xc>)
   b4bd0:	681b      	ldr	r3, [r3, #0]
   b4bd2:	68db      	ldr	r3, [r3, #12]
   b4bd4:	9301      	str	r3, [sp, #4]
   b4bd6:	bd08      	pop	{r3, pc}
   b4bd8:	00030218 	.word	0x00030218

000b4bdc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4bdc:	b508      	push	{r3, lr}
   b4bde:	4b02      	ldr	r3, [pc, #8]	; (b4be8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4be0:	681b      	ldr	r3, [r3, #0]
   b4be2:	695b      	ldr	r3, [r3, #20]
   b4be4:	9301      	str	r3, [sp, #4]
   b4be6:	bd08      	pop	{r3, pc}
   b4be8:	00030218 	.word	0x00030218

000b4bec <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b4bec:	b508      	push	{r3, lr}
   b4bee:	4b02      	ldr	r3, [pc, #8]	; (b4bf8 <HAL_Validate_Pin_Function+0xc>)
   b4bf0:	681b      	ldr	r3, [r3, #0]
   b4bf2:	685b      	ldr	r3, [r3, #4]
   b4bf4:	9301      	str	r3, [sp, #4]
   b4bf6:	bd08      	pop	{r3, pc}
   b4bf8:	0003022c 	.word	0x0003022c

000b4bfc <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4bfc:	b508      	push	{r3, lr}
   b4bfe:	4b02      	ldr	r3, [pc, #8]	; (b4c08 <HAL_Pin_Mode+0xc>)
   b4c00:	681b      	ldr	r3, [r3, #0]
   b4c02:	689b      	ldr	r3, [r3, #8]
   b4c04:	9301      	str	r3, [sp, #4]
   b4c06:	bd08      	pop	{r3, pc}
   b4c08:	0003022c 	.word	0x0003022c

000b4c0c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4c0c:	b508      	push	{r3, lr}
   b4c0e:	4b02      	ldr	r3, [pc, #8]	; (b4c18 <HAL_Get_Pin_Mode+0xc>)
   b4c10:	681b      	ldr	r3, [r3, #0]
   b4c12:	68db      	ldr	r3, [r3, #12]
   b4c14:	9301      	str	r3, [sp, #4]
   b4c16:	bd08      	pop	{r3, pc}
   b4c18:	0003022c 	.word	0x0003022c

000b4c1c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4c1c:	b508      	push	{r3, lr}
   b4c1e:	4b02      	ldr	r3, [pc, #8]	; (b4c28 <HAL_GPIO_Write+0xc>)
   b4c20:	681b      	ldr	r3, [r3, #0]
   b4c22:	691b      	ldr	r3, [r3, #16]
   b4c24:	9301      	str	r3, [sp, #4]
   b4c26:	bd08      	pop	{r3, pc}
   b4c28:	0003022c 	.word	0x0003022c

000b4c2c <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   b4c2c:	b508      	push	{r3, lr}
   b4c2e:	4b02      	ldr	r3, [pc, #8]	; (b4c38 <HAL_DAC_Write+0xc>)
   b4c30:	681b      	ldr	r3, [r3, #0]
   b4c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4c34:	9301      	str	r3, [sp, #4]
   b4c36:	bd08      	pop	{r3, pc}
   b4c38:	0003022c 	.word	0x0003022c

000b4c3c <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b4c3c:	b508      	push	{r3, lr}
   b4c3e:	4b02      	ldr	r3, [pc, #8]	; (b4c48 <hal_adc_read+0xc>)
   b4c40:	681b      	ldr	r3, [r3, #0]
   b4c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4c44:	9301      	str	r3, [sp, #4]
   b4c46:	bd08      	pop	{r3, pc}
   b4c48:	0003022c 	.word	0x0003022c

000b4c4c <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   b4c4c:	b508      	push	{r3, lr}
   b4c4e:	4b02      	ldr	r3, [pc, #8]	; (b4c58 <HAL_Pulse_In+0xc>)
   b4c50:	681b      	ldr	r3, [r3, #0]
   b4c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4c54:	9301      	str	r3, [sp, #4]
   b4c56:	bd08      	pop	{r3, pc}
   b4c58:	0003022c 	.word	0x0003022c

000b4c5c <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   b4c5c:	b508      	push	{r3, lr}
   b4c5e:	4b02      	ldr	r3, [pc, #8]	; (b4c68 <hal_pwm_write_ext+0xc>)
   b4c60:	681b      	ldr	r3, [r3, #0]
   b4c62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b4c64:	9301      	str	r3, [sp, #4]
   b4c66:	bd08      	pop	{r3, pc}
   b4c68:	0003022c 	.word	0x0003022c

000b4c6c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4c6c:	b508      	push	{r3, lr}
   b4c6e:	4b02      	ldr	r3, [pc, #8]	; (b4c78 <hal_i2c_write+0xc>)
   b4c70:	681b      	ldr	r3, [r3, #0]
   b4c72:	6a1b      	ldr	r3, [r3, #32]
   b4c74:	9301      	str	r3, [sp, #4]
   b4c76:	bd08      	pop	{r3, pc}
   b4c78:	00030228 	.word	0x00030228

000b4c7c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4c7c:	b508      	push	{r3, lr}
   b4c7e:	4b02      	ldr	r3, [pc, #8]	; (b4c88 <hal_i2c_available+0xc>)
   b4c80:	681b      	ldr	r3, [r3, #0]
   b4c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4c84:	9301      	str	r3, [sp, #4]
   b4c86:	bd08      	pop	{r3, pc}
   b4c88:	00030228 	.word	0x00030228

000b4c8c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4c8c:	b508      	push	{r3, lr}
   b4c8e:	4b02      	ldr	r3, [pc, #8]	; (b4c98 <hal_i2c_read+0xc>)
   b4c90:	681b      	ldr	r3, [r3, #0]
   b4c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4c94:	9301      	str	r3, [sp, #4]
   b4c96:	bd08      	pop	{r3, pc}
   b4c98:	00030228 	.word	0x00030228

000b4c9c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4c9c:	b508      	push	{r3, lr}
   b4c9e:	4b02      	ldr	r3, [pc, #8]	; (b4ca8 <hal_i2c_peek+0xc>)
   b4ca0:	681b      	ldr	r3, [r3, #0]
   b4ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4ca4:	9301      	str	r3, [sp, #4]
   b4ca6:	bd08      	pop	{r3, pc}
   b4ca8:	00030228 	.word	0x00030228

000b4cac <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4cac:	b508      	push	{r3, lr}
   b4cae:	4b02      	ldr	r3, [pc, #8]	; (b4cb8 <hal_i2c_flush+0xc>)
   b4cb0:	681b      	ldr	r3, [r3, #0]
   b4cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4cb4:	9301      	str	r3, [sp, #4]
   b4cb6:	bd08      	pop	{r3, pc}
   b4cb8:	00030228 	.word	0x00030228

000b4cbc <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4cbc:	b508      	push	{r3, lr}
   b4cbe:	4b02      	ldr	r3, [pc, #8]	; (b4cc8 <hal_i2c_is_enabled+0xc>)
   b4cc0:	681b      	ldr	r3, [r3, #0]
   b4cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4cc4:	9301      	str	r3, [sp, #4]
   b4cc6:	bd08      	pop	{r3, pc}
   b4cc8:	00030228 	.word	0x00030228

000b4ccc <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4ccc:	b508      	push	{r3, lr}
   b4cce:	4b02      	ldr	r3, [pc, #8]	; (b4cd8 <hal_i2c_init+0xc>)
   b4cd0:	681b      	ldr	r3, [r3, #0]
   b4cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4cd4:	9301      	str	r3, [sp, #4]
   b4cd6:	bd08      	pop	{r3, pc}
   b4cd8:	00030228 	.word	0x00030228

000b4cdc <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b4cdc:	b508      	push	{r3, lr}
   b4cde:	4b02      	ldr	r3, [pc, #8]	; (b4ce8 <if_index_to_name+0xc>)
   b4ce0:	681b      	ldr	r3, [r3, #0]
   b4ce2:	695b      	ldr	r3, [r3, #20]
   b4ce4:	9301      	str	r3, [sp, #4]
   b4ce6:	bd08      	pop	{r3, pc}
   b4ce8:	0003026c 	.word	0x0003026c

000b4cec <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4cec:	b508      	push	{r3, lr}
   b4cee:	4b02      	ldr	r3, [pc, #8]	; (b4cf8 <inet_inet_ntop+0xc>)
   b4cf0:	681b      	ldr	r3, [r3, #0]
   b4cf2:	695b      	ldr	r3, [r3, #20]
   b4cf4:	9301      	str	r3, [sp, #4]
   b4cf6:	bd08      	pop	{r3, pc}
   b4cf8:	00030264 	.word	0x00030264

000b4cfc <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b4cfc:	b508      	push	{r3, lr}
   b4cfe:	4b02      	ldr	r3, [pc, #8]	; (b4d08 <inet_htonl+0xc>)
   b4d00:	681b      	ldr	r3, [r3, #0]
   b4d02:	6a1b      	ldr	r3, [r3, #32]
   b4d04:	9301      	str	r3, [sp, #4]
   b4d06:	bd08      	pop	{r3, pc}
   b4d08:	00030264 	.word	0x00030264

000b4d0c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b4d0c:	b508      	push	{r3, lr}
   b4d0e:	4b02      	ldr	r3, [pc, #8]	; (b4d18 <inet_htons+0xc>)
   b4d10:	681b      	ldr	r3, [r3, #0]
   b4d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4d14:	9301      	str	r3, [sp, #4]
   b4d16:	bd08      	pop	{r3, pc}
   b4d18:	00030264 	.word	0x00030264

000b4d1c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4d1c:	b508      	push	{r3, lr}
   b4d1e:	4b02      	ldr	r3, [pc, #8]	; (b4d28 <netdb_freeaddrinfo+0xc>)
   b4d20:	681b      	ldr	r3, [r3, #0]
   b4d22:	689b      	ldr	r3, [r3, #8]
   b4d24:	9301      	str	r3, [sp, #4]
   b4d26:	bd08      	pop	{r3, pc}
   b4d28:	00030268 	.word	0x00030268

000b4d2c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4d2c:	b508      	push	{r3, lr}
   b4d2e:	4b02      	ldr	r3, [pc, #8]	; (b4d38 <netdb_getaddrinfo+0xc>)
   b4d30:	681b      	ldr	r3, [r3, #0]
   b4d32:	68db      	ldr	r3, [r3, #12]
   b4d34:	9301      	str	r3, [sp, #4]
   b4d36:	bd08      	pop	{r3, pc}
   b4d38:	00030268 	.word	0x00030268

000b4d3c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b4d3c:	b508      	push	{r3, lr}
   b4d3e:	4b02      	ldr	r3, [pc, #8]	; (b4d48 <sock_setsockopt+0xc>)
   b4d40:	681b      	ldr	r3, [r3, #0]
   b4d42:	699b      	ldr	r3, [r3, #24]
   b4d44:	9301      	str	r3, [sp, #4]
   b4d46:	bd08      	pop	{r3, pc}
   b4d48:	00030238 	.word	0x00030238

000b4d4c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b4d4c:	b508      	push	{r3, lr}
   b4d4e:	4b02      	ldr	r3, [pc, #8]	; (b4d58 <sock_close+0xc>)
   b4d50:	681b      	ldr	r3, [r3, #0]
   b4d52:	69db      	ldr	r3, [r3, #28]
   b4d54:	9301      	str	r3, [sp, #4]
   b4d56:	bd08      	pop	{r3, pc}
   b4d58:	00030238 	.word	0x00030238

000b4d5c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b4d5c:	b508      	push	{r3, lr}
   b4d5e:	4b02      	ldr	r3, [pc, #8]	; (b4d68 <sock_connect+0xc>)
   b4d60:	681b      	ldr	r3, [r3, #0]
   b4d62:	6a1b      	ldr	r3, [r3, #32]
   b4d64:	9301      	str	r3, [sp, #4]
   b4d66:	bd08      	pop	{r3, pc}
   b4d68:	00030238 	.word	0x00030238

000b4d6c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b4d6c:	b508      	push	{r3, lr}
   b4d6e:	4b02      	ldr	r3, [pc, #8]	; (b4d78 <sock_recv+0xc>)
   b4d70:	681b      	ldr	r3, [r3, #0]
   b4d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4d74:	9301      	str	r3, [sp, #4]
   b4d76:	bd08      	pop	{r3, pc}
   b4d78:	00030238 	.word	0x00030238

000b4d7c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b4d7c:	b508      	push	{r3, lr}
   b4d7e:	4b02      	ldr	r3, [pc, #8]	; (b4d88 <sock_send+0xc>)
   b4d80:	681b      	ldr	r3, [r3, #0]
   b4d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4d84:	9301      	str	r3, [sp, #4]
   b4d86:	bd08      	pop	{r3, pc}
   b4d88:	00030238 	.word	0x00030238

000b4d8c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b4d8c:	b508      	push	{r3, lr}
   b4d8e:	4b02      	ldr	r3, [pc, #8]	; (b4d98 <sock_socket+0xc>)
   b4d90:	681b      	ldr	r3, [r3, #0]
   b4d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b4d94:	9301      	str	r3, [sp, #4]
   b4d96:	bd08      	pop	{r3, pc}
   b4d98:	00030238 	.word	0x00030238

000b4d9c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4d9c:	b508      	push	{r3, lr}
   b4d9e:	4b02      	ldr	r3, [pc, #8]	; (b4da8 <hal_spi_init+0xc>)
   b4da0:	681b      	ldr	r3, [r3, #0]
   b4da2:	69db      	ldr	r3, [r3, #28]
   b4da4:	9301      	str	r3, [sp, #4]
   b4da6:	bd08      	pop	{r3, pc}
   b4da8:	00030230 	.word	0x00030230

000b4dac <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4dac:	b508      	push	{r3, lr}
   b4dae:	4b02      	ldr	r3, [pc, #8]	; (b4db8 <hal_spi_is_enabled+0xc>)
   b4db0:	681b      	ldr	r3, [r3, #0]
   b4db2:	6a1b      	ldr	r3, [r3, #32]
   b4db4:	9301      	str	r3, [sp, #4]
   b4db6:	bd08      	pop	{r3, pc}
   b4db8:	00030230 	.word	0x00030230

000b4dbc <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4dbc:	b508      	push	{r3, lr}
   b4dbe:	4b02      	ldr	r3, [pc, #8]	; (b4dc8 <hal_usart_write+0xc>)
   b4dc0:	681b      	ldr	r3, [r3, #0]
   b4dc2:	68db      	ldr	r3, [r3, #12]
   b4dc4:	9301      	str	r3, [sp, #4]
   b4dc6:	bd08      	pop	{r3, pc}
   b4dc8:	0003023c 	.word	0x0003023c

000b4dcc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4dcc:	b508      	push	{r3, lr}
   b4dce:	4b02      	ldr	r3, [pc, #8]	; (b4dd8 <hal_usart_available+0xc>)
   b4dd0:	681b      	ldr	r3, [r3, #0]
   b4dd2:	691b      	ldr	r3, [r3, #16]
   b4dd4:	9301      	str	r3, [sp, #4]
   b4dd6:	bd08      	pop	{r3, pc}
   b4dd8:	0003023c 	.word	0x0003023c

000b4ddc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4ddc:	b508      	push	{r3, lr}
   b4dde:	4b02      	ldr	r3, [pc, #8]	; (b4de8 <hal_usart_read+0xc>)
   b4de0:	681b      	ldr	r3, [r3, #0]
   b4de2:	695b      	ldr	r3, [r3, #20]
   b4de4:	9301      	str	r3, [sp, #4]
   b4de6:	bd08      	pop	{r3, pc}
   b4de8:	0003023c 	.word	0x0003023c

000b4dec <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4dec:	b508      	push	{r3, lr}
   b4dee:	4b02      	ldr	r3, [pc, #8]	; (b4df8 <hal_usart_peek+0xc>)
   b4df0:	681b      	ldr	r3, [r3, #0]
   b4df2:	699b      	ldr	r3, [r3, #24]
   b4df4:	9301      	str	r3, [sp, #4]
   b4df6:	bd08      	pop	{r3, pc}
   b4df8:	0003023c 	.word	0x0003023c

000b4dfc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4dfc:	b508      	push	{r3, lr}
   b4dfe:	4b02      	ldr	r3, [pc, #8]	; (b4e08 <hal_usart_flush+0xc>)
   b4e00:	681b      	ldr	r3, [r3, #0]
   b4e02:	69db      	ldr	r3, [r3, #28]
   b4e04:	9301      	str	r3, [sp, #4]
   b4e06:	bd08      	pop	{r3, pc}
   b4e08:	0003023c 	.word	0x0003023c

000b4e0c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4e0c:	b508      	push	{r3, lr}
   b4e0e:	4b02      	ldr	r3, [pc, #8]	; (b4e18 <hal_usart_is_enabled+0xc>)
   b4e10:	681b      	ldr	r3, [r3, #0]
   b4e12:	6a1b      	ldr	r3, [r3, #32]
   b4e14:	9301      	str	r3, [sp, #4]
   b4e16:	bd08      	pop	{r3, pc}
   b4e18:	0003023c 	.word	0x0003023c

000b4e1c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4e1c:	b508      	push	{r3, lr}
   b4e1e:	4b02      	ldr	r3, [pc, #8]	; (b4e28 <hal_usart_available_data_for_write+0xc>)
   b4e20:	681b      	ldr	r3, [r3, #0]
   b4e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4e24:	9301      	str	r3, [sp, #4]
   b4e26:	bd08      	pop	{r3, pc}
   b4e28:	0003023c 	.word	0x0003023c

000b4e2c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4e2c:	b508      	push	{r3, lr}
   b4e2e:	4b02      	ldr	r3, [pc, #8]	; (b4e38 <hal_usart_init_ex+0xc>)
   b4e30:	681b      	ldr	r3, [r3, #0]
   b4e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4e34:	9301      	str	r3, [sp, #4]
   b4e36:	bd08      	pop	{r3, pc}
   b4e38:	0003023c 	.word	0x0003023c

000b4e3c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4e3c:	b508      	push	{r3, lr}
   b4e3e:	4b02      	ldr	r3, [pc, #8]	; (b4e48 <HAL_USB_USART_Init+0xc>)
   b4e40:	681b      	ldr	r3, [r3, #0]
   b4e42:	681b      	ldr	r3, [r3, #0]
   b4e44:	9301      	str	r3, [sp, #4]
   b4e46:	bd08      	pop	{r3, pc}
   b4e48:	0003024c 	.word	0x0003024c

000b4e4c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4e4c:	b508      	push	{r3, lr}
   b4e4e:	4b02      	ldr	r3, [pc, #8]	; (b4e58 <HAL_USB_USART_Begin+0xc>)
   b4e50:	681b      	ldr	r3, [r3, #0]
   b4e52:	685b      	ldr	r3, [r3, #4]
   b4e54:	9301      	str	r3, [sp, #4]
   b4e56:	bd08      	pop	{r3, pc}
   b4e58:	0003024c 	.word	0x0003024c

000b4e5c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4e5c:	b508      	push	{r3, lr}
   b4e5e:	4b02      	ldr	r3, [pc, #8]	; (b4e68 <HAL_USB_USART_Available_Data+0xc>)
   b4e60:	681b      	ldr	r3, [r3, #0]
   b4e62:	691b      	ldr	r3, [r3, #16]
   b4e64:	9301      	str	r3, [sp, #4]
   b4e66:	bd08      	pop	{r3, pc}
   b4e68:	0003024c 	.word	0x0003024c

000b4e6c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4e6c:	b508      	push	{r3, lr}
   b4e6e:	4b02      	ldr	r3, [pc, #8]	; (b4e78 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4e70:	681b      	ldr	r3, [r3, #0]
   b4e72:	695b      	ldr	r3, [r3, #20]
   b4e74:	9301      	str	r3, [sp, #4]
   b4e76:	bd08      	pop	{r3, pc}
   b4e78:	0003024c 	.word	0x0003024c

000b4e7c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4e7c:	b508      	push	{r3, lr}
   b4e7e:	4b02      	ldr	r3, [pc, #8]	; (b4e88 <HAL_USB_USART_Receive_Data+0xc>)
   b4e80:	681b      	ldr	r3, [r3, #0]
   b4e82:	699b      	ldr	r3, [r3, #24]
   b4e84:	9301      	str	r3, [sp, #4]
   b4e86:	bd08      	pop	{r3, pc}
   b4e88:	0003024c 	.word	0x0003024c

000b4e8c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4e8c:	b508      	push	{r3, lr}
   b4e8e:	4b02      	ldr	r3, [pc, #8]	; (b4e98 <HAL_USB_USART_Send_Data+0xc>)
   b4e90:	681b      	ldr	r3, [r3, #0]
   b4e92:	69db      	ldr	r3, [r3, #28]
   b4e94:	9301      	str	r3, [sp, #4]
   b4e96:	bd08      	pop	{r3, pc}
   b4e98:	0003024c 	.word	0x0003024c

000b4e9c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4e9c:	b508      	push	{r3, lr}
   b4e9e:	4b02      	ldr	r3, [pc, #8]	; (b4ea8 <HAL_USB_USART_Flush_Data+0xc>)
   b4ea0:	681b      	ldr	r3, [r3, #0]
   b4ea2:	6a1b      	ldr	r3, [r3, #32]
   b4ea4:	9301      	str	r3, [sp, #4]
   b4ea6:	bd08      	pop	{r3, pc}
   b4ea8:	0003024c 	.word	0x0003024c

000b4eac <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b4eac:	b508      	push	{r3, lr}
   b4eae:	4b02      	ldr	r3, [pc, #8]	; (b4eb8 <panic_+0xc>)
   b4eb0:	681b      	ldr	r3, [r3, #0]
   b4eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4eb4:	9301      	str	r3, [sp, #4]
   b4eb6:	bd08      	pop	{r3, pc}
   b4eb8:	00030260 	.word	0x00030260

000b4ebc <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b4ebc:	b508      	push	{r3, lr}
   b4ebe:	4b02      	ldr	r3, [pc, #8]	; (b4ec8 <log_message+0xc>)
   b4ec0:	681b      	ldr	r3, [r3, #0]
   b4ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4ec4:	9301      	str	r3, [sp, #4]
   b4ec6:	bd08      	pop	{r3, pc}
   b4ec8:	00030260 	.word	0x00030260

000b4ecc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4ecc:	b508      	push	{r3, lr}
   b4ece:	4b02      	ldr	r3, [pc, #8]	; (b4ed8 <set_system_mode+0xc>)
   b4ed0:	681b      	ldr	r3, [r3, #0]
   b4ed2:	685b      	ldr	r3, [r3, #4]
   b4ed4:	9301      	str	r3, [sp, #4]
   b4ed6:	bd08      	pop	{r3, pc}
   b4ed8:	00030220 	.word	0x00030220

000b4edc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4edc:	b508      	push	{r3, lr}
   b4ede:	4b02      	ldr	r3, [pc, #8]	; (b4ee8 <system_delay_ms+0xc>)
   b4ee0:	681b      	ldr	r3, [r3, #0]
   b4ee2:	695b      	ldr	r3, [r3, #20]
   b4ee4:	9301      	str	r3, [sp, #4]
   b4ee6:	bd08      	pop	{r3, pc}
   b4ee8:	00030220 	.word	0x00030220

000b4eec <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4eec:	b508      	push	{r3, lr}
   b4eee:	4b03      	ldr	r3, [pc, #12]	; (b4efc <system_ctrl_set_app_request_handler+0x10>)
   b4ef0:	681b      	ldr	r3, [r3, #0]
   b4ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4ef6:	9301      	str	r3, [sp, #4]
   b4ef8:	bd08      	pop	{r3, pc}
   b4efa:	0000      	.short	0x0000
   b4efc:	00030220 	.word	0x00030220

000b4f00 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4f00:	b508      	push	{r3, lr}
   b4f02:	4b03      	ldr	r3, [pc, #12]	; (b4f10 <system_ctrl_set_result+0x10>)
   b4f04:	681b      	ldr	r3, [r3, #0]
   b4f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4f0a:	9301      	str	r3, [sp, #4]
   b4f0c:	bd08      	pop	{r3, pc}
   b4f0e:	0000      	.short	0x0000
   b4f10:	00030220 	.word	0x00030220

000b4f14 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4f14:	b508      	push	{r3, lr}
   b4f16:	4b02      	ldr	r3, [pc, #8]	; (b4f20 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4f18:	681b      	ldr	r3, [r3, #0]
   b4f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4f1c:	9301      	str	r3, [sp, #4]
   b4f1e:	bd08      	pop	{r3, pc}
   b4f20:	00030244 	.word	0x00030244

000b4f24 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4f24:	b508      	push	{r3, lr}
   b4f26:	4b02      	ldr	r3, [pc, #8]	; (b4f30 <network_connect+0xc>)
   b4f28:	681b      	ldr	r3, [r3, #0]
   b4f2a:	685b      	ldr	r3, [r3, #4]
   b4f2c:	9301      	str	r3, [sp, #4]
   b4f2e:	bd08      	pop	{r3, pc}
   b4f30:	00030240 	.word	0x00030240

000b4f34 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4f34:	b508      	push	{r3, lr}
   b4f36:	4b02      	ldr	r3, [pc, #8]	; (b4f40 <network_connecting+0xc>)
   b4f38:	681b      	ldr	r3, [r3, #0]
   b4f3a:	689b      	ldr	r3, [r3, #8]
   b4f3c:	9301      	str	r3, [sp, #4]
   b4f3e:	bd08      	pop	{r3, pc}
   b4f40:	00030240 	.word	0x00030240

000b4f44 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4f44:	b508      	push	{r3, lr}
   b4f46:	4b02      	ldr	r3, [pc, #8]	; (b4f50 <network_disconnect+0xc>)
   b4f48:	681b      	ldr	r3, [r3, #0]
   b4f4a:	68db      	ldr	r3, [r3, #12]
   b4f4c:	9301      	str	r3, [sp, #4]
   b4f4e:	bd08      	pop	{r3, pc}
   b4f50:	00030240 	.word	0x00030240

000b4f54 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4f54:	b508      	push	{r3, lr}
   b4f56:	4b02      	ldr	r3, [pc, #8]	; (b4f60 <network_ready+0xc>)
   b4f58:	681b      	ldr	r3, [r3, #0]
   b4f5a:	691b      	ldr	r3, [r3, #16]
   b4f5c:	9301      	str	r3, [sp, #4]
   b4f5e:	bd08      	pop	{r3, pc}
   b4f60:	00030240 	.word	0x00030240

000b4f64 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4f64:	b508      	push	{r3, lr}
   b4f66:	4b02      	ldr	r3, [pc, #8]	; (b4f70 <network_on+0xc>)
   b4f68:	681b      	ldr	r3, [r3, #0]
   b4f6a:	695b      	ldr	r3, [r3, #20]
   b4f6c:	9301      	str	r3, [sp, #4]
   b4f6e:	bd08      	pop	{r3, pc}
   b4f70:	00030240 	.word	0x00030240

000b4f74 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4f74:	b508      	push	{r3, lr}
   b4f76:	4b02      	ldr	r3, [pc, #8]	; (b4f80 <network_off+0xc>)
   b4f78:	681b      	ldr	r3, [r3, #0]
   b4f7a:	699b      	ldr	r3, [r3, #24]
   b4f7c:	9301      	str	r3, [sp, #4]
   b4f7e:	bd08      	pop	{r3, pc}
   b4f80:	00030240 	.word	0x00030240

000b4f84 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4f84:	b508      	push	{r3, lr}
   b4f86:	4b02      	ldr	r3, [pc, #8]	; (b4f90 <network_listen+0xc>)
   b4f88:	681b      	ldr	r3, [r3, #0]
   b4f8a:	69db      	ldr	r3, [r3, #28]
   b4f8c:	9301      	str	r3, [sp, #4]
   b4f8e:	bd08      	pop	{r3, pc}
   b4f90:	00030240 	.word	0x00030240

000b4f94 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4f94:	b508      	push	{r3, lr}
   b4f96:	4b02      	ldr	r3, [pc, #8]	; (b4fa0 <network_listening+0xc>)
   b4f98:	681b      	ldr	r3, [r3, #0]
   b4f9a:	6a1b      	ldr	r3, [r3, #32]
   b4f9c:	9301      	str	r3, [sp, #4]
   b4f9e:	bd08      	pop	{r3, pc}
   b4fa0:	00030240 	.word	0x00030240

000b4fa4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4fa4:	b508      	push	{r3, lr}
   b4fa6:	4b02      	ldr	r3, [pc, #8]	; (b4fb0 <network_set_listen_timeout+0xc>)
   b4fa8:	681b      	ldr	r3, [r3, #0]
   b4faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4fac:	9301      	str	r3, [sp, #4]
   b4fae:	bd08      	pop	{r3, pc}
   b4fb0:	00030240 	.word	0x00030240

000b4fb4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4fb4:	b508      	push	{r3, lr}
   b4fb6:	4b02      	ldr	r3, [pc, #8]	; (b4fc0 <network_get_listen_timeout+0xc>)
   b4fb8:	681b      	ldr	r3, [r3, #0]
   b4fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4fbc:	9301      	str	r3, [sp, #4]
   b4fbe:	bd08      	pop	{r3, pc}
   b4fc0:	00030240 	.word	0x00030240

000b4fc4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4fc4:	b508      	push	{r3, lr}
   b4fc6:	4b02      	ldr	r3, [pc, #8]	; (b4fd0 <network_is_on+0xc>)
   b4fc8:	681b      	ldr	r3, [r3, #0]
   b4fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4fcc:	9301      	str	r3, [sp, #4]
   b4fce:	bd08      	pop	{r3, pc}
   b4fd0:	00030240 	.word	0x00030240

000b4fd4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4fd4:	b508      	push	{r3, lr}
   b4fd6:	4b02      	ldr	r3, [pc, #8]	; (b4fe0 <network_is_off+0xc>)
   b4fd8:	681b      	ldr	r3, [r3, #0]
   b4fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4fdc:	9301      	str	r3, [sp, #4]
   b4fde:	bd08      	pop	{r3, pc}
   b4fe0:	00030240 	.word	0x00030240

000b4fe4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4fe4:	b508      	push	{r3, lr}
   b4fe6:	4b02      	ldr	r3, [pc, #8]	; (b4ff0 <malloc+0xc>)
   b4fe8:	681b      	ldr	r3, [r3, #0]
   b4fea:	681b      	ldr	r3, [r3, #0]
   b4fec:	9301      	str	r3, [sp, #4]
   b4fee:	bd08      	pop	{r3, pc}
   b4ff0:	0003021c 	.word	0x0003021c

000b4ff4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4ff4:	b508      	push	{r3, lr}
   b4ff6:	4b02      	ldr	r3, [pc, #8]	; (b5000 <free+0xc>)
   b4ff8:	681b      	ldr	r3, [r3, #0]
   b4ffa:	685b      	ldr	r3, [r3, #4]
   b4ffc:	9301      	str	r3, [sp, #4]
   b4ffe:	bd08      	pop	{r3, pc}
   b5000:	0003021c 	.word	0x0003021c

000b5004 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5004:	b508      	push	{r3, lr}
   b5006:	4b02      	ldr	r3, [pc, #8]	; (b5010 <vsnprintf+0xc>)
   b5008:	681b      	ldr	r3, [r3, #0]
   b500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b500c:	9301      	str	r3, [sp, #4]
   b500e:	bd08      	pop	{r3, pc}
   b5010:	0003021c 	.word	0x0003021c

000b5014 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b5014:	b508      	push	{r3, lr}
   b5016:	4b02      	ldr	r3, [pc, #8]	; (b5020 <_malloc_r+0xc>)
   b5018:	681b      	ldr	r3, [r3, #0]
   b501a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b501c:	9301      	str	r3, [sp, #4]
   b501e:	bd08      	pop	{r3, pc}
   b5020:	0003021c 	.word	0x0003021c

000b5024 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b5024:	b508      	push	{r3, lr}
   b5026:	4b02      	ldr	r3, [pc, #8]	; (b5030 <__errno+0xc>)
   b5028:	681b      	ldr	r3, [r3, #0]
   b502a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b502c:	9301      	str	r3, [sp, #4]
   b502e:	bd08      	pop	{r3, pc}
   b5030:	0003021c 	.word	0x0003021c

000b5034 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5034:	b508      	push	{r3, lr}
   b5036:	4b02      	ldr	r3, [pc, #8]	; (b5040 <__assert_func+0xc>)
   b5038:	681b      	ldr	r3, [r3, #0]
   b503a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b503c:	9301      	str	r3, [sp, #4]
   b503e:	bd08      	pop	{r3, pc}
   b5040:	0003021c 	.word	0x0003021c

000b5044 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5044:	b508      	push	{r3, lr}
   b5046:	4b02      	ldr	r3, [pc, #8]	; (b5050 <newlib_impure_ptr_callback+0xc>)
   b5048:	681b      	ldr	r3, [r3, #0]
   b504a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b504c:	9301      	str	r3, [sp, #4]
   b504e:	bd08      	pop	{r3, pc}
   b5050:	0003021c 	.word	0x0003021c

000b5054 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   b5054:	428a      	cmp	r2, r1
{
   b5056:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   b5058:	d007      	beq.n	b506a <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b505a:	1a44      	subs	r4, r0, r1
   b505c:	9802      	ldr	r0, [sp, #8]
   b505e:	1ac0      	subs	r0, r0, r3
   b5060:	4344      	muls	r4, r0
   b5062:	1a50      	subs	r0, r2, r1
   b5064:	fb94 f0f0 	sdiv	r0, r4, r0
   b5068:	4418      	add	r0, r3
}
   b506a:	bd10      	pop	{r4, pc}

000b506c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b506c:	2100      	movs	r1, #0
   b506e:	f7ff bf35 	b.w	b4edc <system_delay_ms>
	...

000b5074 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5074:	4802      	ldr	r0, [pc, #8]	; (b5080 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5076:	2300      	movs	r3, #0
   b5078:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b507a:	f7ff bd97 	b.w	b4bac <os_mutex_recursive_create>
   b507e:	bf00      	nop
   b5080:	2003e6b8 	.word	0x2003e6b8

000b5084 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5084:	2200      	movs	r2, #0
   b5086:	6840      	ldr	r0, [r0, #4]
   b5088:	4611      	mov	r1, r2
   b508a:	f7ff bf83 	b.w	b4f94 <network_listening>

000b508e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b508e:	2200      	movs	r2, #0
   b5090:	6840      	ldr	r0, [r0, #4]
   b5092:	4611      	mov	r1, r2
   b5094:	f7ff bf8e 	b.w	b4fb4 <network_get_listen_timeout>

000b5098 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5098:	6840      	ldr	r0, [r0, #4]
   b509a:	2200      	movs	r2, #0
   b509c:	f7ff bf82 	b.w	b4fa4 <network_set_listen_timeout>

000b50a0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b50a0:	6840      	ldr	r0, [r0, #4]
   b50a2:	2200      	movs	r2, #0
   b50a4:	f081 0101 	eor.w	r1, r1, #1
   b50a8:	f7ff bf6c 	b.w	b4f84 <network_listen>

000b50ac <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b50ac:	2300      	movs	r3, #0
   b50ae:	6840      	ldr	r0, [r0, #4]
   b50b0:	461a      	mov	r2, r3
   b50b2:	4619      	mov	r1, r3
   b50b4:	f7ff bf5e 	b.w	b4f74 <network_off>

000b50b8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b50b8:	2300      	movs	r3, #0
   b50ba:	6840      	ldr	r0, [r0, #4]
   b50bc:	461a      	mov	r2, r3
   b50be:	4619      	mov	r1, r3
   b50c0:	f7ff bf50 	b.w	b4f64 <network_on>

000b50c4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b50c4:	2200      	movs	r2, #0
   b50c6:	6840      	ldr	r0, [r0, #4]
   b50c8:	4611      	mov	r1, r2
   b50ca:	f7ff bf43 	b.w	b4f54 <network_ready>

000b50ce <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b50ce:	2200      	movs	r2, #0
   b50d0:	6840      	ldr	r0, [r0, #4]
   b50d2:	4611      	mov	r1, r2
   b50d4:	f7ff bf2e 	b.w	b4f34 <network_connecting>

000b50d8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b50d8:	6840      	ldr	r0, [r0, #4]
   b50da:	2200      	movs	r2, #0
   b50dc:	2102      	movs	r1, #2
   b50de:	f7ff bf31 	b.w	b4f44 <network_disconnect>

000b50e2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b50e2:	2300      	movs	r3, #0
   b50e4:	6840      	ldr	r0, [r0, #4]
   b50e6:	461a      	mov	r2, r3
   b50e8:	f7ff bf1c 	b.w	b4f24 <network_connect>

000b50ec <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b50ec:	4b02      	ldr	r3, [pc, #8]	; (b50f8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b50ee:	2203      	movs	r2, #3
   b50f0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b50f2:	4a02      	ldr	r2, [pc, #8]	; (b50fc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b50f4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b50f6:	4770      	bx	lr
   b50f8:	2003e6bc 	.word	0x2003e6bc
   b50fc:	000b912c 	.word	0x000b912c

000b5100 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5100:	4770      	bx	lr

000b5102 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5104:	4606      	mov	r6, r0
   b5106:	4615      	mov	r5, r2
   b5108:	460c      	mov	r4, r1
   b510a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b510c:	42bc      	cmp	r4, r7
   b510e:	d006      	beq.n	b511e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5110:	6833      	ldr	r3, [r6, #0]
   b5112:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5116:	689b      	ldr	r3, [r3, #8]
   b5118:	4630      	mov	r0, r6
   b511a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b511c:	e7f6      	b.n	b510c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b511e:	4628      	mov	r0, r5
   b5120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5122 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5122:	7c00      	ldrb	r0, [r0, #16]
   b5124:	2200      	movs	r2, #0
   b5126:	f7ff bda1 	b.w	b4c6c <hal_i2c_write>

000b512a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b512a:	7c00      	ldrb	r0, [r0, #16]
   b512c:	2100      	movs	r1, #0
   b512e:	f7ff bda5 	b.w	b4c7c <hal_i2c_available>

000b5132 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5132:	7c00      	ldrb	r0, [r0, #16]
   b5134:	2100      	movs	r1, #0
   b5136:	f7ff bda9 	b.w	b4c8c <hal_i2c_read>

000b513a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b513a:	7c00      	ldrb	r0, [r0, #16]
   b513c:	2100      	movs	r1, #0
   b513e:	f7ff bdad 	b.w	b4c9c <hal_i2c_peek>

000b5142 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5142:	7c00      	ldrb	r0, [r0, #16]
   b5144:	2100      	movs	r1, #0
   b5146:	f7ff bdb1 	b.w	b4cac <hal_i2c_flush>

000b514a <_ZN7TwoWireD0Ev>:
   b514a:	b510      	push	{r4, lr}
   b514c:	2114      	movs	r1, #20
   b514e:	4604      	mov	r4, r0
   b5150:	f7fe ffa5 	bl	b409e <_ZdlPvj>
   b5154:	4620      	mov	r0, r4
   b5156:	bd10      	pop	{r4, pc}

000b5158 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5158:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b515a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b515e:	4604      	mov	r4, r0
   b5160:	4608      	mov	r0, r1
   b5162:	2100      	movs	r1, #0
   b5164:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5168:	4b03      	ldr	r3, [pc, #12]	; (b5178 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b516a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b516c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b516e:	4611      	mov	r1, r2
   b5170:	f7ff fdac 	bl	b4ccc <hal_i2c_init>
}
   b5174:	4620      	mov	r0, r4
   b5176:	bd10      	pop	{r4, pc}
   b5178:	000b9168 	.word	0x000b9168

000b517c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b517c:	4770      	bx	lr

000b517e <_ZN9IPAddressD0Ev>:
   b517e:	b510      	push	{r4, lr}
   b5180:	2118      	movs	r1, #24
   b5182:	4604      	mov	r4, r0
   b5184:	f7fe ff8b 	bl	b409e <_ZdlPvj>
   b5188:	4620      	mov	r0, r4
   b518a:	bd10      	pop	{r4, pc}

000b518c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b518c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b518e:	7d03      	ldrb	r3, [r0, #20]
   b5190:	2b06      	cmp	r3, #6
{
   b5192:	b08d      	sub	sp, #52	; 0x34
   b5194:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5196:	f100 0704 	add.w	r7, r0, #4
   b519a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b519e:	d012      	beq.n	b51c6 <_ZNK9IPAddress7printToER5Print+0x3a>
   b51a0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b51a4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b51a8:	220a      	movs	r2, #10
   b51aa:	4630      	mov	r0, r6
   b51ac:	f000 f973 	bl	b5496 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b51b0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b51b2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b51b4:	d019      	beq.n	b51ea <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b51b6:	2c00      	cmp	r4, #0
   b51b8:	d0f4      	beq.n	b51a4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b51ba:	212e      	movs	r1, #46	; 0x2e
   b51bc:	4630      	mov	r0, r6
   b51be:	f000 f951 	bl	b5464 <_ZN5Print5printEc>
   b51c2:	4404      	add	r4, r0
   b51c4:	e7ee      	b.n	b51a4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b51c6:	232f      	movs	r3, #47	; 0x2f
   b51c8:	466a      	mov	r2, sp
   b51ca:	4639      	mov	r1, r7
   b51cc:	200a      	movs	r0, #10
		buf[0] = 0;
   b51ce:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b51d2:	f7ff fd8b 	bl	b4cec <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b51d6:	4668      	mov	r0, sp
   b51d8:	f001 fe3c 	bl	b6e54 <strlen>
   b51dc:	6833      	ldr	r3, [r6, #0]
   b51de:	4602      	mov	r2, r0
   b51e0:	68db      	ldr	r3, [r3, #12]
   b51e2:	4669      	mov	r1, sp
   b51e4:	4630      	mov	r0, r6
   b51e6:	4798      	blx	r3
   b51e8:	4604      	mov	r4, r0
    }
    return n;
}
   b51ea:	4620      	mov	r0, r4
   b51ec:	b00d      	add	sp, #52	; 0x34
   b51ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b51f0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b51f0:	b510      	push	{r4, lr}
   b51f2:	4b05      	ldr	r3, [pc, #20]	; (b5208 <_ZN9IPAddressC1Ev+0x18>)
   b51f4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b51f6:	2211      	movs	r2, #17
   b51f8:	f840 3b04 	str.w	r3, [r0], #4
   b51fc:	2100      	movs	r1, #0
   b51fe:	f001 fde0 	bl	b6dc2 <memset>
}
   b5202:	4620      	mov	r0, r4
   b5204:	bd10      	pop	{r4, pc}
   b5206:	bf00      	nop
   b5208:	000b9190 	.word	0x000b9190

000b520c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b520c:	4603      	mov	r3, r0
   b520e:	4a07      	ldr	r2, [pc, #28]	; (b522c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5210:	b510      	push	{r4, lr}
   b5212:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5216:	f101 0210 	add.w	r2, r1, #16
   b521a:	f851 4b04 	ldr.w	r4, [r1], #4
   b521e:	f843 4b04 	str.w	r4, [r3], #4
   b5222:	4291      	cmp	r1, r2
   b5224:	d1f9      	bne.n	b521a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5226:	780a      	ldrb	r2, [r1, #0]
   b5228:	701a      	strb	r2, [r3, #0]
}
   b522a:	bd10      	pop	{r4, pc}
   b522c:	000b9190 	.word	0x000b9190

000b5230 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b5230:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b5232:	2b04      	cmp	r3, #4
   b5234:	d104      	bne.n	b5240 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b5236:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5238:	3800      	subs	r0, #0
   b523a:	bf18      	it	ne
   b523c:	2001      	movne	r0, #1
   b523e:	4770      	bx	lr
    } else if (version() == 6) {
   b5240:	2b06      	cmp	r3, #6
   b5242:	d107      	bne.n	b5254 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5244:	6843      	ldr	r3, [r0, #4]
   b5246:	b93b      	cbnz	r3, b5258 <_ZNK9IPAddresscvbEv+0x28>
   b5248:	6883      	ldr	r3, [r0, #8]
   b524a:	b92b      	cbnz	r3, b5258 <_ZNK9IPAddresscvbEv+0x28>
   b524c:	68c3      	ldr	r3, [r0, #12]
   b524e:	b91b      	cbnz	r3, b5258 <_ZNK9IPAddresscvbEv+0x28>
   b5250:	6900      	ldr	r0, [r0, #16]
   b5252:	e7f1      	b.n	b5238 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b5254:	2000      	movs	r0, #0
   b5256:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5258:	2001      	movs	r0, #1
}
   b525a:	4770      	bx	lr

000b525c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b525c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b525e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5262:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5266:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b526a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b526e:	2304      	movs	r3, #4
   b5270:	6041      	str	r1, [r0, #4]
   b5272:	7503      	strb	r3, [r0, #20]
}
   b5274:	bd10      	pop	{r4, pc}
	...

000b5278 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5278:	b507      	push	{r0, r1, r2, lr}
   b527a:	4b06      	ldr	r3, [pc, #24]	; (b5294 <_ZN9IPAddressC1EPKh+0x1c>)
   b527c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b527e:	78cb      	ldrb	r3, [r1, #3]
   b5280:	9300      	str	r3, [sp, #0]
   b5282:	788b      	ldrb	r3, [r1, #2]
   b5284:	784a      	ldrb	r2, [r1, #1]
   b5286:	7809      	ldrb	r1, [r1, #0]
   b5288:	f7ff ffe8 	bl	b525c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b528c:	b003      	add	sp, #12
   b528e:	f85d fb04 	ldr.w	pc, [sp], #4
   b5292:	bf00      	nop
   b5294:	000b9190 	.word	0x000b9190

000b5298 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5298:	4b01      	ldr	r3, [pc, #4]	; (b52a0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b529a:	4a02      	ldr	r2, [pc, #8]	; (b52a4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b529c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b529e:	4770      	bx	lr
   b52a0:	2003e6c4 	.word	0x2003e6c4
   b52a4:	000b919c 	.word	0x000b919c

000b52a8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b52a8:	2300      	movs	r3, #0
   b52aa:	6840      	ldr	r0, [r0, #4]
   b52ac:	461a      	mov	r2, r3
   b52ae:	f7ff be39 	b.w	b4f24 <network_connect>

000b52b2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b52b2:	6840      	ldr	r0, [r0, #4]
   b52b4:	2200      	movs	r2, #0
   b52b6:	2102      	movs	r1, #2
   b52b8:	f7ff be44 	b.w	b4f44 <network_disconnect>

000b52bc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b52bc:	2200      	movs	r2, #0
   b52be:	6840      	ldr	r0, [r0, #4]
   b52c0:	4611      	mov	r1, r2
   b52c2:	f7ff be37 	b.w	b4f34 <network_connecting>

000b52c6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b52c6:	2200      	movs	r2, #0
   b52c8:	6840      	ldr	r0, [r0, #4]
   b52ca:	4611      	mov	r1, r2
   b52cc:	f7ff be42 	b.w	b4f54 <network_ready>

000b52d0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b52d0:	2300      	movs	r3, #0
   b52d2:	6840      	ldr	r0, [r0, #4]
   b52d4:	461a      	mov	r2, r3
   b52d6:	4619      	mov	r1, r3
   b52d8:	f7ff be44 	b.w	b4f64 <network_on>

000b52dc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b52dc:	2300      	movs	r3, #0
   b52de:	6840      	ldr	r0, [r0, #4]
   b52e0:	461a      	mov	r2, r3
   b52e2:	4619      	mov	r1, r3
   b52e4:	f7ff be46 	b.w	b4f74 <network_off>

000b52e8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b52e8:	6840      	ldr	r0, [r0, #4]
   b52ea:	2100      	movs	r1, #0
   b52ec:	f7ff be6a 	b.w	b4fc4 <network_is_on>

000b52f0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b52f0:	6840      	ldr	r0, [r0, #4]
   b52f2:	2100      	movs	r1, #0
   b52f4:	f7ff be6e 	b.w	b4fd4 <network_is_off>

000b52f8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b52f8:	6840      	ldr	r0, [r0, #4]
   b52fa:	2200      	movs	r2, #0
   b52fc:	f081 0101 	eor.w	r1, r1, #1
   b5300:	f7ff be40 	b.w	b4f84 <network_listen>

000b5304 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5304:	6840      	ldr	r0, [r0, #4]
   b5306:	2200      	movs	r2, #0
   b5308:	f7ff be4c 	b.w	b4fa4 <network_set_listen_timeout>

000b530c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b530c:	2200      	movs	r2, #0
   b530e:	6840      	ldr	r0, [r0, #4]
   b5310:	4611      	mov	r1, r2
   b5312:	f7ff be4f 	b.w	b4fb4 <network_get_listen_timeout>

000b5316 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5316:	2200      	movs	r2, #0
   b5318:	6840      	ldr	r0, [r0, #4]
   b531a:	4611      	mov	r1, r2
   b531c:	f7ff be3a 	b.w	b4f94 <network_listening>

000b5320 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5324:	b095      	sub	sp, #84	; 0x54
   b5326:	4614      	mov	r4, r2
   b5328:	460d      	mov	r5, r1
   b532a:	4607      	mov	r7, r0
    IPAddress addr;
   b532c:	f7ff ff60 	bl	b51f0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5330:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5332:	221c      	movs	r2, #28
   b5334:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5336:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5338:	f001 fd43 	bl	b6dc2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b533c:	2340      	movs	r3, #64	; 0x40
   b533e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5340:	4620      	mov	r0, r4
   b5342:	466b      	mov	r3, sp
   b5344:	aa0c      	add	r2, sp, #48	; 0x30
   b5346:	2100      	movs	r1, #0
   b5348:	f7ff fcf0 	bl	b4d2c <netdb_getaddrinfo>
    if (!r) {
   b534c:	4604      	mov	r4, r0
   b534e:	2800      	cmp	r0, #0
   b5350:	d14b      	bne.n	b53ea <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5352:	4602      	mov	r2, r0
   b5354:	2101      	movs	r1, #1
   b5356:	6868      	ldr	r0, [r5, #4]
   b5358:	f7ff fdfc 	bl	b4f54 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b535c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b535e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5360:	4622      	mov	r2, r4
   b5362:	6868      	ldr	r0, [r5, #4]
   b5364:	f7ff fdf6 	bl	b4f54 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5368:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b536a:	4681      	mov	r9, r0
        bool ok = false;
   b536c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b536e:	2e00      	cmp	r6, #0
   b5370:	d03b      	beq.n	b53ea <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5372:	2900      	cmp	r1, #0
   b5374:	d139      	bne.n	b53ea <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5376:	6873      	ldr	r3, [r6, #4]
   b5378:	2b02      	cmp	r3, #2
   b537a:	d003      	beq.n	b5384 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b537c:	2b0a      	cmp	r3, #10
   b537e:	d011      	beq.n	b53a4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5380:	69f6      	ldr	r6, [r6, #28]
   b5382:	e7f4      	b.n	b536e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5384:	f1b8 0f00 	cmp.w	r8, #0
   b5388:	d0fa      	beq.n	b5380 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b538a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b538c:	a806      	add	r0, sp, #24
   b538e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5390:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5392:	f7ff ff71 	bl	b5278 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5396:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5398:	1d3c      	adds	r4, r7, #4
   b539a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b539c:	682b      	ldr	r3, [r5, #0]
   b539e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b53a0:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b53a2:	e7ed      	b.n	b5380 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b53a4:	f1b9 0f00 	cmp.w	r9, #0
   b53a8:	d0ea      	beq.n	b5380 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b53aa:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b53ac:	2210      	movs	r2, #16
   b53ae:	a801      	add	r0, sp, #4
   b53b0:	f001 fd07 	bl	b6dc2 <memset>
                    a.v = 6;
   b53b4:	2306      	movs	r3, #6
   b53b6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b53ba:	ad01      	add	r5, sp, #4
   b53bc:	f104 0308 	add.w	r3, r4, #8
   b53c0:	3418      	adds	r4, #24
   b53c2:	6818      	ldr	r0, [r3, #0]
   b53c4:	6859      	ldr	r1, [r3, #4]
   b53c6:	462a      	mov	r2, r5
   b53c8:	c203      	stmia	r2!, {r0, r1}
   b53ca:	3308      	adds	r3, #8
   b53cc:	42a3      	cmp	r3, r4
   b53ce:	4615      	mov	r5, r2
   b53d0:	d1f7      	bne.n	b53c2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b53d2:	a901      	add	r1, sp, #4
   b53d4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b53d6:	ad07      	add	r5, sp, #28
   b53d8:	f7ff ff18 	bl	b520c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b53dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b53de:	1d3c      	adds	r4, r7, #4
   b53e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b53e2:	682b      	ldr	r3, [r5, #0]
   b53e4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b53e6:	4649      	mov	r1, r9
   b53e8:	e7ca      	b.n	b5380 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b53ea:	9800      	ldr	r0, [sp, #0]
   b53ec:	f7ff fc96 	bl	b4d1c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b53f0:	4638      	mov	r0, r7
   b53f2:	b015      	add	sp, #84	; 0x54
   b53f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b53f8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b53f8:	4b02      	ldr	r3, [pc, #8]	; (b5404 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b53fa:	4a03      	ldr	r2, [pc, #12]	; (b5408 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b53fc:	601a      	str	r2, [r3, #0]
   b53fe:	2200      	movs	r2, #0
   b5400:	605a      	str	r2, [r3, #4]

} // spark
   b5402:	4770      	bx	lr
   b5404:	2003e6c8 	.word	0x2003e6c8
   b5408:	000b91a8 	.word	0x000b91a8

000b540c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b540c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b540e:	4606      	mov	r6, r0
   b5410:	460d      	mov	r5, r1
  size_t n = 0;
   b5412:	188f      	adds	r7, r1, r2
   b5414:	2400      	movs	r4, #0
  while (size--) {
   b5416:	42bd      	cmp	r5, r7
   b5418:	d00c      	beq.n	b5434 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b541a:	6833      	ldr	r3, [r6, #0]
   b541c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5420:	689b      	ldr	r3, [r3, #8]
   b5422:	4630      	mov	r0, r6
   b5424:	4798      	blx	r3
     if (chunk>=0)
   b5426:	1e03      	subs	r3, r0, #0
   b5428:	db01      	blt.n	b542e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b542a:	441c      	add	r4, r3
  while (size--) {
   b542c:	e7f3      	b.n	b5416 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b542e:	2c00      	cmp	r4, #0
   b5430:	bf08      	it	eq
   b5432:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5434:	4620      	mov	r0, r4
   b5436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5438 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5438:	b513      	push	{r0, r1, r4, lr}
   b543a:	4604      	mov	r4, r0
    }
   b543c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b543e:	b159      	cbz	r1, b5458 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5440:	9101      	str	r1, [sp, #4]
   b5442:	f001 fd07 	bl	b6e54 <strlen>
   b5446:	6823      	ldr	r3, [r4, #0]
   b5448:	9901      	ldr	r1, [sp, #4]
   b544a:	68db      	ldr	r3, [r3, #12]
   b544c:	4602      	mov	r2, r0
   b544e:	4620      	mov	r0, r4
    }
   b5450:	b002      	add	sp, #8
   b5452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5456:	4718      	bx	r3
    }
   b5458:	b002      	add	sp, #8
   b545a:	bd10      	pop	{r4, pc}

000b545c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b545c:	b508      	push	{r3, lr}
  return write(str);
   b545e:	f7ff ffeb 	bl	b5438 <_ZN5Print5writeEPKc>
}
   b5462:	bd08      	pop	{r3, pc}

000b5464 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b5464:	6803      	ldr	r3, [r0, #0]
   b5466:	689b      	ldr	r3, [r3, #8]
   b5468:	4718      	bx	r3

000b546a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b546a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b546c:	210d      	movs	r1, #13
{
   b546e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5470:	f7ff fff8 	bl	b5464 <_ZN5Print5printEc>
  n += print('\n');
   b5474:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5476:	4604      	mov	r4, r0
  n += print('\n');
   b5478:	4628      	mov	r0, r5
   b547a:	f7ff fff3 	bl	b5464 <_ZN5Print5printEc>
  return n;
}
   b547e:	4420      	add	r0, r4
   b5480:	bd38      	pop	{r3, r4, r5, pc}

000b5482 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b5482:	b538      	push	{r3, r4, r5, lr}
   b5484:	4605      	mov	r5, r0
  return write(str);
   b5486:	f7ff ffd7 	bl	b5438 <_ZN5Print5writeEPKc>
   b548a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b548c:	4628      	mov	r0, r5
   b548e:	f7ff ffec 	bl	b546a <_ZN5Print7printlnEv>
  return n;
}
   b5492:	4420      	add	r0, r4
   b5494:	bd38      	pop	{r3, r4, r5, pc}

000b5496 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5496:	b530      	push	{r4, r5, lr}
   b5498:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b549a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b549c:	2a01      	cmp	r2, #1
  *str = '\0';
   b549e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b54a2:	bf98      	it	ls
   b54a4:	220a      	movls	r2, #10
   b54a6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b54a8:	460d      	mov	r5, r1
   b54aa:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b54ae:	fb01 5312 	mls	r3, r1, r2, r5
   b54b2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b54b6:	2b09      	cmp	r3, #9
   b54b8:	bf94      	ite	ls
   b54ba:	3330      	addls	r3, #48	; 0x30
   b54bc:	3337      	addhi	r3, #55	; 0x37
   b54be:	b2db      	uxtb	r3, r3
  } while(n);
   b54c0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b54c2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b54c6:	d9ef      	bls.n	b54a8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b54c8:	4621      	mov	r1, r4
   b54ca:	f7ff ffb5 	bl	b5438 <_ZN5Print5writeEPKc>
}
   b54ce:	b00b      	add	sp, #44	; 0x2c
   b54d0:	bd30      	pop	{r4, r5, pc}

000b54d2 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b54d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b54d6:	b086      	sub	sp, #24
   b54d8:	af00      	add	r7, sp, #0
   b54da:	4605      	mov	r5, r0
   b54dc:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b54de:	1d38      	adds	r0, r7, #4
   b54e0:	2114      	movs	r1, #20
{
   b54e2:	4614      	mov	r4, r2
    va_copy(args2, args);
   b54e4:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b54e6:	f7ff fd8d 	bl	b5004 <vsnprintf>

    if (n<bufsize)
   b54ea:	2813      	cmp	r0, #19
   b54ec:	d80e      	bhi.n	b550c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b54ee:	1d39      	adds	r1, r7, #4
   b54f0:	4628      	mov	r0, r5
   b54f2:	f7ff ffa1 	bl	b5438 <_ZN5Print5writeEPKc>
   b54f6:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b54f8:	b11e      	cbz	r6, b5502 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b54fa:	4628      	mov	r0, r5
   b54fc:	f7ff ffb5 	bl	b546a <_ZN5Print7printlnEv>
   b5500:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b5502:	4620      	mov	r0, r4
   b5504:	3718      	adds	r7, #24
   b5506:	46bd      	mov	sp, r7
   b5508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b550c:	f100 0308 	add.w	r3, r0, #8
   b5510:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b5514:	46e8      	mov	r8, sp
        char bigger[n+1];
   b5516:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b551a:	4622      	mov	r2, r4
   b551c:	1c41      	adds	r1, r0, #1
   b551e:	683b      	ldr	r3, [r7, #0]
   b5520:	4668      	mov	r0, sp
   b5522:	f7ff fd6f 	bl	b5004 <vsnprintf>
  return write(str);
   b5526:	4669      	mov	r1, sp
   b5528:	4628      	mov	r0, r5
   b552a:	f7ff ff85 	bl	b5438 <_ZN5Print5writeEPKc>
   b552e:	4604      	mov	r4, r0
   b5530:	46c5      	mov	sp, r8
   b5532:	e7e1      	b.n	b54f8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b5534 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b5534:	4b01      	ldr	r3, [pc, #4]	; (b553c <_GLOBAL__sub_I_RGB+0x8>)
   b5536:	2200      	movs	r2, #0
   b5538:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b553a:	4770      	bx	lr
   b553c:	2003e6d0 	.word	0x2003e6d0

000b5540 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5540:	b510      	push	{r4, lr}
   b5542:	4604      	mov	r4, r0
   b5544:	4608      	mov	r0, r1
{
    _spi = spi;
   b5546:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5548:	f7ff fc28 	bl	b4d9c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b554c:	2300      	movs	r3, #0
   b554e:	6063      	str	r3, [r4, #4]
}
   b5550:	4620      	mov	r0, r4
   b5552:	bd10      	pop	{r4, pc}

000b5554 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5554:	4b05      	ldr	r3, [pc, #20]	; (b556c <_GLOBAL__sub_I_System+0x18>)
   b5556:	2202      	movs	r2, #2
   b5558:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b555a:	4b05      	ldr	r3, [pc, #20]	; (b5570 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b555c:	4a05      	ldr	r2, [pc, #20]	; (b5574 <_GLOBAL__sub_I_System+0x20>)
   b555e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5560:	2000      	movs	r0, #0
   b5562:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5566:	f7ff bcb1 	b.w	b4ecc <set_system_mode>
   b556a:	bf00      	nop
   b556c:	2003e6ec 	.word	0x2003e6ec
   b5570:	2003e6e0 	.word	0x2003e6e0
   b5574:	ffff0000 	.word	0xffff0000

000b5578 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b5578:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b557a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b557c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b5580:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b5582:	2201      	movs	r2, #1
   b5584:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5588:	f10d 0107 	add.w	r1, sp, #7
   b558c:	47a0      	blx	r4
}
   b558e:	b002      	add	sp, #8
   b5590:	bd10      	pop	{r4, pc}

000b5592 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b5592:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b5594:	6803      	ldr	r3, [r0, #0]
   b5596:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b5598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b559c:	46a4      	mov	ip, r4
}
   b559e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b55a2:	4760      	bx	ip

000b55a4 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b55a4:	b513      	push	{r0, r1, r4, lr}
   b55a6:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b55a8:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b55aa:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b55ae:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b55b0:	f10d 0107 	add.w	r1, sp, #7
   b55b4:	2201      	movs	r2, #1
   b55b6:	47a0      	blx	r4
}
   b55b8:	b002      	add	sp, #8
   b55ba:	bd10      	pop	{r4, pc}

000b55bc <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b55bc:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b55be:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b55c0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b55c4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b55c8:	429a      	cmp	r2, r3
int TCPClient::read() {
   b55ca:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b55cc:	d008      	beq.n	b55e0 <_ZN9TCPClient4readEv+0x24>
   b55ce:	6963      	ldr	r3, [r4, #20]
   b55d0:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b55d4:	1c51      	adds	r1, r2, #1
   b55d6:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b55da:	4413      	add	r3, r2
   b55dc:	7918      	ldrb	r0, [r3, #4]
}
   b55de:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b55e0:	6803      	ldr	r3, [r0, #0]
   b55e2:	691b      	ldr	r3, [r3, #16]
   b55e4:	4798      	blx	r3
   b55e6:	2800      	cmp	r0, #0
   b55e8:	d1f1      	bne.n	b55ce <_ZN9TCPClient4readEv+0x12>
   b55ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b55ee:	e7f6      	b.n	b55de <_ZN9TCPClient4readEv+0x22>

000b55f0 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b55f0:	4770      	bx	lr

000b55f2 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b55f2:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b55f4:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b55f6:	43c0      	mvns	r0, r0
   b55f8:	0fc0      	lsrs	r0, r0, #31
   b55fa:	4770      	bx	lr

000b55fc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b55fc:	4770      	bx	lr
	...

000b5600 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5600:	4b06      	ldr	r3, [pc, #24]	; (b561c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b5602:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5604:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b5606:	f100 040c 	add.w	r4, r0, #12
	    ||
   b560a:	d005      	beq.n	b5618 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b560c:	4608      	mov	r0, r1
   b560e:	f000 fdc5 	bl	b619c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b5612:	2800      	cmp	r0, #0
   b5614:	bf08      	it	eq
   b5616:	2400      	moveq	r4, #0
      }
   b5618:	4620      	mov	r0, r4
   b561a:	bd10      	pop	{r4, pc}
   b561c:	000b911c 	.word	0x000b911c

000b5620 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5620:	b510      	push	{r4, lr}
   b5622:	21ac      	movs	r1, #172	; 0xac
   b5624:	4604      	mov	r4, r0
   b5626:	f7fe fd3a 	bl	b409e <_ZdlPvj>
   b562a:	4620      	mov	r0, r4
   b562c:	bd10      	pop	{r4, pc}

000b562e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b562e:	21ac      	movs	r1, #172	; 0xac
   b5630:	f7fe bd35 	b.w	b409e <_ZdlPvj>

000b5634 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b5634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b5638:	f04f 0800 	mov.w	r8, #0
   b563c:	b086      	sub	sp, #24
   b563e:	461c      	mov	r4, r3
   b5640:	f8c0 8004 	str.w	r8, [r0, #4]
   b5644:	4605      	mov	r5, r0
   b5646:	460e      	mov	r6, r1
   b5648:	4617      	mov	r7, r2
    struct timeval tv = {};
   b564a:	4641      	mov	r1, r8
   b564c:	2210      	movs	r2, #16
   b564e:	a802      	add	r0, sp, #8
   b5650:	f001 fbb7 	bl	b6dc2 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b5654:	1c63      	adds	r3, r4, #1
   b5656:	d009      	beq.n	b566c <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b5658:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b565c:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b5660:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b5664:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b5668:	435c      	muls	r4, r3
   b566a:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b566c:	6968      	ldr	r0, [r5, #20]
   b566e:	2310      	movs	r3, #16
   b5670:	9300      	str	r3, [sp, #0]
   b5672:	6800      	ldr	r0, [r0, #0]
   b5674:	ab02      	add	r3, sp, #8
   b5676:	f241 0205 	movw	r2, #4101	; 0x1005
   b567a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b567e:	f7ff fb5d 	bl	b4d3c <sock_setsockopt>
    if (ret < 0) {
   b5682:	2800      	cmp	r0, #0
   b5684:	da07      	bge.n	b5696 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b5686:	f7ff fccd 	bl	b5024 <__errno>
   b568a:	6803      	ldr	r3, [r0, #0]
   b568c:	606b      	str	r3, [r5, #4]
        return 0;
   b568e:	2000      	movs	r0, #0
}
   b5690:	b006      	add	sp, #24
   b5692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b5696:	6968      	ldr	r0, [r5, #20]
   b5698:	2300      	movs	r3, #0
   b569a:	6800      	ldr	r0, [r0, #0]
   b569c:	463a      	mov	r2, r7
   b569e:	4631      	mov	r1, r6
   b56a0:	f7ff fb6c 	bl	b4d7c <sock_send>
    if (ret < 0) {
   b56a4:	1e03      	subs	r3, r0, #0
   b56a6:	dbee      	blt.n	b5686 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b56a8:	4618      	mov	r0, r3
   b56aa:	e7f1      	b.n	b5690 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b56ac <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b56ac:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b56ae:	6984      	ldr	r4, [r0, #24]
   b56b0:	4b0a      	ldr	r3, [pc, #40]	; (b56dc <_ZN9TCPClientD1Ev+0x30>)
   b56b2:	6003      	str	r3, [r0, #0]
   b56b4:	4605      	mov	r5, r0
   b56b6:	b17c      	cbz	r4, b56d8 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b56b8:	6863      	ldr	r3, [r4, #4]
   b56ba:	3b01      	subs	r3, #1
   b56bc:	6063      	str	r3, [r4, #4]
   b56be:	b95b      	cbnz	r3, b56d8 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b56c0:	6823      	ldr	r3, [r4, #0]
   b56c2:	4620      	mov	r0, r4
   b56c4:	689b      	ldr	r3, [r3, #8]
   b56c6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b56c8:	68a3      	ldr	r3, [r4, #8]
   b56ca:	3b01      	subs	r3, #1
   b56cc:	60a3      	str	r3, [r4, #8]
   b56ce:	b91b      	cbnz	r3, b56d8 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b56d0:	6823      	ldr	r3, [r4, #0]
   b56d2:	4620      	mov	r0, r4
   b56d4:	68db      	ldr	r3, [r3, #12]
   b56d6:	4798      	blx	r3
   b56d8:	4628      	mov	r0, r5
   b56da:	bd38      	pop	{r3, r4, r5, pc}
   b56dc:	000b9218 	.word	0x000b9218

000b56e0 <_ZN9TCPClientD0Ev>:
   b56e0:	b510      	push	{r4, lr}
   b56e2:	4604      	mov	r4, r0
   b56e4:	f7ff ffe2 	bl	b56ac <_ZN9TCPClientD1Ev>
   b56e8:	4620      	mov	r0, r4
   b56ea:	211c      	movs	r1, #28
   b56ec:	f7fe fcd7 	bl	b409e <_ZdlPvj>
   b56f0:	4620      	mov	r0, r4
   b56f2:	bd10      	pop	{r4, pc}

000b56f4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b56f4:	b530      	push	{r4, r5, lr}
   b56f6:	b087      	sub	sp, #28
   b56f8:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b56fa:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b56fc:	4668      	mov	r0, sp
   b56fe:	f7ff fdbb 	bl	b5278 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5702:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5704:	3404      	adds	r4, #4
   b5706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5708:	682b      	ldr	r3, [r5, #0]
   b570a:	7023      	strb	r3, [r4, #0]
    }
   b570c:	b007      	add	sp, #28
   b570e:	bd30      	pop	{r4, r5, pc}

000b5710 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b5710:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b5712:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b5714:	4b05      	ldr	r3, [pc, #20]	; (b572c <_ZN9TCPClient8remoteIPEv+0x1c>)
   b5716:	4604      	mov	r4, r0
   b5718:	358c      	adds	r5, #140	; 0x8c
   b571a:	f844 3b04 	str.w	r3, [r4], #4
   b571e:	4606      	mov	r6, r0
   b5720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5724:	682b      	ldr	r3, [r5, #0]
   b5726:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b5728:	4630      	mov	r0, r6
   b572a:	bd70      	pop	{r4, r5, r6, pc}
   b572c:	000b9190 	.word	0x000b9190

000b5730 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5734:	4698      	mov	r8, r3
    stop();
   b5736:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5738:	b093      	sub	sp, #76	; 0x4c
   b573a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b573c:	2400      	movs	r4, #0
    stop();
   b573e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5740:	4606      	mov	r6, r0
   b5742:	4617      	mov	r7, r2
    stop();
   b5744:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5746:	4628      	mov	r0, r5
   b5748:	466b      	mov	r3, sp
   b574a:	4622      	mov	r2, r4
   b574c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b574e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5750:	f7ff faec 	bl	b4d2c <netdb_getaddrinfo>
   b5754:	4605      	mov	r5, r0
   b5756:	2800      	cmp	r0, #0
   b5758:	d163      	bne.n	b5822 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b575a:	9b00      	ldr	r3, [sp, #0]
   b575c:	2b00      	cmp	r3, #0
   b575e:	d04b      	beq.n	b57f8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b5760:	695b      	ldr	r3, [r3, #20]
   b5762:	2b00      	cmp	r3, #0
   b5764:	d048      	beq.n	b57f8 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b5766:	a806      	add	r0, sp, #24
   b5768:	f7ff fd42 	bl	b51f0 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b576c:	9b00      	ldr	r3, [sp, #0]
   b576e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b5770:	7863      	ldrb	r3, [r4, #1]
   b5772:	2b02      	cmp	r3, #2
   b5774:	d104      	bne.n	b5780 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b5776:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b5778:	a806      	add	r0, sp, #24
   b577a:	f7ff ffbb 	bl	b56f4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b577e:	e026      	b.n	b57ce <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b5780:	2b0a      	cmp	r3, #10
   b5782:	d124      	bne.n	b57ce <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b5784:	2211      	movs	r2, #17
   b5786:	4629      	mov	r1, r5
   b5788:	a801      	add	r0, sp, #4
   b578a:	f001 fb1a 	bl	b6dc2 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b578e:	68a3      	ldr	r3, [r4, #8]
   b5790:	2b00      	cmp	r3, #0
   b5792:	d038      	beq.n	b5806 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5794:	f104 0308 	add.w	r3, r4, #8
   b5798:	f10d 0c04 	add.w	ip, sp, #4
   b579c:	3418      	adds	r4, #24
   b579e:	6818      	ldr	r0, [r3, #0]
   b57a0:	6859      	ldr	r1, [r3, #4]
   b57a2:	4662      	mov	r2, ip
   b57a4:	c203      	stmia	r2!, {r0, r1}
   b57a6:	3308      	adds	r3, #8
   b57a8:	42a3      	cmp	r3, r4
   b57aa:	4694      	mov	ip, r2
   b57ac:	d1f7      	bne.n	b579e <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b57ae:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b57b0:	a901      	add	r1, sp, #4
   b57b2:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b57b4:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b57b8:	f7ff fd28 	bl	b520c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b57bc:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b57c0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b57c4:	ac07      	add	r4, sp, #28
   b57c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b57c8:	f8dc 3000 	ldr.w	r3, [ip]
   b57cc:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b57ce:	a806      	add	r0, sp, #24
   b57d0:	f7ff fd2e 	bl	b5230 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b57d4:	b180      	cbz	r0, b57f8 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b57d6:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b57d8:	ad07      	add	r5, sp, #28
   b57da:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b57de:	4b12      	ldr	r3, [pc, #72]	; (b5828 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b57e0:	930c      	str	r3, [sp, #48]	; 0x30
   b57e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b57e4:	ac0d      	add	r4, sp, #52	; 0x34
   b57e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b57e8:	682b      	ldr	r3, [r5, #0]
   b57ea:	7023      	strb	r3, [r4, #0]
   b57ec:	463a      	mov	r2, r7
   b57ee:	4643      	mov	r3, r8
   b57f0:	a90c      	add	r1, sp, #48	; 0x30
   b57f2:	4630      	mov	r0, r6
   b57f4:	47c8      	blx	r9
   b57f6:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b57f8:	9800      	ldr	r0, [sp, #0]
   b57fa:	f7ff fa8f 	bl	b4d1c <netdb_freeaddrinfo>
}
   b57fe:	4628      	mov	r0, r5
   b5800:	b013      	add	sp, #76	; 0x4c
   b5802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5806:	68e3      	ldr	r3, [r4, #12]
   b5808:	2b00      	cmp	r3, #0
   b580a:	d1c3      	bne.n	b5794 <_ZN9TCPClient7connectEPKctm+0x64>
   b580c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b5810:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b5814:	f7ff fa72 	bl	b4cfc <inet_htonl>
   b5818:	4581      	cmp	r9, r0
   b581a:	d1bb      	bne.n	b5794 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b581c:	f104 0114 	add.w	r1, r4, #20
   b5820:	e7aa      	b.n	b5778 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5822:	4625      	mov	r5, r4
   b5824:	e7e8      	b.n	b57f8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b5826:	bf00      	nop
   b5828:	000b9190 	.word	0x000b9190

000b582c <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b582c:	b538      	push	{r3, r4, r5, lr}
   b582e:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b5830:	681a      	ldr	r2, [r3, #0]
   b5832:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b5834:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b5836:	da10      	bge.n	b585a <_ZN9TCPClient9connectedEv+0x2e>
   b5838:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b583c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5840:	429a      	cmp	r2, r3
   b5842:	d10a      	bne.n	b585a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b5844:	6803      	ldr	r3, [r0, #0]
   b5846:	691b      	ldr	r3, [r3, #16]
   b5848:	4798      	blx	r3
        if (!rv) {
   b584a:	4604      	mov	r4, r0
   b584c:	b928      	cbnz	r0, b585a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b584e:	682b      	ldr	r3, [r5, #0]
   b5850:	4628      	mov	r0, r5
   b5852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5854:	4798      	blx	r3
        rv = available();
   b5856:	4620      	mov	r0, r4
}
   b5858:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b585a:	2001      	movs	r0, #1
   b585c:	e7fc      	b.n	b5858 <_ZN9TCPClient9connectedEv+0x2c>

000b585e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b585e:	b510      	push	{r4, lr}
   b5860:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5862:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5866:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b586a:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b586c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b586e:	d005      	beq.n	b587c <_ZN9TCPClient4peekEv+0x1e>
   b5870:	6963      	ldr	r3, [r4, #20]
   b5872:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b5876:	4413      	add	r3, r2
   b5878:	7918      	ldrb	r0, [r3, #4]
}
   b587a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b587c:	6803      	ldr	r3, [r0, #0]
   b587e:	691b      	ldr	r3, [r3, #16]
   b5880:	4798      	blx	r3
   b5882:	2800      	cmp	r0, #0
   b5884:	d1f4      	bne.n	b5870 <_ZN9TCPClient4peekEv+0x12>
   b5886:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b588a:	e7f6      	b.n	b587a <_ZN9TCPClient4peekEv+0x1c>

000b588c <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b588c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b588e:	6943      	ldr	r3, [r0, #20]
   b5890:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b5892:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5896:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b589a:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b589c:	4605      	mov	r5, r0
   b589e:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b58a0:	d016      	beq.n	b58d0 <_ZN9TCPClient4readEPhj+0x44>
   b58a2:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b58a4:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b58a8:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b58ac:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b58ae:	42bc      	cmp	r4, r7
   b58b0:	bf28      	it	cs
   b58b2:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b58b4:	3304      	adds	r3, #4
   b58b6:	4622      	mov	r2, r4
   b58b8:	4419      	add	r1, r3
   b58ba:	4630      	mov	r0, r6
   b58bc:	f001 fa59 	bl	b6d72 <memcpy>
   b58c0:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b58c2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b58c6:	4423      	add	r3, r4
   b58c8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b58cc:	4620      	mov	r0, r4
   b58ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b58d0:	6803      	ldr	r3, [r0, #0]
   b58d2:	691b      	ldr	r3, [r3, #16]
   b58d4:	4798      	blx	r3
   b58d6:	2800      	cmp	r0, #0
   b58d8:	d1e3      	bne.n	b58a2 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b58da:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b58de:	e7f5      	b.n	b58cc <_ZN9TCPClient4readEPhj+0x40>

000b58e0 <_ZN9TCPClient12flush_bufferEv>:
   b58e0:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b58e2:	2300      	movs	r3, #0
   b58e4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b58e8:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b58ea:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b58ee:	4770      	bx	lr

000b58f0 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b58f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b58f4:	461f      	mov	r7, r3
    stop();
   b58f6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b58f8:	460c      	mov	r4, r1
    stop();
   b58fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b58fc:	b08a      	sub	sp, #40	; 0x28
   b58fe:	4605      	mov	r5, r0
   b5900:	4616      	mov	r6, r2
    stop();
   b5902:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b5904:	7d23      	ldrb	r3, [r4, #20]
   b5906:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b590a:	2b04      	cmp	r3, #4
   b590c:	bf0c      	ite	eq
   b590e:	2002      	moveq	r0, #2
   b5910:	200a      	movne	r0, #10
   b5912:	2206      	movs	r2, #6
   b5914:	2101      	movs	r1, #1
   b5916:	f7ff fa39 	bl	b4d8c <sock_socket>
   b591a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b591e:	696b      	ldr	r3, [r5, #20]
   b5920:	681b      	ldr	r3, [r3, #0]
   b5922:	2b00      	cmp	r3, #0
   b5924:	da08      	bge.n	b5938 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b5926:	682b      	ldr	r3, [r5, #0]
   b5928:	4628      	mov	r0, r5
   b592a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b592c:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b592e:	4798      	blx	r3
}
   b5930:	4620      	mov	r0, r4
   b5932:	b00a      	add	sp, #40	; 0x28
   b5934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b5938:	4628      	mov	r0, r5
   b593a:	f7ff ffd1 	bl	b58e0 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b593e:	b1b7      	cbz	r7, b596e <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b5940:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5942:	a903      	add	r1, sp, #12
   b5944:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b5946:	9303      	str	r3, [sp, #12]
   b5948:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b594c:	f7ff f9c6 	bl	b4cdc <if_index_to_name>
   b5950:	2800      	cmp	r0, #0
   b5952:	d1e8      	bne.n	b5926 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b5954:	6968      	ldr	r0, [r5, #20]
   b5956:	2306      	movs	r3, #6
   b5958:	9300      	str	r3, [sp, #0]
   b595a:	6800      	ldr	r0, [r0, #0]
   b595c:	ab03      	add	r3, sp, #12
   b595e:	f241 020b 	movw	r2, #4107	; 0x100b
   b5962:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5966:	f7ff f9e9 	bl	b4d3c <sock_setsockopt>
   b596a:	2800      	cmp	r0, #0
   b596c:	d1db      	bne.n	b5926 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b596e:	221c      	movs	r2, #28
   b5970:	2100      	movs	r1, #0
   b5972:	a803      	add	r0, sp, #12
   b5974:	f001 fa25 	bl	b6dc2 <memset>
    if (ip.version() == 4) {
   b5978:	7d23      	ldrb	r3, [r4, #20]
   b597a:	2b04      	cmp	r3, #4
   b597c:	d11d      	bne.n	b59ba <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b597e:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b5982:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b5984:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b5988:	f7ff f9c0 	bl	b4d0c <inet_htons>
   b598c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b5990:	6860      	ldr	r0, [r4, #4]
   b5992:	f7ff f9b3 	bl	b4cfc <inet_htonl>
   b5996:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b5998:	696b      	ldr	r3, [r5, #20]
   b599a:	221c      	movs	r2, #28
   b599c:	6818      	ldr	r0, [r3, #0]
   b599e:	a903      	add	r1, sp, #12
   b59a0:	f7ff f9dc 	bl	b4d5c <sock_connect>
   b59a4:	2800      	cmp	r0, #0
   b59a6:	d1be      	bne.n	b5926 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b59a8:	3404      	adds	r4, #4
   b59aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b59ac:	696d      	ldr	r5, [r5, #20]
   b59ae:	358c      	adds	r5, #140	; 0x8c
   b59b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b59b2:	6823      	ldr	r3, [r4, #0]
   b59b4:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b59b6:	2401      	movs	r4, #1
   b59b8:	e7ba      	b.n	b5930 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b59ba:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b59be:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b59c0:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b59c4:	f7ff f9a2 	bl	b4d0c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b59c8:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b59ca:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b59ce:	1d23      	adds	r3, r4, #4
   b59d0:	f104 0714 	add.w	r7, r4, #20
   b59d4:	6818      	ldr	r0, [r3, #0]
   b59d6:	6859      	ldr	r1, [r3, #4]
   b59d8:	4632      	mov	r2, r6
   b59da:	c203      	stmia	r2!, {r0, r1}
   b59dc:	3308      	adds	r3, #8
   b59de:	42bb      	cmp	r3, r7
   b59e0:	4616      	mov	r6, r2
   b59e2:	d1f7      	bne.n	b59d4 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b59e4:	e7d8      	b.n	b5998 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b59e8 <_ZN9TCPClient9availableEv>:
{
   b59e8:	b530      	push	{r4, r5, lr}
   b59ea:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b59ec:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b59f0:	b08b      	sub	sp, #44	; 0x2c
   b59f2:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b59f4:	b12b      	cbz	r3, b5a02 <_ZN9TCPClient9availableEv+0x1a>
   b59f6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b59fa:	429a      	cmp	r2, r3
   b59fc:	d101      	bne.n	b5a02 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b59fe:	f7ff ff6f 	bl	b58e0 <_ZN9TCPClient12flush_bufferEv>
   b5a02:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b5a04:	6808      	ldr	r0, [r1, #0]
   b5a06:	2800      	cmp	r0, #0
   b5a08:	db18      	blt.n	b5a3c <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b5a0a:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b5a0e:	2d7f      	cmp	r5, #127	; 0x7f
   b5a10:	d814      	bhi.n	b5a3c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b5a12:	3104      	adds	r1, #4
   b5a14:	2308      	movs	r3, #8
   b5a16:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b5a1a:	4429      	add	r1, r5
   b5a1c:	f7ff f9a6 	bl	b4d6c <sock_recv>
            if (ret > 0) {
   b5a20:	2800      	cmp	r0, #0
   b5a22:	dd13      	ble.n	b5a4c <_ZN9TCPClient9availableEv+0x64>
   b5a24:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b5a26:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5a2a:	b90a      	cbnz	r2, b5a30 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b5a2c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b5a30:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b5a32:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5a36:	4410      	add	r0, r2
   b5a38:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b5a3c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b5a3e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b5a42:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b5a46:	1ac0      	subs	r0, r0, r3
   b5a48:	b00b      	add	sp, #44	; 0x2c
   b5a4a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b5a4c:	f7ff faea 	bl	b5024 <__errno>
   b5a50:	6803      	ldr	r3, [r0, #0]
   b5a52:	2b0b      	cmp	r3, #11
   b5a54:	d0f2      	beq.n	b5a3c <_ZN9TCPClient9availableEv+0x54>
   b5a56:	f7ff fae5 	bl	b5024 <__errno>
   b5a5a:	6803      	ldr	r3, [r0, #0]
   b5a5c:	2b0b      	cmp	r3, #11
   b5a5e:	d0ed      	beq.n	b5a3c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b5a60:	2320      	movs	r3, #32
   b5a62:	2500      	movs	r5, #0
   b5a64:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b5a68:	f7ff fadc 	bl	b5024 <__errno>
   b5a6c:	6803      	ldr	r3, [r0, #0]
   b5a6e:	9301      	str	r3, [sp, #4]
   b5a70:	4b08      	ldr	r3, [pc, #32]	; (b5a94 <_ZN9TCPClient9availableEv+0xac>)
   b5a72:	4909      	ldr	r1, [pc, #36]	; (b5a98 <_ZN9TCPClient9availableEv+0xb0>)
   b5a74:	9300      	str	r3, [sp, #0]
   b5a76:	aa02      	add	r2, sp, #8
   b5a78:	462b      	mov	r3, r5
   b5a7a:	2032      	movs	r0, #50	; 0x32
   b5a7c:	f7ff fa1e 	bl	b4ebc <log_message>
                    sock_close(d_->sock);
   b5a80:	6963      	ldr	r3, [r4, #20]
   b5a82:	6818      	ldr	r0, [r3, #0]
   b5a84:	f7ff f962 	bl	b4d4c <sock_close>
   b5a88:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b5a8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5a8e:	601a      	str	r2, [r3, #0]
   b5a90:	e7d4      	b.n	b5a3c <_ZN9TCPClient9availableEv+0x54>
   b5a92:	bf00      	nop
   b5a94:	000b91e3 	.word	0x000b91e3
   b5a98:	000b91dc 	.word	0x000b91dc

000b5a9c <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b5a9c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b5a9e:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b5aa0:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b5aa2:	6818      	ldr	r0, [r3, #0]
   b5aa4:	2800      	cmp	r0, #0
   b5aa6:	db01      	blt.n	b5aac <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b5aa8:	f7ff f950 	bl	b4d4c <sock_close>
   b5aac:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b5aae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5ab2:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b5ab4:	6960      	ldr	r0, [r4, #20]
   b5ab6:	2211      	movs	r2, #17
   b5ab8:	2100      	movs	r1, #0
   b5aba:	308c      	adds	r0, #140	; 0x8c
   b5abc:	f001 f981 	bl	b6dc2 <memset>
    flush_buffer();
   b5ac0:	4620      	mov	r0, r4
}
   b5ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b5ac6:	f7ff bf0b 	b.w	b58e0 <_ZN9TCPClient12flush_bufferEv>

000b5aca <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b5aca:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b5acc:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b5ace:	4604      	mov	r4, r0
          total(0) {
   b5ad0:	6001      	str	r1, [r0, #0]
   b5ad2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b5ad6:	3088      	adds	r0, #136	; 0x88
   b5ad8:	f7ff fb8a 	bl	b51f0 <_ZN9IPAddressC1Ev>
}
   b5adc:	4620      	mov	r0, r4
   b5ade:	bd10      	pop	{r4, pc}

000b5ae0 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b5ae0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5ae2:	2300      	movs	r3, #0
   b5ae4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5ae8:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b5aec:	4a0e      	ldr	r2, [pc, #56]	; (b5b28 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b5aee:	6103      	str	r3, [r0, #16]
   b5af0:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5af2:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b5af4:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5af6:	20ac      	movs	r0, #172	; 0xac
   b5af8:	9101      	str	r1, [sp, #4]
   b5afa:	f7fe facc 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b5afe:	1e05      	subs	r5, r0, #0
   b5b00:	f105 060c 	add.w	r6, r5, #12
   b5b04:	d008      	beq.n	b5b18 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b5b06:	2301      	movs	r3, #1
   b5b08:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b5b0c:	4b07      	ldr	r3, [pc, #28]	; (b5b2c <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5b0e:	9901      	ldr	r1, [sp, #4]
   b5b10:	602b      	str	r3, [r5, #0]
   b5b12:	4630      	mov	r0, r6
   b5b14:	f7ff ffd9 	bl	b5aca <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b5b18:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b5b1a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b5b1e:	f7ff fedf 	bl	b58e0 <_ZN9TCPClient12flush_bufferEv>
}
   b5b22:	b002      	add	sp, #8
   b5b24:	bd70      	pop	{r4, r5, r6, pc}
   b5b26:	bf00      	nop
   b5b28:	000b9218 	.word	0x000b9218
   b5b2c:	000b91fc 	.word	0x000b91fc

000b5b30 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b5b30:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b5b32:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b5b36:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b5b38:	f7ff ffd2 	bl	b5ae0 <_ZN9TCPClientC1Ei>
}
   b5b3c:	4620      	mov	r0, r4
   b5b3e:	bd10      	pop	{r4, pc}

000b5b40 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b5b40:	b510      	push	{r4, lr}
   b5b42:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b5b44:	6800      	ldr	r0, [r0, #0]
   b5b46:	2800      	cmp	r0, #0
   b5b48:	db01      	blt.n	b5b4e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b5b4a:	f7ff f8ff 	bl	b4d4c <sock_close>
    }
}
   b5b4e:	4620      	mov	r0, r4
   b5b50:	bd10      	pop	{r4, pc}

000b5b52 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b5b52:	300c      	adds	r0, #12
   b5b54:	f7ff bff4 	b.w	b5b40 <_ZN9TCPClient4DataD1Ev>

000b5b58 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5b58:	4b02      	ldr	r3, [pc, #8]	; (b5b64 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5b5a:	681a      	ldr	r2, [r3, #0]
   b5b5c:	4b02      	ldr	r3, [pc, #8]	; (b5b68 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5b5e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5b60:	4770      	bx	lr
   b5b62:	bf00      	nop
   b5b64:	2003e358 	.word	0x2003e358
   b5b68:	2003e6f0 	.word	0x2003e6f0

000b5b6c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5b6c:	4770      	bx	lr

000b5b6e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5b6e:	7441      	strb	r1, [r0, #17]
}
   b5b70:	4770      	bx	lr

000b5b72 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5b72:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5b74:	7c00      	ldrb	r0, [r0, #16]
   b5b76:	f7ff f951 	bl	b4e1c <hal_usart_available_data_for_write>
}
   b5b7a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5b7e:	bd08      	pop	{r3, pc}

000b5b80 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5b80:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5b82:	7c00      	ldrb	r0, [r0, #16]
   b5b84:	f7ff f922 	bl	b4dcc <hal_usart_available>
}
   b5b88:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5b8c:	bd08      	pop	{r3, pc}

000b5b8e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5b8e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5b90:	7c00      	ldrb	r0, [r0, #16]
   b5b92:	f7ff f92b 	bl	b4dec <hal_usart_peek>
}
   b5b96:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5b9a:	bd08      	pop	{r3, pc}

000b5b9c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5b9c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5b9e:	7c00      	ldrb	r0, [r0, #16]
   b5ba0:	f7ff f91c 	bl	b4ddc <hal_usart_read>
}
   b5ba4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5ba8:	bd08      	pop	{r3, pc}

000b5baa <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5baa:	7c00      	ldrb	r0, [r0, #16]
   b5bac:	f7ff b926 	b.w	b4dfc <hal_usart_flush>

000b5bb0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5bb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5bb2:	7c45      	ldrb	r5, [r0, #17]
{
   b5bb4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5bb6:	b12d      	cbz	r5, b5bc4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5bb8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5bba:	b003      	add	sp, #12
   b5bbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5bc0:	f7ff b8fc 	b.w	b4dbc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5bc4:	7c00      	ldrb	r0, [r0, #16]
   b5bc6:	9101      	str	r1, [sp, #4]
   b5bc8:	f7ff f928 	bl	b4e1c <hal_usart_available_data_for_write>
   b5bcc:	2800      	cmp	r0, #0
   b5bce:	9901      	ldr	r1, [sp, #4]
   b5bd0:	dcf2      	bgt.n	b5bb8 <_ZN11USARTSerial5writeEh+0x8>
}
   b5bd2:	4628      	mov	r0, r5
   b5bd4:	b003      	add	sp, #12
   b5bd6:	bd30      	pop	{r4, r5, pc}

000b5bd8 <_ZN11USARTSerialD0Ev>:
   b5bd8:	b510      	push	{r4, lr}
   b5bda:	2114      	movs	r1, #20
   b5bdc:	4604      	mov	r4, r0
   b5bde:	f7fe fa5e 	bl	b409e <_ZdlPvj>
   b5be2:	4620      	mov	r0, r4
   b5be4:	bd10      	pop	{r4, pc}
	...

000b5be8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5be8:	b510      	push	{r4, lr}
   b5bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5bee:	4604      	mov	r4, r0
   b5bf0:	4608      	mov	r0, r1
   b5bf2:	4611      	mov	r1, r2
   b5bf4:	2200      	movs	r2, #0
   b5bf6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5bfa:	4b04      	ldr	r3, [pc, #16]	; (b5c0c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5bfc:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5bfe:	2301      	movs	r3, #1
  _serial = serial;
   b5c00:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5c02:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5c04:	f7ff f912 	bl	b4e2c <hal_usart_init_ex>
}
   b5c08:	4620      	mov	r0, r4
   b5c0a:	bd10      	pop	{r4, pc}
   b5c0c:	000b9280 	.word	0x000b9280

000b5c10 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5c10:	7441      	strb	r1, [r0, #17]
}
   b5c12:	4770      	bx	lr

000b5c14 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5c14:	4770      	bx	lr

000b5c16 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5c16:	4770      	bx	lr

000b5c18 <_ZN9USBSerial4readEv>:
{
   b5c18:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5c1a:	2100      	movs	r1, #0
   b5c1c:	7c00      	ldrb	r0, [r0, #16]
   b5c1e:	f7ff f92d 	bl	b4e7c <HAL_USB_USART_Receive_Data>
}
   b5c22:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5c26:	bd08      	pop	{r3, pc}

000b5c28 <_ZN9USBSerial4peekEv>:
{
   b5c28:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5c2a:	2101      	movs	r1, #1
   b5c2c:	7c00      	ldrb	r0, [r0, #16]
   b5c2e:	f7ff f925 	bl	b4e7c <HAL_USB_USART_Receive_Data>
}
   b5c32:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5c36:	bd08      	pop	{r3, pc}

000b5c38 <_ZN9USBSerial17availableForWriteEv>:
{
   b5c38:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5c3a:	7c00      	ldrb	r0, [r0, #16]
   b5c3c:	f7ff f916 	bl	b4e6c <HAL_USB_USART_Available_Data_For_Write>
}
   b5c40:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5c44:	bd08      	pop	{r3, pc}

000b5c46 <_ZN9USBSerial9availableEv>:
{
   b5c46:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5c48:	7c00      	ldrb	r0, [r0, #16]
   b5c4a:	f7ff f907 	bl	b4e5c <HAL_USB_USART_Available_Data>
}
   b5c4e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5c52:	bd08      	pop	{r3, pc}

000b5c54 <_ZN9USBSerial5writeEh>:
{
   b5c54:	b513      	push	{r0, r1, r4, lr}
   b5c56:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5c58:	7c00      	ldrb	r0, [r0, #16]
{
   b5c5a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5c5c:	f7ff f906 	bl	b4e6c <HAL_USB_USART_Available_Data_For_Write>
   b5c60:	2800      	cmp	r0, #0
   b5c62:	9901      	ldr	r1, [sp, #4]
   b5c64:	dc01      	bgt.n	b5c6a <_ZN9USBSerial5writeEh+0x16>
   b5c66:	7c60      	ldrb	r0, [r4, #17]
   b5c68:	b120      	cbz	r0, b5c74 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5c6a:	7c20      	ldrb	r0, [r4, #16]
   b5c6c:	f7ff f90e 	bl	b4e8c <HAL_USB_USART_Send_Data>
   b5c70:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5c74:	b002      	add	sp, #8
   b5c76:	bd10      	pop	{r4, pc}

000b5c78 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5c78:	7c00      	ldrb	r0, [r0, #16]
   b5c7a:	f7ff b90f 	b.w	b4e9c <HAL_USB_USART_Flush_Data>

000b5c7e <_ZN9USBSerialD0Ev>:
   b5c7e:	b510      	push	{r4, lr}
   b5c80:	2114      	movs	r1, #20
   b5c82:	4604      	mov	r4, r0
   b5c84:	f7fe fa0b 	bl	b409e <_ZdlPvj>
   b5c88:	4620      	mov	r0, r4
   b5c8a:	bd10      	pop	{r4, pc}

000b5c8c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5c8c:	b510      	push	{r4, lr}
   b5c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5c92:	4604      	mov	r4, r0
   b5c94:	4608      	mov	r0, r1
   b5c96:	2100      	movs	r1, #0
   b5c98:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5c9c:	4b04      	ldr	r3, [pc, #16]	; (b5cb0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5c9e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5ca0:	2301      	movs	r3, #1
  _serial = serial;
   b5ca2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5ca4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5ca6:	4611      	mov	r1, r2
   b5ca8:	f7ff f8c8 	bl	b4e3c <HAL_USB_USART_Init>
}
   b5cac:	4620      	mov	r0, r4
   b5cae:	bd10      	pop	{r4, pc}
   b5cb0:	000b92b0 	.word	0x000b92b0

000b5cb4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5cb4:	7c00      	ldrb	r0, [r0, #16]
   b5cb6:	2200      	movs	r2, #0
   b5cb8:	f7ff b8c8 	b.w	b4e4c <HAL_USB_USART_Begin>

000b5cbc <_Z19acquireSerialBufferv>:
{
   b5cbc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5cbe:	2214      	movs	r2, #20
{
   b5cc0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5cc2:	2100      	movs	r1, #0
   b5cc4:	f001 f87d 	bl	b6dc2 <memset>
}
   b5cc8:	4620      	mov	r0, r4
   b5cca:	bd10      	pop	{r4, pc}

000b5ccc <_Z16_fetch_usbserialv>:
{
   b5ccc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5cce:	4c0f      	ldr	r4, [pc, #60]	; (b5d0c <_Z16_fetch_usbserialv+0x40>)
{
   b5cd0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5cd2:	a803      	add	r0, sp, #12
   b5cd4:	f7ff fff2 	bl	b5cbc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5cd8:	7821      	ldrb	r1, [r4, #0]
   b5cda:	f3bf 8f5b 	dmb	ish
   b5cde:	f011 0101 	ands.w	r1, r1, #1
   b5ce2:	d10f      	bne.n	b5d04 <_Z16_fetch_usbserialv+0x38>
   b5ce4:	4620      	mov	r0, r4
   b5ce6:	9101      	str	r1, [sp, #4]
   b5ce8:	f7fe f9e6 	bl	b40b8 <__cxa_guard_acquire>
   b5cec:	9901      	ldr	r1, [sp, #4]
   b5cee:	b148      	cbz	r0, b5d04 <_Z16_fetch_usbserialv+0x38>
   b5cf0:	aa03      	add	r2, sp, #12
   b5cf2:	4807      	ldr	r0, [pc, #28]	; (b5d10 <_Z16_fetch_usbserialv+0x44>)
   b5cf4:	f7ff ffca 	bl	b5c8c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5cf8:	4620      	mov	r0, r4
   b5cfa:	f7fe f9e2 	bl	b40c2 <__cxa_guard_release>
   b5cfe:	4805      	ldr	r0, [pc, #20]	; (b5d14 <_Z16_fetch_usbserialv+0x48>)
   b5d00:	f001 f81a 	bl	b6d38 <atexit>
	return _usbserial;
}
   b5d04:	4802      	ldr	r0, [pc, #8]	; (b5d10 <_Z16_fetch_usbserialv+0x44>)
   b5d06:	b008      	add	sp, #32
   b5d08:	bd10      	pop	{r4, pc}
   b5d0a:	bf00      	nop
   b5d0c:	2003e6f4 	.word	0x2003e6f4
   b5d10:	2003e6f8 	.word	0x2003e6f8
   b5d14:	000b5c15 	.word	0x000b5c15

000b5d18 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5d18:	2200      	movs	r2, #0
   b5d1a:	6840      	ldr	r0, [r0, #4]
   b5d1c:	4611      	mov	r1, r2
   b5d1e:	f7ff b919 	b.w	b4f54 <network_ready>

000b5d22 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5d22:	2200      	movs	r2, #0
   b5d24:	6840      	ldr	r0, [r0, #4]
   b5d26:	4611      	mov	r1, r2
   b5d28:	f7ff b934 	b.w	b4f94 <network_listening>

000b5d2c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5d2c:	2200      	movs	r2, #0
   b5d2e:	6840      	ldr	r0, [r0, #4]
   b5d30:	4611      	mov	r1, r2
   b5d32:	f7ff b93f 	b.w	b4fb4 <network_get_listen_timeout>

000b5d36 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5d36:	6840      	ldr	r0, [r0, #4]
   b5d38:	2200      	movs	r2, #0
   b5d3a:	f7ff b933 	b.w	b4fa4 <network_set_listen_timeout>

000b5d3e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5d3e:	6840      	ldr	r0, [r0, #4]
   b5d40:	2200      	movs	r2, #0
   b5d42:	f081 0101 	eor.w	r1, r1, #1
   b5d46:	f7ff b91d 	b.w	b4f84 <network_listen>

000b5d4a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5d4a:	2300      	movs	r3, #0
   b5d4c:	6840      	ldr	r0, [r0, #4]
   b5d4e:	461a      	mov	r2, r3
   b5d50:	4619      	mov	r1, r3
   b5d52:	f7ff b90f 	b.w	b4f74 <network_off>

000b5d56 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5d56:	2300      	movs	r3, #0
   b5d58:	6840      	ldr	r0, [r0, #4]
   b5d5a:	461a      	mov	r2, r3
   b5d5c:	4619      	mov	r1, r3
   b5d5e:	f7ff b901 	b.w	b4f64 <network_on>

000b5d62 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5d62:	2200      	movs	r2, #0
   b5d64:	6840      	ldr	r0, [r0, #4]
   b5d66:	4611      	mov	r1, r2
   b5d68:	f7ff b8e4 	b.w	b4f34 <network_connecting>

000b5d6c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5d6c:	6840      	ldr	r0, [r0, #4]
   b5d6e:	2200      	movs	r2, #0
   b5d70:	2102      	movs	r1, #2
   b5d72:	f7ff b8e7 	b.w	b4f44 <network_disconnect>

000b5d76 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5d76:	2300      	movs	r3, #0
   b5d78:	6840      	ldr	r0, [r0, #4]
   b5d7a:	461a      	mov	r2, r3
   b5d7c:	f7ff b8d2 	b.w	b4f24 <network_connect>

000b5d80 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5d80:	4b02      	ldr	r3, [pc, #8]	; (b5d8c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5d82:	2204      	movs	r2, #4
   b5d84:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5d86:	4a02      	ldr	r2, [pc, #8]	; (b5d90 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5d88:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5d8a:	4770      	bx	lr
   b5d8c:	2003e70c 	.word	0x2003e70c
   b5d90:	000b92e0 	.word	0x000b92e0

000b5d94 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b5d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b5d98:	1e93      	subs	r3, r2, #2
{
   b5d9a:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b5d9c:	2b22      	cmp	r3, #34	; 0x22
   b5d9e:	f04f 0300 	mov.w	r3, #0
{
   b5da2:	460d      	mov	r5, r1
   b5da4:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b5da6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b5daa:	d927      	bls.n	b5dfc <ltoa+0x68>

      if (10 == base && N < 0L)
   b5dac:	2800      	cmp	r0, #0
   b5dae:	da2a      	bge.n	b5e06 <ltoa+0x72>
      {
            *head++ = '-';
   b5db0:	462e      	mov	r6, r5
   b5db2:	232d      	movs	r3, #45	; 0x2d
   b5db4:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b5db8:	4240      	negs	r0, r0
   b5dba:	240a      	movs	r4, #10
      *tail-- = '\0';
   b5dbc:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b5dc0:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b5dc4:	4622      	mov	r2, r4
   b5dc6:	4601      	mov	r1, r0
   b5dc8:	a801      	add	r0, sp, #4
   b5dca:	f000 ffbe 	bl	b6d4a <ldiv>
   b5dce:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b5dd0:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b5dd2:	2b09      	cmp	r3, #9
   b5dd4:	bfcc      	ite	gt
   b5dd6:	2237      	movgt	r2, #55	; 0x37
   b5dd8:	2230      	movle	r2, #48	; 0x30
   b5dda:	fa52 f383 	uxtab	r3, r2, r3
   b5dde:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b5de2:	f108 0801 	add.w	r8, r8, #1
   b5de6:	2800      	cmp	r0, #0
   b5de8:	d1ec      	bne.n	b5dc4 <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b5dea:	4642      	mov	r2, r8
   b5dec:	1c79      	adds	r1, r7, #1
   b5dee:	4630      	mov	r0, r6
   b5df0:	f000 ffbf 	bl	b6d72 <memcpy>
      return str;
}
   b5df4:	4628      	mov	r0, r5
   b5df6:	b00c      	add	sp, #48	; 0x30
   b5df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b5dfc:	2a0a      	cmp	r2, #10
   b5dfe:	d0d5      	beq.n	b5dac <ltoa+0x18>
      if (uarg)
   b5e00:	b118      	cbz	r0, b5e0a <ltoa+0x76>
   b5e02:	462e      	mov	r6, r5
   b5e04:	e7da      	b.n	b5dbc <ltoa+0x28>
   b5e06:	240a      	movs	r4, #10
   b5e08:	e7fa      	b.n	b5e00 <ltoa+0x6c>
      else  *tail-- = '0';
   b5e0a:	2330      	movs	r3, #48	; 0x30
   b5e0c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b5e10:	462e      	mov	r6, r5
   b5e12:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b5e16:	f04f 0802 	mov.w	r8, #2
   b5e1a:	e7e6      	b.n	b5dea <ltoa+0x56>

000b5e1c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5e1c:	4b01      	ldr	r3, [pc, #4]	; (b5e24 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5e1e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5e20:	4770      	bx	lr
   b5e22:	bf00      	nop
   b5e24:	2003e35c 	.word	0x2003e35c

000b5e28 <serialEventRun>:
{
   b5e28:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5e2a:	4b0b      	ldr	r3, [pc, #44]	; (b5e58 <serialEventRun+0x30>)
   b5e2c:	b143      	cbz	r3, b5e40 <serialEventRun+0x18>
   b5e2e:	f7ff ff4d 	bl	b5ccc <_Z16_fetch_usbserialv>
   b5e32:	6803      	ldr	r3, [r0, #0]
   b5e34:	691b      	ldr	r3, [r3, #16]
   b5e36:	4798      	blx	r3
   b5e38:	2800      	cmp	r0, #0
   b5e3a:	dd01      	ble.n	b5e40 <serialEventRun+0x18>
        serialEvent();
   b5e3c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5e40:	4b06      	ldr	r3, [pc, #24]	; (b5e5c <serialEventRun+0x34>)
   b5e42:	b143      	cbz	r3, b5e56 <serialEventRun+0x2e>
   b5e44:	f000 f984 	bl	b6150 <_Z22__fetch_global_Serial1v>
   b5e48:	6803      	ldr	r3, [r0, #0]
   b5e4a:	691b      	ldr	r3, [r3, #16]
   b5e4c:	4798      	blx	r3
   b5e4e:	2800      	cmp	r0, #0
   b5e50:	dd01      	ble.n	b5e56 <serialEventRun+0x2e>
        serialEvent1();
   b5e52:	f3af 8000 	nop.w
}
   b5e56:	bd08      	pop	{r3, pc}
	...

000b5e60 <_post_loop>:
{
   b5e60:	b508      	push	{r3, lr}
	serialEventRun();
   b5e62:	f7ff ffe1 	bl	b5e28 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5e66:	f7fe feb9 	bl	b4bdc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5e6a:	4b01      	ldr	r3, [pc, #4]	; (b5e70 <_post_loop+0x10>)
   b5e6c:	6018      	str	r0, [r3, #0]
}
   b5e6e:	bd08      	pop	{r3, pc}
   b5e70:	2003e728 	.word	0x2003e728

000b5e74 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5e74:	4805      	ldr	r0, [pc, #20]	; (b5e8c <_Z33system_initialize_user_backup_ramv+0x18>)
   b5e76:	4a06      	ldr	r2, [pc, #24]	; (b5e90 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5e78:	4906      	ldr	r1, [pc, #24]	; (b5e94 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5e7a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5e7c:	1a12      	subs	r2, r2, r0
   b5e7e:	f000 ff78 	bl	b6d72 <memcpy>
    __backup_sram_signature = signature;
   b5e82:	4b05      	ldr	r3, [pc, #20]	; (b5e98 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5e84:	4a05      	ldr	r2, [pc, #20]	; (b5e9c <_Z33system_initialize_user_backup_ramv+0x28>)
   b5e86:	601a      	str	r2, [r3, #0]
}
   b5e88:	bd08      	pop	{r3, pc}
   b5e8a:	bf00      	nop
   b5e8c:	2003f400 	.word	0x2003f400
   b5e90:	2003f404 	.word	0x2003f404
   b5e94:	000b97e0 	.word	0x000b97e0
   b5e98:	2003f400 	.word	0x2003f400
   b5e9c:	9a271c1e 	.word	0x9a271c1e

000b5ea0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5ea0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5ea2:	2300      	movs	r3, #0
   b5ea4:	9300      	str	r3, [sp, #0]
   b5ea6:	461a      	mov	r2, r3
   b5ea8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5eac:	f7ff f828 	bl	b4f00 <system_ctrl_set_result>
}
   b5eb0:	b003      	add	sp, #12
   b5eb2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5eb8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5eb8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5eba:	8843      	ldrh	r3, [r0, #2]
   b5ebc:	2b0a      	cmp	r3, #10
   b5ebe:	d008      	beq.n	b5ed2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5ec0:	2b50      	cmp	r3, #80	; 0x50
   b5ec2:	d10b      	bne.n	b5edc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5ec4:	4b09      	ldr	r3, [pc, #36]	; (b5eec <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5ec6:	681b      	ldr	r3, [r3, #0]
   b5ec8:	b14b      	cbz	r3, b5ede <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5eca:	b003      	add	sp, #12
   b5ecc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5ed0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5ed2:	f7ff ffe5 	bl	b5ea0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5ed6:	b003      	add	sp, #12
   b5ed8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5edc:	2300      	movs	r3, #0
   b5ede:	9300      	str	r3, [sp, #0]
   b5ee0:	461a      	mov	r2, r3
   b5ee2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5ee6:	f7ff f80b 	bl	b4f00 <system_ctrl_set_result>
}
   b5eea:	e7f4      	b.n	b5ed6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5eec:	2003e718 	.word	0x2003e718

000b5ef0 <module_user_init_hook>:
{
   b5ef0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5ef2:	4812      	ldr	r0, [pc, #72]	; (b5f3c <module_user_init_hook+0x4c>)
   b5ef4:	2100      	movs	r1, #0
   b5ef6:	f7ff f8a5 	bl	b5044 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5efa:	4b11      	ldr	r3, [pc, #68]	; (b5f40 <module_user_init_hook+0x50>)
   b5efc:	681a      	ldr	r2, [r3, #0]
   b5efe:	4b11      	ldr	r3, [pc, #68]	; (b5f44 <module_user_init_hook+0x54>)
   b5f00:	429a      	cmp	r2, r3
   b5f02:	4b11      	ldr	r3, [pc, #68]	; (b5f48 <module_user_init_hook+0x58>)
   b5f04:	bf0c      	ite	eq
   b5f06:	2201      	moveq	r2, #1
   b5f08:	2200      	movne	r2, #0
   b5f0a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5f0c:	d001      	beq.n	b5f12 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5f0e:	f7ff ffb1 	bl	b5e74 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5f12:	f7fe fe53 	bl	b4bbc <HAL_RNG_GetRandomNumber>
   b5f16:	4604      	mov	r4, r0
    srand(seed);
   b5f18:	f000 ff5c 	bl	b6dd4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5f1c:	4b0b      	ldr	r3, [pc, #44]	; (b5f4c <module_user_init_hook+0x5c>)
   b5f1e:	b113      	cbz	r3, b5f26 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5f20:	4620      	mov	r0, r4
   b5f22:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5f26:	2100      	movs	r1, #0
   b5f28:	4808      	ldr	r0, [pc, #32]	; (b5f4c <module_user_init_hook+0x5c>)
   b5f2a:	f7fe fff3 	bl	b4f14 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5f2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5f32:	4807      	ldr	r0, [pc, #28]	; (b5f50 <module_user_init_hook+0x60>)
   b5f34:	2100      	movs	r1, #0
   b5f36:	f7fe bfd9 	b.w	b4eec <system_ctrl_set_app_request_handler>
   b5f3a:	bf00      	nop
   b5f3c:	000b5e1d 	.word	0x000b5e1d
   b5f40:	2003f400 	.word	0x2003f400
   b5f44:	9a271c1e 	.word	0x9a271c1e
   b5f48:	2003e714 	.word	0x2003e714
   b5f4c:	00000000 	.word	0x00000000
   b5f50:	000b5eb9 	.word	0x000b5eb9

000b5f54 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5f54:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b5f56:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5f58:	d902      	bls.n	b5f60 <pinAvailable+0xc>
    return false;
   b5f5a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5f5c:	b002      	add	sp, #8
   b5f5e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5f60:	f1a0 030b 	sub.w	r3, r0, #11
   b5f64:	2b02      	cmp	r3, #2
   b5f66:	d81a      	bhi.n	b5f9e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5f68:	4c17      	ldr	r4, [pc, #92]	; (b5fc8 <pinAvailable+0x74>)
   b5f6a:	7821      	ldrb	r1, [r4, #0]
   b5f6c:	f3bf 8f5b 	dmb	ish
   b5f70:	f011 0101 	ands.w	r1, r1, #1
   b5f74:	d10b      	bne.n	b5f8e <pinAvailable+0x3a>
   b5f76:	4620      	mov	r0, r4
   b5f78:	9101      	str	r1, [sp, #4]
   b5f7a:	f7fe f89d 	bl	b40b8 <__cxa_guard_acquire>
   b5f7e:	9901      	ldr	r1, [sp, #4]
   b5f80:	b128      	cbz	r0, b5f8e <pinAvailable+0x3a>
   b5f82:	4812      	ldr	r0, [pc, #72]	; (b5fcc <pinAvailable+0x78>)
   b5f84:	f7ff fadc 	bl	b5540 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5f88:	4620      	mov	r0, r4
   b5f8a:	f7fe f89a 	bl	b40c2 <__cxa_guard_release>
   b5f8e:	4b0f      	ldr	r3, [pc, #60]	; (b5fcc <pinAvailable+0x78>)
   b5f90:	7818      	ldrb	r0, [r3, #0]
   b5f92:	f7fe ff0b 	bl	b4dac <hal_spi_is_enabled>
   b5f96:	2800      	cmp	r0, #0
   b5f98:	d1df      	bne.n	b5f5a <pinAvailable+0x6>
  return true; // 'pin' is available
   b5f9a:	2001      	movs	r0, #1
   b5f9c:	e7de      	b.n	b5f5c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5f9e:	2801      	cmp	r0, #1
   b5fa0:	d809      	bhi.n	b5fb6 <pinAvailable+0x62>
   b5fa2:	f000 f895 	bl	b60d0 <_Z19__fetch_global_Wirev>
   b5fa6:	2100      	movs	r1, #0
   b5fa8:	7c00      	ldrb	r0, [r0, #16]
   b5faa:	f7fe fe87 	bl	b4cbc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5fae:	f080 0001 	eor.w	r0, r0, #1
   b5fb2:	b2c0      	uxtb	r0, r0
   b5fb4:	e7d2      	b.n	b5f5c <pinAvailable+0x8>
   b5fb6:	3809      	subs	r0, #9
   b5fb8:	2801      	cmp	r0, #1
   b5fba:	d8ee      	bhi.n	b5f9a <pinAvailable+0x46>
   b5fbc:	f000 f8c8 	bl	b6150 <_Z22__fetch_global_Serial1v>
   b5fc0:	7c00      	ldrb	r0, [r0, #16]
   b5fc2:	f7fe ff23 	bl	b4e0c <hal_usart_is_enabled>
   b5fc6:	e7f2      	b.n	b5fae <pinAvailable+0x5a>
   b5fc8:	2003e71c 	.word	0x2003e71c
   b5fcc:	2003e720 	.word	0x2003e720

000b5fd0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5fd0:	2823      	cmp	r0, #35	; 0x23
{
   b5fd2:	b538      	push	{r3, r4, r5, lr}
   b5fd4:	4604      	mov	r4, r0
   b5fd6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5fd8:	d80a      	bhi.n	b5ff0 <pinMode+0x20>
   b5fda:	29ff      	cmp	r1, #255	; 0xff
   b5fdc:	d008      	beq.n	b5ff0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5fde:	f7ff ffb9 	bl	b5f54 <pinAvailable>
   b5fe2:	b128      	cbz	r0, b5ff0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b5fe4:	4629      	mov	r1, r5
   b5fe6:	4620      	mov	r0, r4
}
   b5fe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b5fec:	f7fe be06 	b.w	b4bfc <HAL_Pin_Mode>
}
   b5ff0:	bd38      	pop	{r3, r4, r5, pc}

000b5ff2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b5ff2:	b538      	push	{r3, r4, r5, lr}
   b5ff4:	4604      	mov	r4, r0
   b5ff6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b5ff8:	f7fe fe08 	bl	b4c0c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b5ffc:	28ff      	cmp	r0, #255	; 0xff
   b5ffe:	d010      	beq.n	b6022 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b6000:	2806      	cmp	r0, #6
   b6002:	d804      	bhi.n	b600e <digitalWrite+0x1c>
   b6004:	234d      	movs	r3, #77	; 0x4d
   b6006:	fa23 f000 	lsr.w	r0, r3, r0
   b600a:	07c3      	lsls	r3, r0, #31
   b600c:	d409      	bmi.n	b6022 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b600e:	4620      	mov	r0, r4
   b6010:	f7ff ffa0 	bl	b5f54 <pinAvailable>
   b6014:	b128      	cbz	r0, b6022 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b6016:	4629      	mov	r1, r5
   b6018:	4620      	mov	r0, r4
}
   b601a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b601e:	f7fe bdfd 	b.w	b4c1c <HAL_GPIO_Write>
}
   b6022:	bd38      	pop	{r3, r4, r5, pc}

000b6024 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b6024:	280d      	cmp	r0, #13
{
   b6026:	b510      	push	{r4, lr}
   b6028:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b602a:	bf9c      	itt	ls
   b602c:	340e      	addls	r4, #14
   b602e:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b6030:	4620      	mov	r0, r4
   b6032:	f7ff ff8f 	bl	b5f54 <pinAvailable>
   b6036:	b150      	cbz	r0, b604e <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b6038:	2103      	movs	r1, #3
   b603a:	4620      	mov	r0, r4
   b603c:	f7fe fdd6 	bl	b4bec <HAL_Validate_Pin_Function>
   b6040:	2803      	cmp	r0, #3
   b6042:	d104      	bne.n	b604e <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b6044:	4620      	mov	r0, r4
}
   b6046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b604a:	f7fe bdf7 	b.w	b4c3c <hal_adc_read>
}
   b604e:	2000      	movs	r0, #0
   b6050:	bd10      	pop	{r4, pc}

000b6052 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   b6052:	b538      	push	{r3, r4, r5, lr}
   b6054:	4604      	mov	r4, r0
   b6056:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   b6058:	f7ff ff7c 	bl	b5f54 <pinAvailable>
   b605c:	b1f0      	cbz	r0, b609c <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   b605e:	2104      	movs	r1, #4
   b6060:	4620      	mov	r0, r4
   b6062:	f7fe fdc3 	bl	b4bec <HAL_Validate_Pin_Function>
   b6066:	2804      	cmp	r0, #4
   b6068:	d105      	bne.n	b6076 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   b606a:	b2a9      	uxth	r1, r5
   b606c:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   b606e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   b6072:	f7fe bddb 	b.w	b4c2c <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   b6076:	2102      	movs	r1, #2
   b6078:	4620      	mov	r0, r4
   b607a:	f7fe fdb7 	bl	b4bec <HAL_Validate_Pin_Function>
   b607e:	2802      	cmp	r0, #2
   b6080:	d10c      	bne.n	b609c <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   b6082:	4620      	mov	r0, r4
   b6084:	f7fe fdc2 	bl	b4c0c <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   b6088:	2801      	cmp	r0, #1
   b608a:	d001      	beq.n	b6090 <_Z11analogWritetm+0x3e>
   b608c:	2804      	cmp	r0, #4
   b608e:	d105      	bne.n	b609c <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   b6090:	4629      	mov	r1, r5
   b6092:	4620      	mov	r0, r4
}
   b6094:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   b6098:	f7fe bde0 	b.w	b4c5c <hal_pwm_write_ext>
}
   b609c:	bd38      	pop	{r3, r4, r5, pc}

000b609e <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   b609e:	f7fe bdd5 	b.w	b4c4c <HAL_Pulse_In>

000b60a2 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b60a2:	4770      	bx	lr

000b60a4 <_Z17acquireWireBufferv>:
{
   b60a4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b60a6:	2520      	movs	r5, #32
   b60a8:	2314      	movs	r3, #20
{
   b60aa:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b60ac:	6003      	str	r3, [r0, #0]
   b60ae:	6085      	str	r5, [r0, #8]
   b60b0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b60b2:	4906      	ldr	r1, [pc, #24]	; (b60cc <_Z17acquireWireBufferv+0x28>)
   b60b4:	4628      	mov	r0, r5
   b60b6:	f000 f86f 	bl	b6198 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b60ba:	4904      	ldr	r1, [pc, #16]	; (b60cc <_Z17acquireWireBufferv+0x28>)
	};
   b60bc:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b60be:	4628      	mov	r0, r5
   b60c0:	f000 f86a 	bl	b6198 <_ZnajRKSt9nothrow_t>
	};
   b60c4:	60e0      	str	r0, [r4, #12]
}
   b60c6:	4620      	mov	r0, r4
   b60c8:	bd38      	pop	{r3, r4, r5, pc}
   b60ca:	bf00      	nop
   b60cc:	000b9314 	.word	0x000b9314

000b60d0 <_Z19__fetch_global_Wirev>:
{
   b60d0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b60d2:	4d0e      	ldr	r5, [pc, #56]	; (b610c <_Z19__fetch_global_Wirev+0x3c>)
   b60d4:	7829      	ldrb	r1, [r5, #0]
   b60d6:	f3bf 8f5b 	dmb	ish
   b60da:	f011 0401 	ands.w	r4, r1, #1
{
   b60de:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b60e0:	d111      	bne.n	b6106 <_Z19__fetch_global_Wirev+0x36>
   b60e2:	4628      	mov	r0, r5
   b60e4:	f7fd ffe8 	bl	b40b8 <__cxa_guard_acquire>
   b60e8:	b168      	cbz	r0, b6106 <_Z19__fetch_global_Wirev+0x36>
   b60ea:	a801      	add	r0, sp, #4
   b60ec:	f7ff ffda 	bl	b60a4 <_Z17acquireWireBufferv>
   b60f0:	aa01      	add	r2, sp, #4
   b60f2:	4621      	mov	r1, r4
   b60f4:	4806      	ldr	r0, [pc, #24]	; (b6110 <_Z19__fetch_global_Wirev+0x40>)
   b60f6:	f7ff f82f 	bl	b5158 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b60fa:	4628      	mov	r0, r5
   b60fc:	f7fd ffe1 	bl	b40c2 <__cxa_guard_release>
   b6100:	4804      	ldr	r0, [pc, #16]	; (b6114 <_Z19__fetch_global_Wirev+0x44>)
   b6102:	f000 fe19 	bl	b6d38 <atexit>
	return wire;
}
   b6106:	4802      	ldr	r0, [pc, #8]	; (b6110 <_Z19__fetch_global_Wirev+0x40>)
   b6108:	b007      	add	sp, #28
   b610a:	bd30      	pop	{r4, r5, pc}
   b610c:	2003e72c 	.word	0x2003e72c
   b6110:	2003e730 	.word	0x2003e730
   b6114:	000b60a3 	.word	0x000b60a3

000b6118 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6118:	4770      	bx	lr
	...

000b611c <_Z20acquireSerial1Bufferv>:
{
   b611c:	b538      	push	{r3, r4, r5, lr}
   b611e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6120:	2514      	movs	r5, #20
   b6122:	462a      	mov	r2, r5
   b6124:	2100      	movs	r1, #0
   b6126:	f000 fe4c 	bl	b6dc2 <memset>
   b612a:	8025      	strh	r5, [r4, #0]
   b612c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b612e:	4907      	ldr	r1, [pc, #28]	; (b614c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6130:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6132:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6134:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6136:	f000 f82f 	bl	b6198 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b613a:	4904      	ldr	r1, [pc, #16]	; (b614c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b613c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b613e:	4628      	mov	r0, r5
   b6140:	f000 f82a 	bl	b6198 <_ZnajRKSt9nothrow_t>
    };
   b6144:	60e0      	str	r0, [r4, #12]
}
   b6146:	4620      	mov	r0, r4
   b6148:	bd38      	pop	{r3, r4, r5, pc}
   b614a:	bf00      	nop
   b614c:	000b9314 	.word	0x000b9314

000b6150 <_Z22__fetch_global_Serial1v>:
{
   b6150:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6152:	4d0e      	ldr	r5, [pc, #56]	; (b618c <_Z22__fetch_global_Serial1v+0x3c>)
   b6154:	7829      	ldrb	r1, [r5, #0]
   b6156:	f3bf 8f5b 	dmb	ish
   b615a:	f011 0401 	ands.w	r4, r1, #1
{
   b615e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6160:	d111      	bne.n	b6186 <_Z22__fetch_global_Serial1v+0x36>
   b6162:	4628      	mov	r0, r5
   b6164:	f7fd ffa8 	bl	b40b8 <__cxa_guard_acquire>
   b6168:	b168      	cbz	r0, b6186 <_Z22__fetch_global_Serial1v+0x36>
   b616a:	a801      	add	r0, sp, #4
   b616c:	f7ff ffd6 	bl	b611c <_Z20acquireSerial1Bufferv>
   b6170:	aa01      	add	r2, sp, #4
   b6172:	4621      	mov	r1, r4
   b6174:	4806      	ldr	r0, [pc, #24]	; (b6190 <_Z22__fetch_global_Serial1v+0x40>)
   b6176:	f7ff fd37 	bl	b5be8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b617a:	4628      	mov	r0, r5
   b617c:	f7fd ffa1 	bl	b40c2 <__cxa_guard_release>
   b6180:	4804      	ldr	r0, [pc, #16]	; (b6194 <_Z22__fetch_global_Serial1v+0x44>)
   b6182:	f000 fdd9 	bl	b6d38 <atexit>
    return serial1;
}
   b6186:	4802      	ldr	r0, [pc, #8]	; (b6190 <_Z22__fetch_global_Serial1v+0x40>)
   b6188:	b007      	add	sp, #28
   b618a:	bd30      	pop	{r4, r5, pc}
   b618c:	2003e744 	.word	0x2003e744
   b6190:	2003e748 	.word	0x2003e748
   b6194:	000b6119 	.word	0x000b6119

000b6198 <_ZnajRKSt9nothrow_t>:
   b6198:	f7fd bf7f 	b.w	b409a <_Znaj>

000b619c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b619c:	4901      	ldr	r1, [pc, #4]	; (b61a4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b619e:	f000 b8f9 	b.w	b6394 <_ZNKSt9type_infoeqERKS_>
   b61a2:	bf00      	nop
   b61a4:	000b9330 	.word	0x000b9330

000b61a8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b61a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b61aa:	2400      	movs	r4, #0
   b61ac:	2310      	movs	r3, #16
   b61ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b61b2:	6803      	ldr	r3, [r0, #0]
   b61b4:	4615      	mov	r5, r2
   b61b6:	699e      	ldr	r6, [r3, #24]
   b61b8:	6812      	ldr	r2, [r2, #0]
   b61ba:	466b      	mov	r3, sp
   b61bc:	e9cd 4400 	strd	r4, r4, [sp]
   b61c0:	47b0      	blx	r6
   b61c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b61c6:	f003 0306 	and.w	r3, r3, #6
   b61ca:	2b06      	cmp	r3, #6
   b61cc:	bf03      	ittte	eq
   b61ce:	9b00      	ldreq	r3, [sp, #0]
   b61d0:	602b      	streq	r3, [r5, #0]
   b61d2:	2001      	moveq	r0, #1
   b61d4:	4620      	movne	r0, r4
   b61d6:	b004      	add	sp, #16
   b61d8:	bd70      	pop	{r4, r5, r6, pc}

000b61da <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b61da:	9800      	ldr	r0, [sp, #0]
   b61dc:	4290      	cmp	r0, r2
   b61de:	bf14      	ite	ne
   b61e0:	2001      	movne	r0, #1
   b61e2:	2006      	moveq	r0, #6
   b61e4:	4770      	bx	lr
	...

000b61e8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b61e8:	b510      	push	{r4, lr}
   b61ea:	4b03      	ldr	r3, [pc, #12]	; (b61f8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b61ec:	6003      	str	r3, [r0, #0]
   b61ee:	4604      	mov	r4, r0
   b61f0:	f000 f8cd 	bl	b638e <_ZNSt9type_infoD1Ev>
   b61f4:	4620      	mov	r0, r4
   b61f6:	bd10      	pop	{r4, pc}
   b61f8:	000b9370 	.word	0x000b9370

000b61fc <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b61fc:	b510      	push	{r4, lr}
   b61fe:	4604      	mov	r4, r0
   b6200:	f7ff fff2 	bl	b61e8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6204:	4620      	mov	r0, r4
   b6206:	2108      	movs	r1, #8
   b6208:	f7fd ff49 	bl	b409e <_ZdlPvj>
   b620c:	4620      	mov	r0, r4
   b620e:	bd10      	pop	{r4, pc}

000b6210 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b6210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6214:	461f      	mov	r7, r3
   b6216:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b621a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b621e:	4598      	cmp	r8, r3
   b6220:	4606      	mov	r6, r0
   b6222:	4615      	mov	r5, r2
   b6224:	d107      	bne.n	b6236 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b6226:	9907      	ldr	r1, [sp, #28]
   b6228:	f000 f8b4 	bl	b6394 <_ZNKSt9type_infoeqERKS_>
   b622c:	b118      	cbz	r0, b6236 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b622e:	7165      	strb	r5, [r4, #5]
   b6230:	2000      	movs	r0, #0
   b6232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6236:	4639      	mov	r1, r7
   b6238:	4630      	mov	r0, r6
   b623a:	f000 f8ab 	bl	b6394 <_ZNKSt9type_infoeqERKS_>
   b623e:	2800      	cmp	r0, #0
   b6240:	d0f6      	beq.n	b6230 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b6242:	2301      	movs	r3, #1
   b6244:	f8c4 8000 	str.w	r8, [r4]
   b6248:	7125      	strb	r5, [r4, #4]
   b624a:	71a3      	strb	r3, [r4, #6]
   b624c:	e7f0      	b.n	b6230 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b624e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b624e:	b538      	push	{r3, r4, r5, lr}
   b6250:	4615      	mov	r5, r2
   b6252:	461c      	mov	r4, r3
   b6254:	f000 f89e 	bl	b6394 <_ZNKSt9type_infoeqERKS_>
   b6258:	b120      	cbz	r0, b6264 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b625a:	2308      	movs	r3, #8
   b625c:	60e3      	str	r3, [r4, #12]
   b625e:	2306      	movs	r3, #6
   b6260:	6025      	str	r5, [r4, #0]
   b6262:	7123      	strb	r3, [r4, #4]
   b6264:	bd38      	pop	{r3, r4, r5, pc}

000b6266 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b6266:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6268:	4605      	mov	r5, r0
   b626a:	460c      	mov	r4, r1
   b626c:	9201      	str	r2, [sp, #4]
   b626e:	461e      	mov	r6, r3
   b6270:	f000 f890 	bl	b6394 <_ZNKSt9type_infoeqERKS_>
   b6274:	b950      	cbnz	r0, b628c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b6276:	2e03      	cmp	r6, #3
   b6278:	d808      	bhi.n	b628c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b627a:	6823      	ldr	r3, [r4, #0]
   b627c:	9a01      	ldr	r2, [sp, #4]
   b627e:	695b      	ldr	r3, [r3, #20]
   b6280:	4629      	mov	r1, r5
   b6282:	4620      	mov	r0, r4
   b6284:	b002      	add	sp, #8
   b6286:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b628a:	4718      	bx	r3
   b628c:	b002      	add	sp, #8
   b628e:	bd70      	pop	{r4, r5, r6, pc}

000b6290 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b6290:	b510      	push	{r4, lr}
   b6292:	4b03      	ldr	r3, [pc, #12]	; (b62a0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b6294:	6003      	str	r3, [r0, #0]
   b6296:	4604      	mov	r4, r0
   b6298:	f7ff ffa6 	bl	b61e8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b629c:	4620      	mov	r0, r4
   b629e:	bd10      	pop	{r4, pc}
   b62a0:	000b93d0 	.word	0x000b93d0

000b62a4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b62a4:	b510      	push	{r4, lr}
   b62a6:	4604      	mov	r4, r0
   b62a8:	f7ff fff2 	bl	b6290 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b62ac:	4620      	mov	r0, r4
   b62ae:	210c      	movs	r1, #12
   b62b0:	f7fd fef5 	bl	b409e <_ZdlPvj>
   b62b4:	4620      	mov	r0, r4
   b62b6:	bd10      	pop	{r4, pc}

000b62b8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b62b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b62ba:	9f08      	ldr	r7, [sp, #32]
   b62bc:	4297      	cmp	r7, r2
   b62be:	4605      	mov	r5, r0
   b62c0:	460e      	mov	r6, r1
   b62c2:	4614      	mov	r4, r2
   b62c4:	d00a      	beq.n	b62dc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b62c6:	68a8      	ldr	r0, [r5, #8]
   b62c8:	6802      	ldr	r2, [r0, #0]
   b62ca:	9708      	str	r7, [sp, #32]
   b62cc:	6a15      	ldr	r5, [r2, #32]
   b62ce:	4631      	mov	r1, r6
   b62d0:	4622      	mov	r2, r4
   b62d2:	46ac      	mov	ip, r5
   b62d4:	b003      	add	sp, #12
   b62d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b62da:	4760      	bx	ip
   b62dc:	4619      	mov	r1, r3
   b62de:	9301      	str	r3, [sp, #4]
   b62e0:	f000 f858 	bl	b6394 <_ZNKSt9type_infoeqERKS_>
   b62e4:	9b01      	ldr	r3, [sp, #4]
   b62e6:	2800      	cmp	r0, #0
   b62e8:	d0ed      	beq.n	b62c6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b62ea:	2006      	movs	r0, #6
   b62ec:	b003      	add	sp, #12
   b62ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b62f0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b62f0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b62f4:	460d      	mov	r5, r1
   b62f6:	4619      	mov	r1, r3
   b62f8:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b62fc:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b6300:	4681      	mov	r9, r0
   b6302:	4617      	mov	r7, r2
   b6304:	4698      	mov	r8, r3
   b6306:	f000 f845 	bl	b6394 <_ZNKSt9type_infoeqERKS_>
   b630a:	b190      	cbz	r0, b6332 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b630c:	2d00      	cmp	r5, #0
   b630e:	6034      	str	r4, [r6, #0]
   b6310:	7137      	strb	r7, [r6, #4]
   b6312:	db09      	blt.n	b6328 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b6314:	1961      	adds	r1, r4, r5
   b6316:	458a      	cmp	sl, r1
   b6318:	bf0c      	ite	eq
   b631a:	2106      	moveq	r1, #6
   b631c:	2101      	movne	r1, #1
   b631e:	71b1      	strb	r1, [r6, #6]
   b6320:	2000      	movs	r0, #0
   b6322:	b001      	add	sp, #4
   b6324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6328:	3502      	adds	r5, #2
   b632a:	d1f9      	bne.n	b6320 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b632c:	2301      	movs	r3, #1
   b632e:	71b3      	strb	r3, [r6, #6]
   b6330:	e7f6      	b.n	b6320 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6332:	4554      	cmp	r4, sl
   b6334:	d106      	bne.n	b6344 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b6336:	4659      	mov	r1, fp
   b6338:	4648      	mov	r0, r9
   b633a:	f000 f82b 	bl	b6394 <_ZNKSt9type_infoeqERKS_>
   b633e:	b108      	cbz	r0, b6344 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b6340:	7177      	strb	r7, [r6, #5]
   b6342:	e7ed      	b.n	b6320 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6344:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b6348:	6803      	ldr	r3, [r0, #0]
   b634a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b634e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b6352:	69dc      	ldr	r4, [r3, #28]
   b6354:	463a      	mov	r2, r7
   b6356:	4643      	mov	r3, r8
   b6358:	4629      	mov	r1, r5
   b635a:	46a4      	mov	ip, r4
   b635c:	b001      	add	sp, #4
   b635e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6362:	4760      	bx	ip

000b6364 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b6364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6368:	4607      	mov	r7, r0
   b636a:	460c      	mov	r4, r1
   b636c:	4615      	mov	r5, r2
   b636e:	461e      	mov	r6, r3
   b6370:	f7ff ff6d 	bl	b624e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b6374:	b948      	cbnz	r0, b638a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b6376:	68b8      	ldr	r0, [r7, #8]
   b6378:	6803      	ldr	r3, [r0, #0]
   b637a:	699f      	ldr	r7, [r3, #24]
   b637c:	462a      	mov	r2, r5
   b637e:	4633      	mov	r3, r6
   b6380:	4621      	mov	r1, r4
   b6382:	46bc      	mov	ip, r7
   b6384:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b6388:	4760      	bx	ip
   b638a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b638e <_ZNSt9type_infoD1Ev>:
   b638e:	4770      	bx	lr

000b6390 <_ZNKSt9type_info14__is_pointer_pEv>:
   b6390:	2000      	movs	r0, #0
   b6392:	4770      	bx	lr

000b6394 <_ZNKSt9type_infoeqERKS_>:
   b6394:	4281      	cmp	r1, r0
   b6396:	b508      	push	{r3, lr}
   b6398:	d00e      	beq.n	b63b8 <_ZNKSt9type_infoeqERKS_+0x24>
   b639a:	6840      	ldr	r0, [r0, #4]
   b639c:	7803      	ldrb	r3, [r0, #0]
   b639e:	2b2a      	cmp	r3, #42	; 0x2a
   b63a0:	d00c      	beq.n	b63bc <_ZNKSt9type_infoeqERKS_+0x28>
   b63a2:	6849      	ldr	r1, [r1, #4]
   b63a4:	780b      	ldrb	r3, [r1, #0]
   b63a6:	2b2a      	cmp	r3, #42	; 0x2a
   b63a8:	bf08      	it	eq
   b63aa:	3101      	addeq	r1, #1
   b63ac:	f000 fd40 	bl	b6e30 <strcmp>
   b63b0:	fab0 f080 	clz	r0, r0
   b63b4:	0940      	lsrs	r0, r0, #5
   b63b6:	bd08      	pop	{r3, pc}
   b63b8:	2001      	movs	r0, #1
   b63ba:	e7fc      	b.n	b63b6 <_ZNKSt9type_infoeqERKS_+0x22>
   b63bc:	2000      	movs	r0, #0
   b63be:	e7fa      	b.n	b63b6 <_ZNKSt9type_infoeqERKS_+0x22>

000b63c0 <__aeabi_drsub>:
   b63c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b63c4:	e002      	b.n	b63cc <__adddf3>
   b63c6:	bf00      	nop

000b63c8 <__aeabi_dsub>:
   b63c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b63cc <__adddf3>:
   b63cc:	b530      	push	{r4, r5, lr}
   b63ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b63d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b63d6:	ea94 0f05 	teq	r4, r5
   b63da:	bf08      	it	eq
   b63dc:	ea90 0f02 	teqeq	r0, r2
   b63e0:	bf1f      	itttt	ne
   b63e2:	ea54 0c00 	orrsne.w	ip, r4, r0
   b63e6:	ea55 0c02 	orrsne.w	ip, r5, r2
   b63ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b63ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b63f2:	f000 80e2 	beq.w	b65ba <__adddf3+0x1ee>
   b63f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b63fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b63fe:	bfb8      	it	lt
   b6400:	426d      	neglt	r5, r5
   b6402:	dd0c      	ble.n	b641e <__adddf3+0x52>
   b6404:	442c      	add	r4, r5
   b6406:	ea80 0202 	eor.w	r2, r0, r2
   b640a:	ea81 0303 	eor.w	r3, r1, r3
   b640e:	ea82 0000 	eor.w	r0, r2, r0
   b6412:	ea83 0101 	eor.w	r1, r3, r1
   b6416:	ea80 0202 	eor.w	r2, r0, r2
   b641a:	ea81 0303 	eor.w	r3, r1, r3
   b641e:	2d36      	cmp	r5, #54	; 0x36
   b6420:	bf88      	it	hi
   b6422:	bd30      	pophi	{r4, r5, pc}
   b6424:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b6428:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b642c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b6430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b6434:	d002      	beq.n	b643c <__adddf3+0x70>
   b6436:	4240      	negs	r0, r0
   b6438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b643c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b6440:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b6448:	d002      	beq.n	b6450 <__adddf3+0x84>
   b644a:	4252      	negs	r2, r2
   b644c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b6450:	ea94 0f05 	teq	r4, r5
   b6454:	f000 80a7 	beq.w	b65a6 <__adddf3+0x1da>
   b6458:	f1a4 0401 	sub.w	r4, r4, #1
   b645c:	f1d5 0e20 	rsbs	lr, r5, #32
   b6460:	db0d      	blt.n	b647e <__adddf3+0xb2>
   b6462:	fa02 fc0e 	lsl.w	ip, r2, lr
   b6466:	fa22 f205 	lsr.w	r2, r2, r5
   b646a:	1880      	adds	r0, r0, r2
   b646c:	f141 0100 	adc.w	r1, r1, #0
   b6470:	fa03 f20e 	lsl.w	r2, r3, lr
   b6474:	1880      	adds	r0, r0, r2
   b6476:	fa43 f305 	asr.w	r3, r3, r5
   b647a:	4159      	adcs	r1, r3
   b647c:	e00e      	b.n	b649c <__adddf3+0xd0>
   b647e:	f1a5 0520 	sub.w	r5, r5, #32
   b6482:	f10e 0e20 	add.w	lr, lr, #32
   b6486:	2a01      	cmp	r2, #1
   b6488:	fa03 fc0e 	lsl.w	ip, r3, lr
   b648c:	bf28      	it	cs
   b648e:	f04c 0c02 	orrcs.w	ip, ip, #2
   b6492:	fa43 f305 	asr.w	r3, r3, r5
   b6496:	18c0      	adds	r0, r0, r3
   b6498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b649c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b64a0:	d507      	bpl.n	b64b2 <__adddf3+0xe6>
   b64a2:	f04f 0e00 	mov.w	lr, #0
   b64a6:	f1dc 0c00 	rsbs	ip, ip, #0
   b64aa:	eb7e 0000 	sbcs.w	r0, lr, r0
   b64ae:	eb6e 0101 	sbc.w	r1, lr, r1
   b64b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b64b6:	d31b      	bcc.n	b64f0 <__adddf3+0x124>
   b64b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b64bc:	d30c      	bcc.n	b64d8 <__adddf3+0x10c>
   b64be:	0849      	lsrs	r1, r1, #1
   b64c0:	ea5f 0030 	movs.w	r0, r0, rrx
   b64c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b64c8:	f104 0401 	add.w	r4, r4, #1
   b64cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b64d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b64d4:	f080 809a 	bcs.w	b660c <__adddf3+0x240>
   b64d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b64dc:	bf08      	it	eq
   b64de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b64e2:	f150 0000 	adcs.w	r0, r0, #0
   b64e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b64ea:	ea41 0105 	orr.w	r1, r1, r5
   b64ee:	bd30      	pop	{r4, r5, pc}
   b64f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b64f4:	4140      	adcs	r0, r0
   b64f6:	eb41 0101 	adc.w	r1, r1, r1
   b64fa:	3c01      	subs	r4, #1
   b64fc:	bf28      	it	cs
   b64fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b6502:	d2e9      	bcs.n	b64d8 <__adddf3+0x10c>
   b6504:	f091 0f00 	teq	r1, #0
   b6508:	bf04      	itt	eq
   b650a:	4601      	moveq	r1, r0
   b650c:	2000      	moveq	r0, #0
   b650e:	fab1 f381 	clz	r3, r1
   b6512:	bf08      	it	eq
   b6514:	3320      	addeq	r3, #32
   b6516:	f1a3 030b 	sub.w	r3, r3, #11
   b651a:	f1b3 0220 	subs.w	r2, r3, #32
   b651e:	da0c      	bge.n	b653a <__adddf3+0x16e>
   b6520:	320c      	adds	r2, #12
   b6522:	dd08      	ble.n	b6536 <__adddf3+0x16a>
   b6524:	f102 0c14 	add.w	ip, r2, #20
   b6528:	f1c2 020c 	rsb	r2, r2, #12
   b652c:	fa01 f00c 	lsl.w	r0, r1, ip
   b6530:	fa21 f102 	lsr.w	r1, r1, r2
   b6534:	e00c      	b.n	b6550 <__adddf3+0x184>
   b6536:	f102 0214 	add.w	r2, r2, #20
   b653a:	bfd8      	it	le
   b653c:	f1c2 0c20 	rsble	ip, r2, #32
   b6540:	fa01 f102 	lsl.w	r1, r1, r2
   b6544:	fa20 fc0c 	lsr.w	ip, r0, ip
   b6548:	bfdc      	itt	le
   b654a:	ea41 010c 	orrle.w	r1, r1, ip
   b654e:	4090      	lslle	r0, r2
   b6550:	1ae4      	subs	r4, r4, r3
   b6552:	bfa2      	ittt	ge
   b6554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b6558:	4329      	orrge	r1, r5
   b655a:	bd30      	popge	{r4, r5, pc}
   b655c:	ea6f 0404 	mvn.w	r4, r4
   b6560:	3c1f      	subs	r4, #31
   b6562:	da1c      	bge.n	b659e <__adddf3+0x1d2>
   b6564:	340c      	adds	r4, #12
   b6566:	dc0e      	bgt.n	b6586 <__adddf3+0x1ba>
   b6568:	f104 0414 	add.w	r4, r4, #20
   b656c:	f1c4 0220 	rsb	r2, r4, #32
   b6570:	fa20 f004 	lsr.w	r0, r0, r4
   b6574:	fa01 f302 	lsl.w	r3, r1, r2
   b6578:	ea40 0003 	orr.w	r0, r0, r3
   b657c:	fa21 f304 	lsr.w	r3, r1, r4
   b6580:	ea45 0103 	orr.w	r1, r5, r3
   b6584:	bd30      	pop	{r4, r5, pc}
   b6586:	f1c4 040c 	rsb	r4, r4, #12
   b658a:	f1c4 0220 	rsb	r2, r4, #32
   b658e:	fa20 f002 	lsr.w	r0, r0, r2
   b6592:	fa01 f304 	lsl.w	r3, r1, r4
   b6596:	ea40 0003 	orr.w	r0, r0, r3
   b659a:	4629      	mov	r1, r5
   b659c:	bd30      	pop	{r4, r5, pc}
   b659e:	fa21 f004 	lsr.w	r0, r1, r4
   b65a2:	4629      	mov	r1, r5
   b65a4:	bd30      	pop	{r4, r5, pc}
   b65a6:	f094 0f00 	teq	r4, #0
   b65aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b65ae:	bf06      	itte	eq
   b65b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b65b4:	3401      	addeq	r4, #1
   b65b6:	3d01      	subne	r5, #1
   b65b8:	e74e      	b.n	b6458 <__adddf3+0x8c>
   b65ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b65be:	bf18      	it	ne
   b65c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b65c4:	d029      	beq.n	b661a <__adddf3+0x24e>
   b65c6:	ea94 0f05 	teq	r4, r5
   b65ca:	bf08      	it	eq
   b65cc:	ea90 0f02 	teqeq	r0, r2
   b65d0:	d005      	beq.n	b65de <__adddf3+0x212>
   b65d2:	ea54 0c00 	orrs.w	ip, r4, r0
   b65d6:	bf04      	itt	eq
   b65d8:	4619      	moveq	r1, r3
   b65da:	4610      	moveq	r0, r2
   b65dc:	bd30      	pop	{r4, r5, pc}
   b65de:	ea91 0f03 	teq	r1, r3
   b65e2:	bf1e      	ittt	ne
   b65e4:	2100      	movne	r1, #0
   b65e6:	2000      	movne	r0, #0
   b65e8:	bd30      	popne	{r4, r5, pc}
   b65ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b65ee:	d105      	bne.n	b65fc <__adddf3+0x230>
   b65f0:	0040      	lsls	r0, r0, #1
   b65f2:	4149      	adcs	r1, r1
   b65f4:	bf28      	it	cs
   b65f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b65fa:	bd30      	pop	{r4, r5, pc}
   b65fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b6600:	bf3c      	itt	cc
   b6602:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b6606:	bd30      	popcc	{r4, r5, pc}
   b6608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b660c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b6610:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6614:	f04f 0000 	mov.w	r0, #0
   b6618:	bd30      	pop	{r4, r5, pc}
   b661a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b661e:	bf1a      	itte	ne
   b6620:	4619      	movne	r1, r3
   b6622:	4610      	movne	r0, r2
   b6624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b6628:	bf1c      	itt	ne
   b662a:	460b      	movne	r3, r1
   b662c:	4602      	movne	r2, r0
   b662e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b6632:	bf06      	itte	eq
   b6634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b6638:	ea91 0f03 	teqeq	r1, r3
   b663c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b6640:	bd30      	pop	{r4, r5, pc}
   b6642:	bf00      	nop

000b6644 <__aeabi_ui2d>:
   b6644:	f090 0f00 	teq	r0, #0
   b6648:	bf04      	itt	eq
   b664a:	2100      	moveq	r1, #0
   b664c:	4770      	bxeq	lr
   b664e:	b530      	push	{r4, r5, lr}
   b6650:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6654:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6658:	f04f 0500 	mov.w	r5, #0
   b665c:	f04f 0100 	mov.w	r1, #0
   b6660:	e750      	b.n	b6504 <__adddf3+0x138>
   b6662:	bf00      	nop

000b6664 <__aeabi_i2d>:
   b6664:	f090 0f00 	teq	r0, #0
   b6668:	bf04      	itt	eq
   b666a:	2100      	moveq	r1, #0
   b666c:	4770      	bxeq	lr
   b666e:	b530      	push	{r4, r5, lr}
   b6670:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6674:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6678:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b667c:	bf48      	it	mi
   b667e:	4240      	negmi	r0, r0
   b6680:	f04f 0100 	mov.w	r1, #0
   b6684:	e73e      	b.n	b6504 <__adddf3+0x138>
   b6686:	bf00      	nop

000b6688 <__aeabi_f2d>:
   b6688:	0042      	lsls	r2, r0, #1
   b668a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b668e:	ea4f 0131 	mov.w	r1, r1, rrx
   b6692:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b6696:	bf1f      	itttt	ne
   b6698:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b669c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b66a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b66a4:	4770      	bxne	lr
   b66a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b66aa:	bf08      	it	eq
   b66ac:	4770      	bxeq	lr
   b66ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b66b2:	bf04      	itt	eq
   b66b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b66b8:	4770      	bxeq	lr
   b66ba:	b530      	push	{r4, r5, lr}
   b66bc:	f44f 7460 	mov.w	r4, #896	; 0x380
   b66c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b66c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b66c8:	e71c      	b.n	b6504 <__adddf3+0x138>
   b66ca:	bf00      	nop

000b66cc <__aeabi_ul2d>:
   b66cc:	ea50 0201 	orrs.w	r2, r0, r1
   b66d0:	bf08      	it	eq
   b66d2:	4770      	bxeq	lr
   b66d4:	b530      	push	{r4, r5, lr}
   b66d6:	f04f 0500 	mov.w	r5, #0
   b66da:	e00a      	b.n	b66f2 <__aeabi_l2d+0x16>

000b66dc <__aeabi_l2d>:
   b66dc:	ea50 0201 	orrs.w	r2, r0, r1
   b66e0:	bf08      	it	eq
   b66e2:	4770      	bxeq	lr
   b66e4:	b530      	push	{r4, r5, lr}
   b66e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b66ea:	d502      	bpl.n	b66f2 <__aeabi_l2d+0x16>
   b66ec:	4240      	negs	r0, r0
   b66ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b66f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b66f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b66fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b66fe:	f43f aed8 	beq.w	b64b2 <__adddf3+0xe6>
   b6702:	f04f 0203 	mov.w	r2, #3
   b6706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b670a:	bf18      	it	ne
   b670c:	3203      	addne	r2, #3
   b670e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6712:	bf18      	it	ne
   b6714:	3203      	addne	r2, #3
   b6716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b671a:	f1c2 0320 	rsb	r3, r2, #32
   b671e:	fa00 fc03 	lsl.w	ip, r0, r3
   b6722:	fa20 f002 	lsr.w	r0, r0, r2
   b6726:	fa01 fe03 	lsl.w	lr, r1, r3
   b672a:	ea40 000e 	orr.w	r0, r0, lr
   b672e:	fa21 f102 	lsr.w	r1, r1, r2
   b6732:	4414      	add	r4, r2
   b6734:	e6bd      	b.n	b64b2 <__adddf3+0xe6>
   b6736:	bf00      	nop

000b6738 <__aeabi_dmul>:
   b6738:	b570      	push	{r4, r5, r6, lr}
   b673a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b673e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6742:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6746:	bf1d      	ittte	ne
   b6748:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b674c:	ea94 0f0c 	teqne	r4, ip
   b6750:	ea95 0f0c 	teqne	r5, ip
   b6754:	f000 f8de 	bleq	b6914 <__aeabi_dmul+0x1dc>
   b6758:	442c      	add	r4, r5
   b675a:	ea81 0603 	eor.w	r6, r1, r3
   b675e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b6762:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b6766:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b676a:	bf18      	it	ne
   b676c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b6770:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6774:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b6778:	d038      	beq.n	b67ec <__aeabi_dmul+0xb4>
   b677a:	fba0 ce02 	umull	ip, lr, r0, r2
   b677e:	f04f 0500 	mov.w	r5, #0
   b6782:	fbe1 e502 	umlal	lr, r5, r1, r2
   b6786:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b678a:	fbe0 e503 	umlal	lr, r5, r0, r3
   b678e:	f04f 0600 	mov.w	r6, #0
   b6792:	fbe1 5603 	umlal	r5, r6, r1, r3
   b6796:	f09c 0f00 	teq	ip, #0
   b679a:	bf18      	it	ne
   b679c:	f04e 0e01 	orrne.w	lr, lr, #1
   b67a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b67a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b67a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b67ac:	d204      	bcs.n	b67b8 <__aeabi_dmul+0x80>
   b67ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b67b2:	416d      	adcs	r5, r5
   b67b4:	eb46 0606 	adc.w	r6, r6, r6
   b67b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b67bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b67c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b67c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b67c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b67cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b67d0:	bf88      	it	hi
   b67d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b67d6:	d81e      	bhi.n	b6816 <__aeabi_dmul+0xde>
   b67d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b67dc:	bf08      	it	eq
   b67de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b67e2:	f150 0000 	adcs.w	r0, r0, #0
   b67e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b67ea:	bd70      	pop	{r4, r5, r6, pc}
   b67ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b67f0:	ea46 0101 	orr.w	r1, r6, r1
   b67f4:	ea40 0002 	orr.w	r0, r0, r2
   b67f8:	ea81 0103 	eor.w	r1, r1, r3
   b67fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b6800:	bfc2      	ittt	gt
   b6802:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6806:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b680a:	bd70      	popgt	{r4, r5, r6, pc}
   b680c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6810:	f04f 0e00 	mov.w	lr, #0
   b6814:	3c01      	subs	r4, #1
   b6816:	f300 80ab 	bgt.w	b6970 <__aeabi_dmul+0x238>
   b681a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b681e:	bfde      	ittt	le
   b6820:	2000      	movle	r0, #0
   b6822:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b6826:	bd70      	pople	{r4, r5, r6, pc}
   b6828:	f1c4 0400 	rsb	r4, r4, #0
   b682c:	3c20      	subs	r4, #32
   b682e:	da35      	bge.n	b689c <__aeabi_dmul+0x164>
   b6830:	340c      	adds	r4, #12
   b6832:	dc1b      	bgt.n	b686c <__aeabi_dmul+0x134>
   b6834:	f104 0414 	add.w	r4, r4, #20
   b6838:	f1c4 0520 	rsb	r5, r4, #32
   b683c:	fa00 f305 	lsl.w	r3, r0, r5
   b6840:	fa20 f004 	lsr.w	r0, r0, r4
   b6844:	fa01 f205 	lsl.w	r2, r1, r5
   b6848:	ea40 0002 	orr.w	r0, r0, r2
   b684c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b6850:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6854:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6858:	fa21 f604 	lsr.w	r6, r1, r4
   b685c:	eb42 0106 	adc.w	r1, r2, r6
   b6860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6864:	bf08      	it	eq
   b6866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b686a:	bd70      	pop	{r4, r5, r6, pc}
   b686c:	f1c4 040c 	rsb	r4, r4, #12
   b6870:	f1c4 0520 	rsb	r5, r4, #32
   b6874:	fa00 f304 	lsl.w	r3, r0, r4
   b6878:	fa20 f005 	lsr.w	r0, r0, r5
   b687c:	fa01 f204 	lsl.w	r2, r1, r4
   b6880:	ea40 0002 	orr.w	r0, r0, r2
   b6884:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6888:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b688c:	f141 0100 	adc.w	r1, r1, #0
   b6890:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6894:	bf08      	it	eq
   b6896:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b689a:	bd70      	pop	{r4, r5, r6, pc}
   b689c:	f1c4 0520 	rsb	r5, r4, #32
   b68a0:	fa00 f205 	lsl.w	r2, r0, r5
   b68a4:	ea4e 0e02 	orr.w	lr, lr, r2
   b68a8:	fa20 f304 	lsr.w	r3, r0, r4
   b68ac:	fa01 f205 	lsl.w	r2, r1, r5
   b68b0:	ea43 0302 	orr.w	r3, r3, r2
   b68b4:	fa21 f004 	lsr.w	r0, r1, r4
   b68b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b68bc:	fa21 f204 	lsr.w	r2, r1, r4
   b68c0:	ea20 0002 	bic.w	r0, r0, r2
   b68c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b68c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b68cc:	bf08      	it	eq
   b68ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b68d2:	bd70      	pop	{r4, r5, r6, pc}
   b68d4:	f094 0f00 	teq	r4, #0
   b68d8:	d10f      	bne.n	b68fa <__aeabi_dmul+0x1c2>
   b68da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b68de:	0040      	lsls	r0, r0, #1
   b68e0:	eb41 0101 	adc.w	r1, r1, r1
   b68e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b68e8:	bf08      	it	eq
   b68ea:	3c01      	subeq	r4, #1
   b68ec:	d0f7      	beq.n	b68de <__aeabi_dmul+0x1a6>
   b68ee:	ea41 0106 	orr.w	r1, r1, r6
   b68f2:	f095 0f00 	teq	r5, #0
   b68f6:	bf18      	it	ne
   b68f8:	4770      	bxne	lr
   b68fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b68fe:	0052      	lsls	r2, r2, #1
   b6900:	eb43 0303 	adc.w	r3, r3, r3
   b6904:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b6908:	bf08      	it	eq
   b690a:	3d01      	subeq	r5, #1
   b690c:	d0f7      	beq.n	b68fe <__aeabi_dmul+0x1c6>
   b690e:	ea43 0306 	orr.w	r3, r3, r6
   b6912:	4770      	bx	lr
   b6914:	ea94 0f0c 	teq	r4, ip
   b6918:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b691c:	bf18      	it	ne
   b691e:	ea95 0f0c 	teqne	r5, ip
   b6922:	d00c      	beq.n	b693e <__aeabi_dmul+0x206>
   b6924:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6928:	bf18      	it	ne
   b692a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b692e:	d1d1      	bne.n	b68d4 <__aeabi_dmul+0x19c>
   b6930:	ea81 0103 	eor.w	r1, r1, r3
   b6934:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6938:	f04f 0000 	mov.w	r0, #0
   b693c:	bd70      	pop	{r4, r5, r6, pc}
   b693e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6942:	bf06      	itte	eq
   b6944:	4610      	moveq	r0, r2
   b6946:	4619      	moveq	r1, r3
   b6948:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b694c:	d019      	beq.n	b6982 <__aeabi_dmul+0x24a>
   b694e:	ea94 0f0c 	teq	r4, ip
   b6952:	d102      	bne.n	b695a <__aeabi_dmul+0x222>
   b6954:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b6958:	d113      	bne.n	b6982 <__aeabi_dmul+0x24a>
   b695a:	ea95 0f0c 	teq	r5, ip
   b695e:	d105      	bne.n	b696c <__aeabi_dmul+0x234>
   b6960:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b6964:	bf1c      	itt	ne
   b6966:	4610      	movne	r0, r2
   b6968:	4619      	movne	r1, r3
   b696a:	d10a      	bne.n	b6982 <__aeabi_dmul+0x24a>
   b696c:	ea81 0103 	eor.w	r1, r1, r3
   b6970:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6974:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6978:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b697c:	f04f 0000 	mov.w	r0, #0
   b6980:	bd70      	pop	{r4, r5, r6, pc}
   b6982:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6986:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b698a:	bd70      	pop	{r4, r5, r6, pc}

000b698c <__aeabi_ddiv>:
   b698c:	b570      	push	{r4, r5, r6, lr}
   b698e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6992:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6996:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b699a:	bf1d      	ittte	ne
   b699c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b69a0:	ea94 0f0c 	teqne	r4, ip
   b69a4:	ea95 0f0c 	teqne	r5, ip
   b69a8:	f000 f8a7 	bleq	b6afa <__aeabi_ddiv+0x16e>
   b69ac:	eba4 0405 	sub.w	r4, r4, r5
   b69b0:	ea81 0e03 	eor.w	lr, r1, r3
   b69b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b69b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b69bc:	f000 8088 	beq.w	b6ad0 <__aeabi_ddiv+0x144>
   b69c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b69c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b69c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b69cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b69d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b69d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b69d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b69dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b69e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b69e4:	429d      	cmp	r5, r3
   b69e6:	bf08      	it	eq
   b69e8:	4296      	cmpeq	r6, r2
   b69ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b69ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b69f2:	d202      	bcs.n	b69fa <__aeabi_ddiv+0x6e>
   b69f4:	085b      	lsrs	r3, r3, #1
   b69f6:	ea4f 0232 	mov.w	r2, r2, rrx
   b69fa:	1ab6      	subs	r6, r6, r2
   b69fc:	eb65 0503 	sbc.w	r5, r5, r3
   b6a00:	085b      	lsrs	r3, r3, #1
   b6a02:	ea4f 0232 	mov.w	r2, r2, rrx
   b6a06:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b6a0a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b6a0e:	ebb6 0e02 	subs.w	lr, r6, r2
   b6a12:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6a16:	bf22      	ittt	cs
   b6a18:	1ab6      	subcs	r6, r6, r2
   b6a1a:	4675      	movcs	r5, lr
   b6a1c:	ea40 000c 	orrcs.w	r0, r0, ip
   b6a20:	085b      	lsrs	r3, r3, #1
   b6a22:	ea4f 0232 	mov.w	r2, r2, rrx
   b6a26:	ebb6 0e02 	subs.w	lr, r6, r2
   b6a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6a2e:	bf22      	ittt	cs
   b6a30:	1ab6      	subcs	r6, r6, r2
   b6a32:	4675      	movcs	r5, lr
   b6a34:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b6a38:	085b      	lsrs	r3, r3, #1
   b6a3a:	ea4f 0232 	mov.w	r2, r2, rrx
   b6a3e:	ebb6 0e02 	subs.w	lr, r6, r2
   b6a42:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6a46:	bf22      	ittt	cs
   b6a48:	1ab6      	subcs	r6, r6, r2
   b6a4a:	4675      	movcs	r5, lr
   b6a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b6a50:	085b      	lsrs	r3, r3, #1
   b6a52:	ea4f 0232 	mov.w	r2, r2, rrx
   b6a56:	ebb6 0e02 	subs.w	lr, r6, r2
   b6a5a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6a5e:	bf22      	ittt	cs
   b6a60:	1ab6      	subcs	r6, r6, r2
   b6a62:	4675      	movcs	r5, lr
   b6a64:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b6a68:	ea55 0e06 	orrs.w	lr, r5, r6
   b6a6c:	d018      	beq.n	b6aa0 <__aeabi_ddiv+0x114>
   b6a6e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b6a72:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b6a76:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b6a7a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b6a7e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b6a82:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b6a86:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b6a8a:	d1c0      	bne.n	b6a0e <__aeabi_ddiv+0x82>
   b6a8c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6a90:	d10b      	bne.n	b6aaa <__aeabi_ddiv+0x11e>
   b6a92:	ea41 0100 	orr.w	r1, r1, r0
   b6a96:	f04f 0000 	mov.w	r0, #0
   b6a9a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b6a9e:	e7b6      	b.n	b6a0e <__aeabi_ddiv+0x82>
   b6aa0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6aa4:	bf04      	itt	eq
   b6aa6:	4301      	orreq	r1, r0
   b6aa8:	2000      	moveq	r0, #0
   b6aaa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6aae:	bf88      	it	hi
   b6ab0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6ab4:	f63f aeaf 	bhi.w	b6816 <__aeabi_dmul+0xde>
   b6ab8:	ebb5 0c03 	subs.w	ip, r5, r3
   b6abc:	bf04      	itt	eq
   b6abe:	ebb6 0c02 	subseq.w	ip, r6, r2
   b6ac2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6ac6:	f150 0000 	adcs.w	r0, r0, #0
   b6aca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6ace:	bd70      	pop	{r4, r5, r6, pc}
   b6ad0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b6ad4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b6ad8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b6adc:	bfc2      	ittt	gt
   b6ade:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6ae2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6ae6:	bd70      	popgt	{r4, r5, r6, pc}
   b6ae8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6aec:	f04f 0e00 	mov.w	lr, #0
   b6af0:	3c01      	subs	r4, #1
   b6af2:	e690      	b.n	b6816 <__aeabi_dmul+0xde>
   b6af4:	ea45 0e06 	orr.w	lr, r5, r6
   b6af8:	e68d      	b.n	b6816 <__aeabi_dmul+0xde>
   b6afa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6afe:	ea94 0f0c 	teq	r4, ip
   b6b02:	bf08      	it	eq
   b6b04:	ea95 0f0c 	teqeq	r5, ip
   b6b08:	f43f af3b 	beq.w	b6982 <__aeabi_dmul+0x24a>
   b6b0c:	ea94 0f0c 	teq	r4, ip
   b6b10:	d10a      	bne.n	b6b28 <__aeabi_ddiv+0x19c>
   b6b12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b6b16:	f47f af34 	bne.w	b6982 <__aeabi_dmul+0x24a>
   b6b1a:	ea95 0f0c 	teq	r5, ip
   b6b1e:	f47f af25 	bne.w	b696c <__aeabi_dmul+0x234>
   b6b22:	4610      	mov	r0, r2
   b6b24:	4619      	mov	r1, r3
   b6b26:	e72c      	b.n	b6982 <__aeabi_dmul+0x24a>
   b6b28:	ea95 0f0c 	teq	r5, ip
   b6b2c:	d106      	bne.n	b6b3c <__aeabi_ddiv+0x1b0>
   b6b2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b6b32:	f43f aefd 	beq.w	b6930 <__aeabi_dmul+0x1f8>
   b6b36:	4610      	mov	r0, r2
   b6b38:	4619      	mov	r1, r3
   b6b3a:	e722      	b.n	b6982 <__aeabi_dmul+0x24a>
   b6b3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6b40:	bf18      	it	ne
   b6b42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6b46:	f47f aec5 	bne.w	b68d4 <__aeabi_dmul+0x19c>
   b6b4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b6b4e:	f47f af0d 	bne.w	b696c <__aeabi_dmul+0x234>
   b6b52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b6b56:	f47f aeeb 	bne.w	b6930 <__aeabi_dmul+0x1f8>
   b6b5a:	e712      	b.n	b6982 <__aeabi_dmul+0x24a>

000b6b5c <__gedf2>:
   b6b5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b6b60:	e006      	b.n	b6b70 <__cmpdf2+0x4>
   b6b62:	bf00      	nop

000b6b64 <__ledf2>:
   b6b64:	f04f 0c01 	mov.w	ip, #1
   b6b68:	e002      	b.n	b6b70 <__cmpdf2+0x4>
   b6b6a:	bf00      	nop

000b6b6c <__cmpdf2>:
   b6b6c:	f04f 0c01 	mov.w	ip, #1
   b6b70:	f84d cd04 	str.w	ip, [sp, #-4]!
   b6b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b6b80:	bf18      	it	ne
   b6b82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b6b86:	d01b      	beq.n	b6bc0 <__cmpdf2+0x54>
   b6b88:	b001      	add	sp, #4
   b6b8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b6b8e:	bf0c      	ite	eq
   b6b90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b6b94:	ea91 0f03 	teqne	r1, r3
   b6b98:	bf02      	ittt	eq
   b6b9a:	ea90 0f02 	teqeq	r0, r2
   b6b9e:	2000      	moveq	r0, #0
   b6ba0:	4770      	bxeq	lr
   b6ba2:	f110 0f00 	cmn.w	r0, #0
   b6ba6:	ea91 0f03 	teq	r1, r3
   b6baa:	bf58      	it	pl
   b6bac:	4299      	cmppl	r1, r3
   b6bae:	bf08      	it	eq
   b6bb0:	4290      	cmpeq	r0, r2
   b6bb2:	bf2c      	ite	cs
   b6bb4:	17d8      	asrcs	r0, r3, #31
   b6bb6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b6bba:	f040 0001 	orr.w	r0, r0, #1
   b6bbe:	4770      	bx	lr
   b6bc0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6bc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6bc8:	d102      	bne.n	b6bd0 <__cmpdf2+0x64>
   b6bca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b6bce:	d107      	bne.n	b6be0 <__cmpdf2+0x74>
   b6bd0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b6bd4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6bd8:	d1d6      	bne.n	b6b88 <__cmpdf2+0x1c>
   b6bda:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b6bde:	d0d3      	beq.n	b6b88 <__cmpdf2+0x1c>
   b6be0:	f85d 0b04 	ldr.w	r0, [sp], #4
   b6be4:	4770      	bx	lr
   b6be6:	bf00      	nop

000b6be8 <__aeabi_cdrcmple>:
   b6be8:	4684      	mov	ip, r0
   b6bea:	4610      	mov	r0, r2
   b6bec:	4662      	mov	r2, ip
   b6bee:	468c      	mov	ip, r1
   b6bf0:	4619      	mov	r1, r3
   b6bf2:	4663      	mov	r3, ip
   b6bf4:	e000      	b.n	b6bf8 <__aeabi_cdcmpeq>
   b6bf6:	bf00      	nop

000b6bf8 <__aeabi_cdcmpeq>:
   b6bf8:	b501      	push	{r0, lr}
   b6bfa:	f7ff ffb7 	bl	b6b6c <__cmpdf2>
   b6bfe:	2800      	cmp	r0, #0
   b6c00:	bf48      	it	mi
   b6c02:	f110 0f00 	cmnmi.w	r0, #0
   b6c06:	bd01      	pop	{r0, pc}

000b6c08 <__aeabi_dcmpeq>:
   b6c08:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6c0c:	f7ff fff4 	bl	b6bf8 <__aeabi_cdcmpeq>
   b6c10:	bf0c      	ite	eq
   b6c12:	2001      	moveq	r0, #1
   b6c14:	2000      	movne	r0, #0
   b6c16:	f85d fb08 	ldr.w	pc, [sp], #8
   b6c1a:	bf00      	nop

000b6c1c <__aeabi_dcmplt>:
   b6c1c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6c20:	f7ff ffea 	bl	b6bf8 <__aeabi_cdcmpeq>
   b6c24:	bf34      	ite	cc
   b6c26:	2001      	movcc	r0, #1
   b6c28:	2000      	movcs	r0, #0
   b6c2a:	f85d fb08 	ldr.w	pc, [sp], #8
   b6c2e:	bf00      	nop

000b6c30 <__aeabi_dcmple>:
   b6c30:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6c34:	f7ff ffe0 	bl	b6bf8 <__aeabi_cdcmpeq>
   b6c38:	bf94      	ite	ls
   b6c3a:	2001      	movls	r0, #1
   b6c3c:	2000      	movhi	r0, #0
   b6c3e:	f85d fb08 	ldr.w	pc, [sp], #8
   b6c42:	bf00      	nop

000b6c44 <__aeabi_dcmpge>:
   b6c44:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6c48:	f7ff ffce 	bl	b6be8 <__aeabi_cdrcmple>
   b6c4c:	bf94      	ite	ls
   b6c4e:	2001      	movls	r0, #1
   b6c50:	2000      	movhi	r0, #0
   b6c52:	f85d fb08 	ldr.w	pc, [sp], #8
   b6c56:	bf00      	nop

000b6c58 <__aeabi_dcmpgt>:
   b6c58:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6c5c:	f7ff ffc4 	bl	b6be8 <__aeabi_cdrcmple>
   b6c60:	bf34      	ite	cc
   b6c62:	2001      	movcc	r0, #1
   b6c64:	2000      	movcs	r0, #0
   b6c66:	f85d fb08 	ldr.w	pc, [sp], #8
   b6c6a:	bf00      	nop

000b6c6c <__aeabi_d2iz>:
   b6c6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b6c70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b6c74:	d215      	bcs.n	b6ca2 <__aeabi_d2iz+0x36>
   b6c76:	d511      	bpl.n	b6c9c <__aeabi_d2iz+0x30>
   b6c78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b6c7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b6c80:	d912      	bls.n	b6ca8 <__aeabi_d2iz+0x3c>
   b6c82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b6c86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b6c8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b6c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b6c92:	fa23 f002 	lsr.w	r0, r3, r2
   b6c96:	bf18      	it	ne
   b6c98:	4240      	negne	r0, r0
   b6c9a:	4770      	bx	lr
   b6c9c:	f04f 0000 	mov.w	r0, #0
   b6ca0:	4770      	bx	lr
   b6ca2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b6ca6:	d105      	bne.n	b6cb4 <__aeabi_d2iz+0x48>
   b6ca8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b6cac:	bf08      	it	eq
   b6cae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b6cb2:	4770      	bx	lr
   b6cb4:	f04f 0000 	mov.w	r0, #0
   b6cb8:	4770      	bx	lr
   b6cba:	bf00      	nop

000b6cbc <__aeabi_d2uiz>:
   b6cbc:	004a      	lsls	r2, r1, #1
   b6cbe:	d211      	bcs.n	b6ce4 <__aeabi_d2uiz+0x28>
   b6cc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b6cc4:	d211      	bcs.n	b6cea <__aeabi_d2uiz+0x2e>
   b6cc6:	d50d      	bpl.n	b6ce4 <__aeabi_d2uiz+0x28>
   b6cc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b6ccc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b6cd0:	d40e      	bmi.n	b6cf0 <__aeabi_d2uiz+0x34>
   b6cd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b6cd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b6cda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b6cde:	fa23 f002 	lsr.w	r0, r3, r2
   b6ce2:	4770      	bx	lr
   b6ce4:	f04f 0000 	mov.w	r0, #0
   b6ce8:	4770      	bx	lr
   b6cea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b6cee:	d102      	bne.n	b6cf6 <__aeabi_d2uiz+0x3a>
   b6cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6cf4:	4770      	bx	lr
   b6cf6:	f04f 0000 	mov.w	r0, #0
   b6cfa:	4770      	bx	lr

000b6cfc <__aeabi_d2ulz>:
   b6cfc:	b5d0      	push	{r4, r6, r7, lr}
   b6cfe:	4b0c      	ldr	r3, [pc, #48]	; (b6d30 <__aeabi_d2ulz+0x34>)
   b6d00:	2200      	movs	r2, #0
   b6d02:	4606      	mov	r6, r0
   b6d04:	460f      	mov	r7, r1
   b6d06:	f7ff fd17 	bl	b6738 <__aeabi_dmul>
   b6d0a:	f7ff ffd7 	bl	b6cbc <__aeabi_d2uiz>
   b6d0e:	4604      	mov	r4, r0
   b6d10:	f7ff fc98 	bl	b6644 <__aeabi_ui2d>
   b6d14:	4b07      	ldr	r3, [pc, #28]	; (b6d34 <__aeabi_d2ulz+0x38>)
   b6d16:	2200      	movs	r2, #0
   b6d18:	f7ff fd0e 	bl	b6738 <__aeabi_dmul>
   b6d1c:	4602      	mov	r2, r0
   b6d1e:	460b      	mov	r3, r1
   b6d20:	4630      	mov	r0, r6
   b6d22:	4639      	mov	r1, r7
   b6d24:	f7ff fb50 	bl	b63c8 <__aeabi_dsub>
   b6d28:	f7ff ffc8 	bl	b6cbc <__aeabi_d2uiz>
   b6d2c:	4621      	mov	r1, r4
   b6d2e:	bdd0      	pop	{r4, r6, r7, pc}
   b6d30:	3df00000 	.word	0x3df00000
   b6d34:	41f00000 	.word	0x41f00000

000b6d38 <atexit>:
   b6d38:	2300      	movs	r3, #0
   b6d3a:	4601      	mov	r1, r0
   b6d3c:	461a      	mov	r2, r3
   b6d3e:	4618      	mov	r0, r3
   b6d40:	f000 bf08 	b.w	b7b54 <__register_exitproc>

000b6d44 <atof>:
   b6d44:	2100      	movs	r1, #0
   b6d46:	f000 bef9 	b.w	b7b3c <strtod>

000b6d4a <ldiv>:
   b6d4a:	2900      	cmp	r1, #0
   b6d4c:	b510      	push	{r4, lr}
   b6d4e:	fb91 f4f2 	sdiv	r4, r1, r2
   b6d52:	fb02 1314 	mls	r3, r2, r4, r1
   b6d56:	db06      	blt.n	b6d66 <ldiv+0x1c>
   b6d58:	2b00      	cmp	r3, #0
   b6d5a:	da01      	bge.n	b6d60 <ldiv+0x16>
   b6d5c:	3401      	adds	r4, #1
   b6d5e:	1a9b      	subs	r3, r3, r2
   b6d60:	e9c0 4300 	strd	r4, r3, [r0]
   b6d64:	bd10      	pop	{r4, pc}
   b6d66:	2b00      	cmp	r3, #0
   b6d68:	bfc4      	itt	gt
   b6d6a:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
   b6d6e:	189b      	addgt	r3, r3, r2
   b6d70:	e7f6      	b.n	b6d60 <ldiv+0x16>

000b6d72 <memcpy>:
   b6d72:	440a      	add	r2, r1
   b6d74:	4291      	cmp	r1, r2
   b6d76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b6d7a:	d100      	bne.n	b6d7e <memcpy+0xc>
   b6d7c:	4770      	bx	lr
   b6d7e:	b510      	push	{r4, lr}
   b6d80:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6d84:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6d88:	4291      	cmp	r1, r2
   b6d8a:	d1f9      	bne.n	b6d80 <memcpy+0xe>
   b6d8c:	bd10      	pop	{r4, pc}

000b6d8e <memmove>:
   b6d8e:	4288      	cmp	r0, r1
   b6d90:	b510      	push	{r4, lr}
   b6d92:	eb01 0402 	add.w	r4, r1, r2
   b6d96:	d902      	bls.n	b6d9e <memmove+0x10>
   b6d98:	4284      	cmp	r4, r0
   b6d9a:	4623      	mov	r3, r4
   b6d9c:	d807      	bhi.n	b6dae <memmove+0x20>
   b6d9e:	1e43      	subs	r3, r0, #1
   b6da0:	42a1      	cmp	r1, r4
   b6da2:	d008      	beq.n	b6db6 <memmove+0x28>
   b6da4:	f811 2b01 	ldrb.w	r2, [r1], #1
   b6da8:	f803 2f01 	strb.w	r2, [r3, #1]!
   b6dac:	e7f8      	b.n	b6da0 <memmove+0x12>
   b6dae:	4402      	add	r2, r0
   b6db0:	4601      	mov	r1, r0
   b6db2:	428a      	cmp	r2, r1
   b6db4:	d100      	bne.n	b6db8 <memmove+0x2a>
   b6db6:	bd10      	pop	{r4, pc}
   b6db8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b6dbc:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b6dc0:	e7f7      	b.n	b6db2 <memmove+0x24>

000b6dc2 <memset>:
   b6dc2:	4402      	add	r2, r0
   b6dc4:	4603      	mov	r3, r0
   b6dc6:	4293      	cmp	r3, r2
   b6dc8:	d100      	bne.n	b6dcc <memset+0xa>
   b6dca:	4770      	bx	lr
   b6dcc:	f803 1b01 	strb.w	r1, [r3], #1
   b6dd0:	e7f9      	b.n	b6dc6 <memset+0x4>
	...

000b6dd4 <srand>:
   b6dd4:	b538      	push	{r3, r4, r5, lr}
   b6dd6:	4b10      	ldr	r3, [pc, #64]	; (b6e18 <srand+0x44>)
   b6dd8:	681d      	ldr	r5, [r3, #0]
   b6dda:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6ddc:	4604      	mov	r4, r0
   b6dde:	b9b3      	cbnz	r3, b6e0e <srand+0x3a>
   b6de0:	2018      	movs	r0, #24
   b6de2:	f7fe f8ff 	bl	b4fe4 <malloc>
   b6de6:	4602      	mov	r2, r0
   b6de8:	63a8      	str	r0, [r5, #56]	; 0x38
   b6dea:	b920      	cbnz	r0, b6df6 <srand+0x22>
   b6dec:	4b0b      	ldr	r3, [pc, #44]	; (b6e1c <srand+0x48>)
   b6dee:	480c      	ldr	r0, [pc, #48]	; (b6e20 <srand+0x4c>)
   b6df0:	2142      	movs	r1, #66	; 0x42
   b6df2:	f7fe f91f 	bl	b5034 <__assert_func>
   b6df6:	490b      	ldr	r1, [pc, #44]	; (b6e24 <srand+0x50>)
   b6df8:	4b0b      	ldr	r3, [pc, #44]	; (b6e28 <srand+0x54>)
   b6dfa:	e9c0 1300 	strd	r1, r3, [r0]
   b6dfe:	4b0b      	ldr	r3, [pc, #44]	; (b6e2c <srand+0x58>)
   b6e00:	6083      	str	r3, [r0, #8]
   b6e02:	230b      	movs	r3, #11
   b6e04:	8183      	strh	r3, [r0, #12]
   b6e06:	2100      	movs	r1, #0
   b6e08:	2001      	movs	r0, #1
   b6e0a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6e0e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6e10:	2200      	movs	r2, #0
   b6e12:	611c      	str	r4, [r3, #16]
   b6e14:	615a      	str	r2, [r3, #20]
   b6e16:	bd38      	pop	{r3, r4, r5, pc}
   b6e18:	2003e35c 	.word	0x2003e35c
   b6e1c:	000b9409 	.word	0x000b9409
   b6e20:	000b9420 	.word	0x000b9420
   b6e24:	abcd330e 	.word	0xabcd330e
   b6e28:	e66d1234 	.word	0xe66d1234
   b6e2c:	0005deec 	.word	0x0005deec

000b6e30 <strcmp>:
   b6e30:	f810 2b01 	ldrb.w	r2, [r0], #1
   b6e34:	f811 3b01 	ldrb.w	r3, [r1], #1
   b6e38:	2a01      	cmp	r2, #1
   b6e3a:	bf28      	it	cs
   b6e3c:	429a      	cmpcs	r2, r3
   b6e3e:	d0f7      	beq.n	b6e30 <strcmp>
   b6e40:	1ad0      	subs	r0, r2, r3
   b6e42:	4770      	bx	lr

000b6e44 <strcpy>:
   b6e44:	4603      	mov	r3, r0
   b6e46:	f811 2b01 	ldrb.w	r2, [r1], #1
   b6e4a:	f803 2b01 	strb.w	r2, [r3], #1
   b6e4e:	2a00      	cmp	r2, #0
   b6e50:	d1f9      	bne.n	b6e46 <strcpy+0x2>
   b6e52:	4770      	bx	lr

000b6e54 <strlen>:
   b6e54:	4603      	mov	r3, r0
   b6e56:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6e5a:	2a00      	cmp	r2, #0
   b6e5c:	d1fb      	bne.n	b6e56 <strlen+0x2>
   b6e5e:	1a18      	subs	r0, r3, r0
   b6e60:	3801      	subs	r0, #1
   b6e62:	4770      	bx	lr

000b6e64 <strncasecmp>:
   b6e64:	b570      	push	{r4, r5, r6, lr}
   b6e66:	4e0f      	ldr	r6, [pc, #60]	; (b6ea4 <strncasecmp+0x40>)
   b6e68:	4604      	mov	r4, r0
   b6e6a:	440a      	add	r2, r1
   b6e6c:	428a      	cmp	r2, r1
   b6e6e:	d101      	bne.n	b6e74 <strncasecmp+0x10>
   b6e70:	2000      	movs	r0, #0
   b6e72:	e013      	b.n	b6e9c <strncasecmp+0x38>
   b6e74:	f814 3b01 	ldrb.w	r3, [r4], #1
   b6e78:	5d98      	ldrb	r0, [r3, r6]
   b6e7a:	f000 0003 	and.w	r0, r0, #3
   b6e7e:	2801      	cmp	r0, #1
   b6e80:	f811 0b01 	ldrb.w	r0, [r1], #1
   b6e84:	5c35      	ldrb	r5, [r6, r0]
   b6e86:	f005 0503 	and.w	r5, r5, #3
   b6e8a:	bf08      	it	eq
   b6e8c:	3320      	addeq	r3, #32
   b6e8e:	2d01      	cmp	r5, #1
   b6e90:	bf08      	it	eq
   b6e92:	3020      	addeq	r0, #32
   b6e94:	1a1b      	subs	r3, r3, r0
   b6e96:	d102      	bne.n	b6e9e <strncasecmp+0x3a>
   b6e98:	2800      	cmp	r0, #0
   b6e9a:	d1e7      	bne.n	b6e6c <strncasecmp+0x8>
   b6e9c:	bd70      	pop	{r4, r5, r6, pc}
   b6e9e:	4618      	mov	r0, r3
   b6ea0:	e7fc      	b.n	b6e9c <strncasecmp+0x38>
   b6ea2:	bf00      	nop
   b6ea4:	000b94d9 	.word	0x000b94d9

000b6ea8 <strncmp>:
   b6ea8:	b510      	push	{r4, lr}
   b6eaa:	b17a      	cbz	r2, b6ecc <strncmp+0x24>
   b6eac:	4603      	mov	r3, r0
   b6eae:	3901      	subs	r1, #1
   b6eb0:	1884      	adds	r4, r0, r2
   b6eb2:	f813 0b01 	ldrb.w	r0, [r3], #1
   b6eb6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b6eba:	4290      	cmp	r0, r2
   b6ebc:	d101      	bne.n	b6ec2 <strncmp+0x1a>
   b6ebe:	42a3      	cmp	r3, r4
   b6ec0:	d101      	bne.n	b6ec6 <strncmp+0x1e>
   b6ec2:	1a80      	subs	r0, r0, r2
   b6ec4:	bd10      	pop	{r4, pc}
   b6ec6:	2800      	cmp	r0, #0
   b6ec8:	d1f3      	bne.n	b6eb2 <strncmp+0xa>
   b6eca:	e7fa      	b.n	b6ec2 <strncmp+0x1a>
   b6ecc:	4610      	mov	r0, r2
   b6ece:	e7f9      	b.n	b6ec4 <strncmp+0x1c>

000b6ed0 <strncpy>:
   b6ed0:	b510      	push	{r4, lr}
   b6ed2:	3901      	subs	r1, #1
   b6ed4:	4603      	mov	r3, r0
   b6ed6:	b132      	cbz	r2, b6ee6 <strncpy+0x16>
   b6ed8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b6edc:	f803 4b01 	strb.w	r4, [r3], #1
   b6ee0:	3a01      	subs	r2, #1
   b6ee2:	2c00      	cmp	r4, #0
   b6ee4:	d1f7      	bne.n	b6ed6 <strncpy+0x6>
   b6ee6:	441a      	add	r2, r3
   b6ee8:	2100      	movs	r1, #0
   b6eea:	4293      	cmp	r3, r2
   b6eec:	d100      	bne.n	b6ef0 <strncpy+0x20>
   b6eee:	bd10      	pop	{r4, pc}
   b6ef0:	f803 1b01 	strb.w	r1, [r3], #1
   b6ef4:	e7f9      	b.n	b6eea <strncpy+0x1a>

000b6ef6 <sulp>:
   b6ef6:	b570      	push	{r4, r5, r6, lr}
   b6ef8:	4604      	mov	r4, r0
   b6efa:	460d      	mov	r5, r1
   b6efc:	ec45 4b10 	vmov	d0, r4, r5
   b6f00:	4616      	mov	r6, r2
   b6f02:	f001 fd81 	bl	b8a08 <__ulp>
   b6f06:	ec51 0b10 	vmov	r0, r1, d0
   b6f0a:	b17e      	cbz	r6, b6f2c <sulp+0x36>
   b6f0c:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b6f10:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b6f14:	2b00      	cmp	r3, #0
   b6f16:	dd09      	ble.n	b6f2c <sulp+0x36>
   b6f18:	051b      	lsls	r3, r3, #20
   b6f1a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b6f1e:	2400      	movs	r4, #0
   b6f20:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b6f24:	4622      	mov	r2, r4
   b6f26:	462b      	mov	r3, r5
   b6f28:	f7ff fc06 	bl	b6738 <__aeabi_dmul>
   b6f2c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b6f30 <_strtod_l>:
   b6f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6f34:	ed2d 8b02 	vpush	{d8}
   b6f38:	b09d      	sub	sp, #116	; 0x74
   b6f3a:	461f      	mov	r7, r3
   b6f3c:	2300      	movs	r3, #0
   b6f3e:	9318      	str	r3, [sp, #96]	; 0x60
   b6f40:	4ba2      	ldr	r3, [pc, #648]	; (b71cc <_strtod_l+0x29c>)
   b6f42:	9213      	str	r2, [sp, #76]	; 0x4c
   b6f44:	681b      	ldr	r3, [r3, #0]
   b6f46:	9305      	str	r3, [sp, #20]
   b6f48:	4604      	mov	r4, r0
   b6f4a:	4618      	mov	r0, r3
   b6f4c:	4688      	mov	r8, r1
   b6f4e:	f7ff ff81 	bl	b6e54 <strlen>
   b6f52:	f04f 0a00 	mov.w	sl, #0
   b6f56:	4605      	mov	r5, r0
   b6f58:	f04f 0b00 	mov.w	fp, #0
   b6f5c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b6f60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b6f62:	781a      	ldrb	r2, [r3, #0]
   b6f64:	2a2b      	cmp	r2, #43	; 0x2b
   b6f66:	d04e      	beq.n	b7006 <_strtod_l+0xd6>
   b6f68:	d83b      	bhi.n	b6fe2 <_strtod_l+0xb2>
   b6f6a:	2a0d      	cmp	r2, #13
   b6f6c:	d834      	bhi.n	b6fd8 <_strtod_l+0xa8>
   b6f6e:	2a08      	cmp	r2, #8
   b6f70:	d834      	bhi.n	b6fdc <_strtod_l+0xac>
   b6f72:	2a00      	cmp	r2, #0
   b6f74:	d03e      	beq.n	b6ff4 <_strtod_l+0xc4>
   b6f76:	2300      	movs	r3, #0
   b6f78:	930a      	str	r3, [sp, #40]	; 0x28
   b6f7a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b6f7c:	7833      	ldrb	r3, [r6, #0]
   b6f7e:	2b30      	cmp	r3, #48	; 0x30
   b6f80:	f040 80b0 	bne.w	b70e4 <_strtod_l+0x1b4>
   b6f84:	7873      	ldrb	r3, [r6, #1]
   b6f86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b6f8a:	2b58      	cmp	r3, #88	; 0x58
   b6f8c:	d168      	bne.n	b7060 <_strtod_l+0x130>
   b6f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b6f90:	9301      	str	r3, [sp, #4]
   b6f92:	ab18      	add	r3, sp, #96	; 0x60
   b6f94:	9702      	str	r7, [sp, #8]
   b6f96:	9300      	str	r3, [sp, #0]
   b6f98:	4a8d      	ldr	r2, [pc, #564]	; (b71d0 <_strtod_l+0x2a0>)
   b6f9a:	ab19      	add	r3, sp, #100	; 0x64
   b6f9c:	a917      	add	r1, sp, #92	; 0x5c
   b6f9e:	4620      	mov	r0, r4
   b6fa0:	f000 fea2 	bl	b7ce8 <__gethex>
   b6fa4:	f010 0707 	ands.w	r7, r0, #7
   b6fa8:	4605      	mov	r5, r0
   b6faa:	d005      	beq.n	b6fb8 <_strtod_l+0x88>
   b6fac:	2f06      	cmp	r7, #6
   b6fae:	d12c      	bne.n	b700a <_strtod_l+0xda>
   b6fb0:	3601      	adds	r6, #1
   b6fb2:	2300      	movs	r3, #0
   b6fb4:	9617      	str	r6, [sp, #92]	; 0x5c
   b6fb6:	930a      	str	r3, [sp, #40]	; 0x28
   b6fb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b6fba:	2b00      	cmp	r3, #0
   b6fbc:	f040 8590 	bne.w	b7ae0 <_strtod_l+0xbb0>
   b6fc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b6fc2:	b1eb      	cbz	r3, b7000 <_strtod_l+0xd0>
   b6fc4:	4652      	mov	r2, sl
   b6fc6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b6fca:	ec43 2b10 	vmov	d0, r2, r3
   b6fce:	b01d      	add	sp, #116	; 0x74
   b6fd0:	ecbd 8b02 	vpop	{d8}
   b6fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6fd8:	2a20      	cmp	r2, #32
   b6fda:	d1cc      	bne.n	b6f76 <_strtod_l+0x46>
   b6fdc:	3301      	adds	r3, #1
   b6fde:	9317      	str	r3, [sp, #92]	; 0x5c
   b6fe0:	e7be      	b.n	b6f60 <_strtod_l+0x30>
   b6fe2:	2a2d      	cmp	r2, #45	; 0x2d
   b6fe4:	d1c7      	bne.n	b6f76 <_strtod_l+0x46>
   b6fe6:	2201      	movs	r2, #1
   b6fe8:	920a      	str	r2, [sp, #40]	; 0x28
   b6fea:	1c5a      	adds	r2, r3, #1
   b6fec:	9217      	str	r2, [sp, #92]	; 0x5c
   b6fee:	785b      	ldrb	r3, [r3, #1]
   b6ff0:	2b00      	cmp	r3, #0
   b6ff2:	d1c2      	bne.n	b6f7a <_strtod_l+0x4a>
   b6ff4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b6ff6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b6ffa:	2b00      	cmp	r3, #0
   b6ffc:	f040 856e 	bne.w	b7adc <_strtod_l+0xbac>
   b7000:	4652      	mov	r2, sl
   b7002:	465b      	mov	r3, fp
   b7004:	e7e1      	b.n	b6fca <_strtod_l+0x9a>
   b7006:	2200      	movs	r2, #0
   b7008:	e7ee      	b.n	b6fe8 <_strtod_l+0xb8>
   b700a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b700c:	b13a      	cbz	r2, b701e <_strtod_l+0xee>
   b700e:	2135      	movs	r1, #53	; 0x35
   b7010:	a81a      	add	r0, sp, #104	; 0x68
   b7012:	f001 fe04 	bl	b8c1e <__copybits>
   b7016:	9918      	ldr	r1, [sp, #96]	; 0x60
   b7018:	4620      	mov	r0, r4
   b701a:	f001 f9c3 	bl	b83a4 <_Bfree>
   b701e:	3f01      	subs	r7, #1
   b7020:	2f04      	cmp	r7, #4
   b7022:	d806      	bhi.n	b7032 <_strtod_l+0x102>
   b7024:	e8df f007 	tbb	[pc, r7]
   b7028:	1714030a 	.word	0x1714030a
   b702c:	0a          	.byte	0x0a
   b702d:	00          	.byte	0x00
   b702e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b7032:	0728      	lsls	r0, r5, #28
   b7034:	d5c0      	bpl.n	b6fb8 <_strtod_l+0x88>
   b7036:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b703a:	e7bd      	b.n	b6fb8 <_strtod_l+0x88>
   b703c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b7040:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b7042:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b7046:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b704a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b704e:	e7f0      	b.n	b7032 <_strtod_l+0x102>
   b7050:	f8df b180 	ldr.w	fp, [pc, #384]	; b71d4 <_strtod_l+0x2a4>
   b7054:	e7ed      	b.n	b7032 <_strtod_l+0x102>
   b7056:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b705a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b705e:	e7e8      	b.n	b7032 <_strtod_l+0x102>
   b7060:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7062:	1c5a      	adds	r2, r3, #1
   b7064:	9217      	str	r2, [sp, #92]	; 0x5c
   b7066:	785b      	ldrb	r3, [r3, #1]
   b7068:	2b30      	cmp	r3, #48	; 0x30
   b706a:	d0f9      	beq.n	b7060 <_strtod_l+0x130>
   b706c:	2b00      	cmp	r3, #0
   b706e:	d0a3      	beq.n	b6fb8 <_strtod_l+0x88>
   b7070:	2301      	movs	r3, #1
   b7072:	f04f 0900 	mov.w	r9, #0
   b7076:	9304      	str	r3, [sp, #16]
   b7078:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b707a:	9308      	str	r3, [sp, #32]
   b707c:	f8cd 901c 	str.w	r9, [sp, #28]
   b7080:	464f      	mov	r7, r9
   b7082:	220a      	movs	r2, #10
   b7084:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b7086:	7806      	ldrb	r6, [r0, #0]
   b7088:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b708c:	b2d9      	uxtb	r1, r3
   b708e:	2909      	cmp	r1, #9
   b7090:	d92a      	bls.n	b70e8 <_strtod_l+0x1b8>
   b7092:	9905      	ldr	r1, [sp, #20]
   b7094:	462a      	mov	r2, r5
   b7096:	f7ff ff07 	bl	b6ea8 <strncmp>
   b709a:	b398      	cbz	r0, b7104 <_strtod_l+0x1d4>
   b709c:	2000      	movs	r0, #0
   b709e:	4632      	mov	r2, r6
   b70a0:	463d      	mov	r5, r7
   b70a2:	9005      	str	r0, [sp, #20]
   b70a4:	4603      	mov	r3, r0
   b70a6:	2a65      	cmp	r2, #101	; 0x65
   b70a8:	d001      	beq.n	b70ae <_strtod_l+0x17e>
   b70aa:	2a45      	cmp	r2, #69	; 0x45
   b70ac:	d118      	bne.n	b70e0 <_strtod_l+0x1b0>
   b70ae:	b91d      	cbnz	r5, b70b8 <_strtod_l+0x188>
   b70b0:	9a04      	ldr	r2, [sp, #16]
   b70b2:	4302      	orrs	r2, r0
   b70b4:	d09e      	beq.n	b6ff4 <_strtod_l+0xc4>
   b70b6:	2500      	movs	r5, #0
   b70b8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b70bc:	f108 0201 	add.w	r2, r8, #1
   b70c0:	9217      	str	r2, [sp, #92]	; 0x5c
   b70c2:	f898 2001 	ldrb.w	r2, [r8, #1]
   b70c6:	2a2b      	cmp	r2, #43	; 0x2b
   b70c8:	d075      	beq.n	b71b6 <_strtod_l+0x286>
   b70ca:	2a2d      	cmp	r2, #45	; 0x2d
   b70cc:	d07b      	beq.n	b71c6 <_strtod_l+0x296>
   b70ce:	f04f 0c00 	mov.w	ip, #0
   b70d2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b70d6:	2909      	cmp	r1, #9
   b70d8:	f240 8082 	bls.w	b71e0 <_strtod_l+0x2b0>
   b70dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b70e0:	2600      	movs	r6, #0
   b70e2:	e09d      	b.n	b7220 <_strtod_l+0x2f0>
   b70e4:	2300      	movs	r3, #0
   b70e6:	e7c4      	b.n	b7072 <_strtod_l+0x142>
   b70e8:	2f08      	cmp	r7, #8
   b70ea:	bfd8      	it	le
   b70ec:	9907      	ldrle	r1, [sp, #28]
   b70ee:	f100 0001 	add.w	r0, r0, #1
   b70f2:	bfda      	itte	le
   b70f4:	fb02 3301 	mlale	r3, r2, r1, r3
   b70f8:	9307      	strle	r3, [sp, #28]
   b70fa:	fb02 3909 	mlagt	r9, r2, r9, r3
   b70fe:	3701      	adds	r7, #1
   b7100:	9017      	str	r0, [sp, #92]	; 0x5c
   b7102:	e7bf      	b.n	b7084 <_strtod_l+0x154>
   b7104:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7106:	195a      	adds	r2, r3, r5
   b7108:	9217      	str	r2, [sp, #92]	; 0x5c
   b710a:	5d5a      	ldrb	r2, [r3, r5]
   b710c:	2f00      	cmp	r7, #0
   b710e:	d037      	beq.n	b7180 <_strtod_l+0x250>
   b7110:	9005      	str	r0, [sp, #20]
   b7112:	463d      	mov	r5, r7
   b7114:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b7118:	2b09      	cmp	r3, #9
   b711a:	d912      	bls.n	b7142 <_strtod_l+0x212>
   b711c:	2301      	movs	r3, #1
   b711e:	e7c2      	b.n	b70a6 <_strtod_l+0x176>
   b7120:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7122:	1c5a      	adds	r2, r3, #1
   b7124:	9217      	str	r2, [sp, #92]	; 0x5c
   b7126:	785a      	ldrb	r2, [r3, #1]
   b7128:	3001      	adds	r0, #1
   b712a:	2a30      	cmp	r2, #48	; 0x30
   b712c:	d0f8      	beq.n	b7120 <_strtod_l+0x1f0>
   b712e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b7132:	2b08      	cmp	r3, #8
   b7134:	f200 84d9 	bhi.w	b7aea <_strtod_l+0xbba>
   b7138:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b713a:	9005      	str	r0, [sp, #20]
   b713c:	2000      	movs	r0, #0
   b713e:	9308      	str	r3, [sp, #32]
   b7140:	4605      	mov	r5, r0
   b7142:	3a30      	subs	r2, #48	; 0x30
   b7144:	f100 0301 	add.w	r3, r0, #1
   b7148:	d014      	beq.n	b7174 <_strtod_l+0x244>
   b714a:	9905      	ldr	r1, [sp, #20]
   b714c:	4419      	add	r1, r3
   b714e:	9105      	str	r1, [sp, #20]
   b7150:	462b      	mov	r3, r5
   b7152:	eb00 0e05 	add.w	lr, r0, r5
   b7156:	210a      	movs	r1, #10
   b7158:	4573      	cmp	r3, lr
   b715a:	d113      	bne.n	b7184 <_strtod_l+0x254>
   b715c:	182b      	adds	r3, r5, r0
   b715e:	2b08      	cmp	r3, #8
   b7160:	f105 0501 	add.w	r5, r5, #1
   b7164:	4405      	add	r5, r0
   b7166:	dc1c      	bgt.n	b71a2 <_strtod_l+0x272>
   b7168:	9907      	ldr	r1, [sp, #28]
   b716a:	230a      	movs	r3, #10
   b716c:	fb03 2301 	mla	r3, r3, r1, r2
   b7170:	9307      	str	r3, [sp, #28]
   b7172:	2300      	movs	r3, #0
   b7174:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b7176:	1c51      	adds	r1, r2, #1
   b7178:	9117      	str	r1, [sp, #92]	; 0x5c
   b717a:	7852      	ldrb	r2, [r2, #1]
   b717c:	4618      	mov	r0, r3
   b717e:	e7c9      	b.n	b7114 <_strtod_l+0x1e4>
   b7180:	4638      	mov	r0, r7
   b7182:	e7d2      	b.n	b712a <_strtod_l+0x1fa>
   b7184:	2b08      	cmp	r3, #8
   b7186:	dc04      	bgt.n	b7192 <_strtod_l+0x262>
   b7188:	9e07      	ldr	r6, [sp, #28]
   b718a:	434e      	muls	r6, r1
   b718c:	9607      	str	r6, [sp, #28]
   b718e:	3301      	adds	r3, #1
   b7190:	e7e2      	b.n	b7158 <_strtod_l+0x228>
   b7192:	f103 0c01 	add.w	ip, r3, #1
   b7196:	f1bc 0f10 	cmp.w	ip, #16
   b719a:	bfd8      	it	le
   b719c:	fb01 f909 	mulle.w	r9, r1, r9
   b71a0:	e7f5      	b.n	b718e <_strtod_l+0x25e>
   b71a2:	2d10      	cmp	r5, #16
   b71a4:	bfdc      	itt	le
   b71a6:	230a      	movle	r3, #10
   b71a8:	fb03 2909 	mlale	r9, r3, r9, r2
   b71ac:	e7e1      	b.n	b7172 <_strtod_l+0x242>
   b71ae:	2300      	movs	r3, #0
   b71b0:	9305      	str	r3, [sp, #20]
   b71b2:	2301      	movs	r3, #1
   b71b4:	e77c      	b.n	b70b0 <_strtod_l+0x180>
   b71b6:	f04f 0c00 	mov.w	ip, #0
   b71ba:	f108 0202 	add.w	r2, r8, #2
   b71be:	9217      	str	r2, [sp, #92]	; 0x5c
   b71c0:	f898 2002 	ldrb.w	r2, [r8, #2]
   b71c4:	e785      	b.n	b70d2 <_strtod_l+0x1a2>
   b71c6:	f04f 0c01 	mov.w	ip, #1
   b71ca:	e7f6      	b.n	b71ba <_strtod_l+0x28a>
   b71cc:	000b964c 	.word	0x000b964c
   b71d0:	000b9488 	.word	0x000b9488
   b71d4:	7ff00000 	.word	0x7ff00000
   b71d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b71da:	1c51      	adds	r1, r2, #1
   b71dc:	9117      	str	r1, [sp, #92]	; 0x5c
   b71de:	7852      	ldrb	r2, [r2, #1]
   b71e0:	2a30      	cmp	r2, #48	; 0x30
   b71e2:	d0f9      	beq.n	b71d8 <_strtod_l+0x2a8>
   b71e4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b71e8:	2908      	cmp	r1, #8
   b71ea:	f63f af79 	bhi.w	b70e0 <_strtod_l+0x1b0>
   b71ee:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b71f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b71f4:	9206      	str	r2, [sp, #24]
   b71f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b71f8:	1c51      	adds	r1, r2, #1
   b71fa:	9117      	str	r1, [sp, #92]	; 0x5c
   b71fc:	7852      	ldrb	r2, [r2, #1]
   b71fe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b7202:	2e09      	cmp	r6, #9
   b7204:	d937      	bls.n	b7276 <_strtod_l+0x346>
   b7206:	9e06      	ldr	r6, [sp, #24]
   b7208:	1b89      	subs	r1, r1, r6
   b720a:	2908      	cmp	r1, #8
   b720c:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b7210:	dc02      	bgt.n	b7218 <_strtod_l+0x2e8>
   b7212:	4576      	cmp	r6, lr
   b7214:	bfa8      	it	ge
   b7216:	4676      	movge	r6, lr
   b7218:	f1bc 0f00 	cmp.w	ip, #0
   b721c:	d000      	beq.n	b7220 <_strtod_l+0x2f0>
   b721e:	4276      	negs	r6, r6
   b7220:	2d00      	cmp	r5, #0
   b7222:	d14d      	bne.n	b72c0 <_strtod_l+0x390>
   b7224:	9904      	ldr	r1, [sp, #16]
   b7226:	4301      	orrs	r1, r0
   b7228:	f47f aec6 	bne.w	b6fb8 <_strtod_l+0x88>
   b722c:	2b00      	cmp	r3, #0
   b722e:	f47f aee1 	bne.w	b6ff4 <_strtod_l+0xc4>
   b7232:	2a69      	cmp	r2, #105	; 0x69
   b7234:	d027      	beq.n	b7286 <_strtod_l+0x356>
   b7236:	dc24      	bgt.n	b7282 <_strtod_l+0x352>
   b7238:	2a49      	cmp	r2, #73	; 0x49
   b723a:	d024      	beq.n	b7286 <_strtod_l+0x356>
   b723c:	2a4e      	cmp	r2, #78	; 0x4e
   b723e:	f47f aed9 	bne.w	b6ff4 <_strtod_l+0xc4>
   b7242:	499f      	ldr	r1, [pc, #636]	; (b74c0 <_strtod_l+0x590>)
   b7244:	a817      	add	r0, sp, #92	; 0x5c
   b7246:	f000 ffa7 	bl	b8198 <__match>
   b724a:	2800      	cmp	r0, #0
   b724c:	f43f aed2 	beq.w	b6ff4 <_strtod_l+0xc4>
   b7250:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7252:	781b      	ldrb	r3, [r3, #0]
   b7254:	2b28      	cmp	r3, #40	; 0x28
   b7256:	d12d      	bne.n	b72b4 <_strtod_l+0x384>
   b7258:	499a      	ldr	r1, [pc, #616]	; (b74c4 <_strtod_l+0x594>)
   b725a:	aa1a      	add	r2, sp, #104	; 0x68
   b725c:	a817      	add	r0, sp, #92	; 0x5c
   b725e:	f000 ffaf 	bl	b81c0 <__hexnan>
   b7262:	2805      	cmp	r0, #5
   b7264:	d126      	bne.n	b72b4 <_strtod_l+0x384>
   b7266:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b7268:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b726c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b7270:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b7274:	e6a0      	b.n	b6fb8 <_strtod_l+0x88>
   b7276:	210a      	movs	r1, #10
   b7278:	fb01 2e0e 	mla	lr, r1, lr, r2
   b727c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b7280:	e7b9      	b.n	b71f6 <_strtod_l+0x2c6>
   b7282:	2a6e      	cmp	r2, #110	; 0x6e
   b7284:	e7db      	b.n	b723e <_strtod_l+0x30e>
   b7286:	4990      	ldr	r1, [pc, #576]	; (b74c8 <_strtod_l+0x598>)
   b7288:	a817      	add	r0, sp, #92	; 0x5c
   b728a:	f000 ff85 	bl	b8198 <__match>
   b728e:	2800      	cmp	r0, #0
   b7290:	f43f aeb0 	beq.w	b6ff4 <_strtod_l+0xc4>
   b7294:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7296:	498d      	ldr	r1, [pc, #564]	; (b74cc <_strtod_l+0x59c>)
   b7298:	3b01      	subs	r3, #1
   b729a:	a817      	add	r0, sp, #92	; 0x5c
   b729c:	9317      	str	r3, [sp, #92]	; 0x5c
   b729e:	f000 ff7b 	bl	b8198 <__match>
   b72a2:	b910      	cbnz	r0, b72aa <_strtod_l+0x37a>
   b72a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b72a6:	3301      	adds	r3, #1
   b72a8:	9317      	str	r3, [sp, #92]	; 0x5c
   b72aa:	f8df b230 	ldr.w	fp, [pc, #560]	; b74dc <_strtod_l+0x5ac>
   b72ae:	f04f 0a00 	mov.w	sl, #0
   b72b2:	e681      	b.n	b6fb8 <_strtod_l+0x88>
   b72b4:	4886      	ldr	r0, [pc, #536]	; (b74d0 <_strtod_l+0x5a0>)
   b72b6:	f001 fd07 	bl	b8cc8 <nan>
   b72ba:	ec5b ab10 	vmov	sl, fp, d0
   b72be:	e67b      	b.n	b6fb8 <_strtod_l+0x88>
   b72c0:	9b05      	ldr	r3, [sp, #20]
   b72c2:	9807      	ldr	r0, [sp, #28]
   b72c4:	1af3      	subs	r3, r6, r3
   b72c6:	2f00      	cmp	r7, #0
   b72c8:	bf08      	it	eq
   b72ca:	462f      	moveq	r7, r5
   b72cc:	2d10      	cmp	r5, #16
   b72ce:	9306      	str	r3, [sp, #24]
   b72d0:	46a8      	mov	r8, r5
   b72d2:	bfa8      	it	ge
   b72d4:	f04f 0810 	movge.w	r8, #16
   b72d8:	f7ff f9b4 	bl	b6644 <__aeabi_ui2d>
   b72dc:	2d09      	cmp	r5, #9
   b72de:	4682      	mov	sl, r0
   b72e0:	468b      	mov	fp, r1
   b72e2:	dd13      	ble.n	b730c <_strtod_l+0x3dc>
   b72e4:	4b7b      	ldr	r3, [pc, #492]	; (b74d4 <_strtod_l+0x5a4>)
   b72e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b72ea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b72ee:	f7ff fa23 	bl	b6738 <__aeabi_dmul>
   b72f2:	4682      	mov	sl, r0
   b72f4:	4648      	mov	r0, r9
   b72f6:	468b      	mov	fp, r1
   b72f8:	f7ff f9a4 	bl	b6644 <__aeabi_ui2d>
   b72fc:	4602      	mov	r2, r0
   b72fe:	460b      	mov	r3, r1
   b7300:	4650      	mov	r0, sl
   b7302:	4659      	mov	r1, fp
   b7304:	f7ff f862 	bl	b63cc <__adddf3>
   b7308:	4682      	mov	sl, r0
   b730a:	468b      	mov	fp, r1
   b730c:	2d0f      	cmp	r5, #15
   b730e:	dc38      	bgt.n	b7382 <_strtod_l+0x452>
   b7310:	9b06      	ldr	r3, [sp, #24]
   b7312:	2b00      	cmp	r3, #0
   b7314:	f43f ae50 	beq.w	b6fb8 <_strtod_l+0x88>
   b7318:	dd24      	ble.n	b7364 <_strtod_l+0x434>
   b731a:	2b16      	cmp	r3, #22
   b731c:	dc0b      	bgt.n	b7336 <_strtod_l+0x406>
   b731e:	496d      	ldr	r1, [pc, #436]	; (b74d4 <_strtod_l+0x5a4>)
   b7320:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b7324:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7328:	4652      	mov	r2, sl
   b732a:	465b      	mov	r3, fp
   b732c:	f7ff fa04 	bl	b6738 <__aeabi_dmul>
   b7330:	4682      	mov	sl, r0
   b7332:	468b      	mov	fp, r1
   b7334:	e640      	b.n	b6fb8 <_strtod_l+0x88>
   b7336:	9a06      	ldr	r2, [sp, #24]
   b7338:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b733c:	4293      	cmp	r3, r2
   b733e:	db20      	blt.n	b7382 <_strtod_l+0x452>
   b7340:	4c64      	ldr	r4, [pc, #400]	; (b74d4 <_strtod_l+0x5a4>)
   b7342:	f1c5 050f 	rsb	r5, r5, #15
   b7346:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b734a:	4652      	mov	r2, sl
   b734c:	465b      	mov	r3, fp
   b734e:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7352:	f7ff f9f1 	bl	b6738 <__aeabi_dmul>
   b7356:	9b06      	ldr	r3, [sp, #24]
   b7358:	1b5d      	subs	r5, r3, r5
   b735a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b735e:	e9d4 2300 	ldrd	r2, r3, [r4]
   b7362:	e7e3      	b.n	b732c <_strtod_l+0x3fc>
   b7364:	9b06      	ldr	r3, [sp, #24]
   b7366:	3316      	adds	r3, #22
   b7368:	db0b      	blt.n	b7382 <_strtod_l+0x452>
   b736a:	9b05      	ldr	r3, [sp, #20]
   b736c:	1b9e      	subs	r6, r3, r6
   b736e:	4b59      	ldr	r3, [pc, #356]	; (b74d4 <_strtod_l+0x5a4>)
   b7370:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b7374:	e9d6 2300 	ldrd	r2, r3, [r6]
   b7378:	4650      	mov	r0, sl
   b737a:	4659      	mov	r1, fp
   b737c:	f7ff fb06 	bl	b698c <__aeabi_ddiv>
   b7380:	e7d6      	b.n	b7330 <_strtod_l+0x400>
   b7382:	9b06      	ldr	r3, [sp, #24]
   b7384:	eba5 0808 	sub.w	r8, r5, r8
   b7388:	4498      	add	r8, r3
   b738a:	f1b8 0f00 	cmp.w	r8, #0
   b738e:	dd74      	ble.n	b747a <_strtod_l+0x54a>
   b7390:	f018 030f 	ands.w	r3, r8, #15
   b7394:	d00a      	beq.n	b73ac <_strtod_l+0x47c>
   b7396:	494f      	ldr	r1, [pc, #316]	; (b74d4 <_strtod_l+0x5a4>)
   b7398:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b739c:	4652      	mov	r2, sl
   b739e:	465b      	mov	r3, fp
   b73a0:	e9d1 0100 	ldrd	r0, r1, [r1]
   b73a4:	f7ff f9c8 	bl	b6738 <__aeabi_dmul>
   b73a8:	4682      	mov	sl, r0
   b73aa:	468b      	mov	fp, r1
   b73ac:	f038 080f 	bics.w	r8, r8, #15
   b73b0:	d04f      	beq.n	b7452 <_strtod_l+0x522>
   b73b2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b73b6:	dd22      	ble.n	b73fe <_strtod_l+0x4ce>
   b73b8:	2500      	movs	r5, #0
   b73ba:	462e      	mov	r6, r5
   b73bc:	9507      	str	r5, [sp, #28]
   b73be:	9505      	str	r5, [sp, #20]
   b73c0:	2322      	movs	r3, #34	; 0x22
   b73c2:	f8df b118 	ldr.w	fp, [pc, #280]	; b74dc <_strtod_l+0x5ac>
   b73c6:	6023      	str	r3, [r4, #0]
   b73c8:	f04f 0a00 	mov.w	sl, #0
   b73cc:	9b07      	ldr	r3, [sp, #28]
   b73ce:	2b00      	cmp	r3, #0
   b73d0:	f43f adf2 	beq.w	b6fb8 <_strtod_l+0x88>
   b73d4:	9918      	ldr	r1, [sp, #96]	; 0x60
   b73d6:	4620      	mov	r0, r4
   b73d8:	f000 ffe4 	bl	b83a4 <_Bfree>
   b73dc:	9905      	ldr	r1, [sp, #20]
   b73de:	4620      	mov	r0, r4
   b73e0:	f000 ffe0 	bl	b83a4 <_Bfree>
   b73e4:	4631      	mov	r1, r6
   b73e6:	4620      	mov	r0, r4
   b73e8:	f000 ffdc 	bl	b83a4 <_Bfree>
   b73ec:	9907      	ldr	r1, [sp, #28]
   b73ee:	4620      	mov	r0, r4
   b73f0:	f000 ffd8 	bl	b83a4 <_Bfree>
   b73f4:	4629      	mov	r1, r5
   b73f6:	4620      	mov	r0, r4
   b73f8:	f000 ffd4 	bl	b83a4 <_Bfree>
   b73fc:	e5dc      	b.n	b6fb8 <_strtod_l+0x88>
   b73fe:	4b36      	ldr	r3, [pc, #216]	; (b74d8 <_strtod_l+0x5a8>)
   b7400:	9304      	str	r3, [sp, #16]
   b7402:	2300      	movs	r3, #0
   b7404:	ea4f 1828 	mov.w	r8, r8, asr #4
   b7408:	4650      	mov	r0, sl
   b740a:	4659      	mov	r1, fp
   b740c:	4699      	mov	r9, r3
   b740e:	f1b8 0f01 	cmp.w	r8, #1
   b7412:	dc21      	bgt.n	b7458 <_strtod_l+0x528>
   b7414:	b10b      	cbz	r3, b741a <_strtod_l+0x4ea>
   b7416:	4682      	mov	sl, r0
   b7418:	468b      	mov	fp, r1
   b741a:	4b2f      	ldr	r3, [pc, #188]	; (b74d8 <_strtod_l+0x5a8>)
   b741c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b7420:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b7424:	4652      	mov	r2, sl
   b7426:	465b      	mov	r3, fp
   b7428:	e9d9 0100 	ldrd	r0, r1, [r9]
   b742c:	f7ff f984 	bl	b6738 <__aeabi_dmul>
   b7430:	4b2a      	ldr	r3, [pc, #168]	; (b74dc <_strtod_l+0x5ac>)
   b7432:	460a      	mov	r2, r1
   b7434:	400b      	ands	r3, r1
   b7436:	492a      	ldr	r1, [pc, #168]	; (b74e0 <_strtod_l+0x5b0>)
   b7438:	428b      	cmp	r3, r1
   b743a:	4682      	mov	sl, r0
   b743c:	d8bc      	bhi.n	b73b8 <_strtod_l+0x488>
   b743e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b7442:	428b      	cmp	r3, r1
   b7444:	bf86      	itte	hi
   b7446:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b74e4 <_strtod_l+0x5b4>
   b744a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   b744e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b7452:	2300      	movs	r3, #0
   b7454:	9304      	str	r3, [sp, #16]
   b7456:	e084      	b.n	b7562 <_strtod_l+0x632>
   b7458:	f018 0f01 	tst.w	r8, #1
   b745c:	d005      	beq.n	b746a <_strtod_l+0x53a>
   b745e:	9b04      	ldr	r3, [sp, #16]
   b7460:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7464:	f7ff f968 	bl	b6738 <__aeabi_dmul>
   b7468:	2301      	movs	r3, #1
   b746a:	9a04      	ldr	r2, [sp, #16]
   b746c:	3208      	adds	r2, #8
   b746e:	f109 0901 	add.w	r9, r9, #1
   b7472:	ea4f 0868 	mov.w	r8, r8, asr #1
   b7476:	9204      	str	r2, [sp, #16]
   b7478:	e7c9      	b.n	b740e <_strtod_l+0x4de>
   b747a:	d0ea      	beq.n	b7452 <_strtod_l+0x522>
   b747c:	f1c8 0800 	rsb	r8, r8, #0
   b7480:	f018 020f 	ands.w	r2, r8, #15
   b7484:	d00a      	beq.n	b749c <_strtod_l+0x56c>
   b7486:	4b13      	ldr	r3, [pc, #76]	; (b74d4 <_strtod_l+0x5a4>)
   b7488:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b748c:	4650      	mov	r0, sl
   b748e:	4659      	mov	r1, fp
   b7490:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7494:	f7ff fa7a 	bl	b698c <__aeabi_ddiv>
   b7498:	4682      	mov	sl, r0
   b749a:	468b      	mov	fp, r1
   b749c:	ea5f 1828 	movs.w	r8, r8, asr #4
   b74a0:	d0d7      	beq.n	b7452 <_strtod_l+0x522>
   b74a2:	f1b8 0f1f 	cmp.w	r8, #31
   b74a6:	dd1f      	ble.n	b74e8 <_strtod_l+0x5b8>
   b74a8:	2500      	movs	r5, #0
   b74aa:	462e      	mov	r6, r5
   b74ac:	9507      	str	r5, [sp, #28]
   b74ae:	9505      	str	r5, [sp, #20]
   b74b0:	2322      	movs	r3, #34	; 0x22
   b74b2:	f04f 0a00 	mov.w	sl, #0
   b74b6:	f04f 0b00 	mov.w	fp, #0
   b74ba:	6023      	str	r3, [r4, #0]
   b74bc:	e786      	b.n	b73cc <_strtod_l+0x49c>
   b74be:	bf00      	nop
   b74c0:	000b9482 	.word	0x000b9482
   b74c4:	000b949c 	.word	0x000b949c
   b74c8:	000b9479 	.word	0x000b9479
   b74cc:	000b947c 	.word	0x000b947c
   b74d0:	000b8dcd 	.word	0x000b8dcd
   b74d4:	000b96e8 	.word	0x000b96e8
   b74d8:	000b96c0 	.word	0x000b96c0
   b74dc:	7ff00000 	.word	0x7ff00000
   b74e0:	7ca00000 	.word	0x7ca00000
   b74e4:	7fefffff 	.word	0x7fefffff
   b74e8:	f018 0310 	ands.w	r3, r8, #16
   b74ec:	bf18      	it	ne
   b74ee:	236a      	movne	r3, #106	; 0x6a
   b74f0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; b78a0 <_strtod_l+0x970>
   b74f4:	9304      	str	r3, [sp, #16]
   b74f6:	4650      	mov	r0, sl
   b74f8:	4659      	mov	r1, fp
   b74fa:	2300      	movs	r3, #0
   b74fc:	f018 0f01 	tst.w	r8, #1
   b7500:	d004      	beq.n	b750c <_strtod_l+0x5dc>
   b7502:	e9d9 2300 	ldrd	r2, r3, [r9]
   b7506:	f7ff f917 	bl	b6738 <__aeabi_dmul>
   b750a:	2301      	movs	r3, #1
   b750c:	ea5f 0868 	movs.w	r8, r8, asr #1
   b7510:	f109 0908 	add.w	r9, r9, #8
   b7514:	d1f2      	bne.n	b74fc <_strtod_l+0x5cc>
   b7516:	b10b      	cbz	r3, b751c <_strtod_l+0x5ec>
   b7518:	4682      	mov	sl, r0
   b751a:	468b      	mov	fp, r1
   b751c:	9b04      	ldr	r3, [sp, #16]
   b751e:	b1c3      	cbz	r3, b7552 <_strtod_l+0x622>
   b7520:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b7524:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b7528:	2b00      	cmp	r3, #0
   b752a:	4659      	mov	r1, fp
   b752c:	dd11      	ble.n	b7552 <_strtod_l+0x622>
   b752e:	2b1f      	cmp	r3, #31
   b7530:	f340 8124 	ble.w	b777c <_strtod_l+0x84c>
   b7534:	2b34      	cmp	r3, #52	; 0x34
   b7536:	bfde      	ittt	le
   b7538:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b753c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   b7540:	fa03 f202 	lslle.w	r2, r3, r2
   b7544:	f04f 0a00 	mov.w	sl, #0
   b7548:	bfcc      	ite	gt
   b754a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b754e:	ea02 0b01 	andle.w	fp, r2, r1
   b7552:	2200      	movs	r2, #0
   b7554:	2300      	movs	r3, #0
   b7556:	4650      	mov	r0, sl
   b7558:	4659      	mov	r1, fp
   b755a:	f7ff fb55 	bl	b6c08 <__aeabi_dcmpeq>
   b755e:	2800      	cmp	r0, #0
   b7560:	d1a2      	bne.n	b74a8 <_strtod_l+0x578>
   b7562:	9b07      	ldr	r3, [sp, #28]
   b7564:	9300      	str	r3, [sp, #0]
   b7566:	9908      	ldr	r1, [sp, #32]
   b7568:	462b      	mov	r3, r5
   b756a:	463a      	mov	r2, r7
   b756c:	4620      	mov	r0, r4
   b756e:	f000 ff81 	bl	b8474 <__s2b>
   b7572:	9007      	str	r0, [sp, #28]
   b7574:	2800      	cmp	r0, #0
   b7576:	f43f af1f 	beq.w	b73b8 <_strtod_l+0x488>
   b757a:	9b05      	ldr	r3, [sp, #20]
   b757c:	1b9e      	subs	r6, r3, r6
   b757e:	9b06      	ldr	r3, [sp, #24]
   b7580:	2b00      	cmp	r3, #0
   b7582:	bfb4      	ite	lt
   b7584:	4633      	movlt	r3, r6
   b7586:	2300      	movge	r3, #0
   b7588:	930c      	str	r3, [sp, #48]	; 0x30
   b758a:	9b06      	ldr	r3, [sp, #24]
   b758c:	2500      	movs	r5, #0
   b758e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b7592:	9312      	str	r3, [sp, #72]	; 0x48
   b7594:	462e      	mov	r6, r5
   b7596:	9b07      	ldr	r3, [sp, #28]
   b7598:	4620      	mov	r0, r4
   b759a:	6859      	ldr	r1, [r3, #4]
   b759c:	f000 fec2 	bl	b8324 <_Balloc>
   b75a0:	9005      	str	r0, [sp, #20]
   b75a2:	2800      	cmp	r0, #0
   b75a4:	f43f af0c 	beq.w	b73c0 <_strtod_l+0x490>
   b75a8:	9b07      	ldr	r3, [sp, #28]
   b75aa:	691a      	ldr	r2, [r3, #16]
   b75ac:	3202      	adds	r2, #2
   b75ae:	f103 010c 	add.w	r1, r3, #12
   b75b2:	0092      	lsls	r2, r2, #2
   b75b4:	300c      	adds	r0, #12
   b75b6:	f7ff fbdc 	bl	b6d72 <memcpy>
   b75ba:	ec4b ab10 	vmov	d0, sl, fp
   b75be:	aa1a      	add	r2, sp, #104	; 0x68
   b75c0:	a919      	add	r1, sp, #100	; 0x64
   b75c2:	4620      	mov	r0, r4
   b75c4:	f001 fa9c 	bl	b8b00 <__d2b>
   b75c8:	ec4b ab18 	vmov	d8, sl, fp
   b75cc:	9018      	str	r0, [sp, #96]	; 0x60
   b75ce:	2800      	cmp	r0, #0
   b75d0:	f43f aef6 	beq.w	b73c0 <_strtod_l+0x490>
   b75d4:	2101      	movs	r1, #1
   b75d6:	4620      	mov	r0, r4
   b75d8:	f000 ffe6 	bl	b85a8 <__i2b>
   b75dc:	4606      	mov	r6, r0
   b75de:	2800      	cmp	r0, #0
   b75e0:	f43f aeee 	beq.w	b73c0 <_strtod_l+0x490>
   b75e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b75e6:	9904      	ldr	r1, [sp, #16]
   b75e8:	2b00      	cmp	r3, #0
   b75ea:	bfab      	itete	ge
   b75ec:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b75ee:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b75f0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b75f2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b75f6:	bfac      	ite	ge
   b75f8:	eb03 0902 	addge.w	r9, r3, r2
   b75fc:	1ad7      	sublt	r7, r2, r3
   b75fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b7600:	eba3 0801 	sub.w	r8, r3, r1
   b7604:	4490      	add	r8, r2
   b7606:	4ba1      	ldr	r3, [pc, #644]	; (b788c <_strtod_l+0x95c>)
   b7608:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b760c:	4598      	cmp	r8, r3
   b760e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b7612:	f280 80c7 	bge.w	b77a4 <_strtod_l+0x874>
   b7616:	eba3 0308 	sub.w	r3, r3, r8
   b761a:	2b1f      	cmp	r3, #31
   b761c:	eba2 0203 	sub.w	r2, r2, r3
   b7620:	f04f 0101 	mov.w	r1, #1
   b7624:	f300 80b1 	bgt.w	b778a <_strtod_l+0x85a>
   b7628:	fa01 f303 	lsl.w	r3, r1, r3
   b762c:	930d      	str	r3, [sp, #52]	; 0x34
   b762e:	2300      	movs	r3, #0
   b7630:	9308      	str	r3, [sp, #32]
   b7632:	eb09 0802 	add.w	r8, r9, r2
   b7636:	9b04      	ldr	r3, [sp, #16]
   b7638:	45c1      	cmp	r9, r8
   b763a:	4417      	add	r7, r2
   b763c:	441f      	add	r7, r3
   b763e:	464b      	mov	r3, r9
   b7640:	bfa8      	it	ge
   b7642:	4643      	movge	r3, r8
   b7644:	42bb      	cmp	r3, r7
   b7646:	bfa8      	it	ge
   b7648:	463b      	movge	r3, r7
   b764a:	2b00      	cmp	r3, #0
   b764c:	bfc2      	ittt	gt
   b764e:	eba8 0803 	subgt.w	r8, r8, r3
   b7652:	1aff      	subgt	r7, r7, r3
   b7654:	eba9 0903 	subgt.w	r9, r9, r3
   b7658:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b765a:	2b00      	cmp	r3, #0
   b765c:	dd17      	ble.n	b768e <_strtod_l+0x75e>
   b765e:	4631      	mov	r1, r6
   b7660:	461a      	mov	r2, r3
   b7662:	4620      	mov	r0, r4
   b7664:	f001 f860 	bl	b8728 <__pow5mult>
   b7668:	4606      	mov	r6, r0
   b766a:	2800      	cmp	r0, #0
   b766c:	f43f aea8 	beq.w	b73c0 <_strtod_l+0x490>
   b7670:	4601      	mov	r1, r0
   b7672:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b7674:	4620      	mov	r0, r4
   b7676:	f000 ffad 	bl	b85d4 <__multiply>
   b767a:	900b      	str	r0, [sp, #44]	; 0x2c
   b767c:	2800      	cmp	r0, #0
   b767e:	f43f ae9f 	beq.w	b73c0 <_strtod_l+0x490>
   b7682:	9918      	ldr	r1, [sp, #96]	; 0x60
   b7684:	4620      	mov	r0, r4
   b7686:	f000 fe8d 	bl	b83a4 <_Bfree>
   b768a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b768c:	9318      	str	r3, [sp, #96]	; 0x60
   b768e:	f1b8 0f00 	cmp.w	r8, #0
   b7692:	f300 808c 	bgt.w	b77ae <_strtod_l+0x87e>
   b7696:	9b06      	ldr	r3, [sp, #24]
   b7698:	2b00      	cmp	r3, #0
   b769a:	dd08      	ble.n	b76ae <_strtod_l+0x77e>
   b769c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b769e:	9905      	ldr	r1, [sp, #20]
   b76a0:	4620      	mov	r0, r4
   b76a2:	f001 f841 	bl	b8728 <__pow5mult>
   b76a6:	9005      	str	r0, [sp, #20]
   b76a8:	2800      	cmp	r0, #0
   b76aa:	f43f ae89 	beq.w	b73c0 <_strtod_l+0x490>
   b76ae:	2f00      	cmp	r7, #0
   b76b0:	dd08      	ble.n	b76c4 <_strtod_l+0x794>
   b76b2:	9905      	ldr	r1, [sp, #20]
   b76b4:	463a      	mov	r2, r7
   b76b6:	4620      	mov	r0, r4
   b76b8:	f001 f890 	bl	b87dc <__lshift>
   b76bc:	9005      	str	r0, [sp, #20]
   b76be:	2800      	cmp	r0, #0
   b76c0:	f43f ae7e 	beq.w	b73c0 <_strtod_l+0x490>
   b76c4:	f1b9 0f00 	cmp.w	r9, #0
   b76c8:	dd08      	ble.n	b76dc <_strtod_l+0x7ac>
   b76ca:	4631      	mov	r1, r6
   b76cc:	464a      	mov	r2, r9
   b76ce:	4620      	mov	r0, r4
   b76d0:	f001 f884 	bl	b87dc <__lshift>
   b76d4:	4606      	mov	r6, r0
   b76d6:	2800      	cmp	r0, #0
   b76d8:	f43f ae72 	beq.w	b73c0 <_strtod_l+0x490>
   b76dc:	9a05      	ldr	r2, [sp, #20]
   b76de:	9918      	ldr	r1, [sp, #96]	; 0x60
   b76e0:	4620      	mov	r0, r4
   b76e2:	f001 f907 	bl	b88f4 <__mdiff>
   b76e6:	4605      	mov	r5, r0
   b76e8:	2800      	cmp	r0, #0
   b76ea:	f43f ae69 	beq.w	b73c0 <_strtod_l+0x490>
   b76ee:	68c3      	ldr	r3, [r0, #12]
   b76f0:	930b      	str	r3, [sp, #44]	; 0x2c
   b76f2:	2300      	movs	r3, #0
   b76f4:	60c3      	str	r3, [r0, #12]
   b76f6:	4631      	mov	r1, r6
   b76f8:	f001 f8e0 	bl	b88bc <__mcmp>
   b76fc:	2800      	cmp	r0, #0
   b76fe:	da60      	bge.n	b77c2 <_strtod_l+0x892>
   b7700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b7702:	ea53 030a 	orrs.w	r3, r3, sl
   b7706:	f040 8082 	bne.w	b780e <_strtod_l+0x8de>
   b770a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b770e:	2b00      	cmp	r3, #0
   b7710:	d17d      	bne.n	b780e <_strtod_l+0x8de>
   b7712:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b7716:	0d1b      	lsrs	r3, r3, #20
   b7718:	051b      	lsls	r3, r3, #20
   b771a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   b771e:	d976      	bls.n	b780e <_strtod_l+0x8de>
   b7720:	696b      	ldr	r3, [r5, #20]
   b7722:	b913      	cbnz	r3, b772a <_strtod_l+0x7fa>
   b7724:	692b      	ldr	r3, [r5, #16]
   b7726:	2b01      	cmp	r3, #1
   b7728:	dd71      	ble.n	b780e <_strtod_l+0x8de>
   b772a:	4629      	mov	r1, r5
   b772c:	2201      	movs	r2, #1
   b772e:	4620      	mov	r0, r4
   b7730:	f001 f854 	bl	b87dc <__lshift>
   b7734:	4631      	mov	r1, r6
   b7736:	4605      	mov	r5, r0
   b7738:	f001 f8c0 	bl	b88bc <__mcmp>
   b773c:	2800      	cmp	r0, #0
   b773e:	dd66      	ble.n	b780e <_strtod_l+0x8de>
   b7740:	9904      	ldr	r1, [sp, #16]
   b7742:	4a53      	ldr	r2, [pc, #332]	; (b7890 <_strtod_l+0x960>)
   b7744:	465b      	mov	r3, fp
   b7746:	2900      	cmp	r1, #0
   b7748:	f000 8081 	beq.w	b784e <_strtod_l+0x91e>
   b774c:	ea02 010b 	and.w	r1, r2, fp
   b7750:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   b7754:	dc7b      	bgt.n	b784e <_strtod_l+0x91e>
   b7756:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   b775a:	f77f aea9 	ble.w	b74b0 <_strtod_l+0x580>
   b775e:	4b4d      	ldr	r3, [pc, #308]	; (b7894 <_strtod_l+0x964>)
   b7760:	4650      	mov	r0, sl
   b7762:	4659      	mov	r1, fp
   b7764:	2200      	movs	r2, #0
   b7766:	f7fe ffe7 	bl	b6738 <__aeabi_dmul>
   b776a:	460b      	mov	r3, r1
   b776c:	4303      	orrs	r3, r0
   b776e:	bf08      	it	eq
   b7770:	2322      	moveq	r3, #34	; 0x22
   b7772:	4682      	mov	sl, r0
   b7774:	468b      	mov	fp, r1
   b7776:	bf08      	it	eq
   b7778:	6023      	streq	r3, [r4, #0]
   b777a:	e62b      	b.n	b73d4 <_strtod_l+0x4a4>
   b777c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7780:	fa02 f303 	lsl.w	r3, r2, r3
   b7784:	ea03 0a0a 	and.w	sl, r3, sl
   b7788:	e6e3      	b.n	b7552 <_strtod_l+0x622>
   b778a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   b778e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   b7792:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   b7796:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   b779a:	fa01 f308 	lsl.w	r3, r1, r8
   b779e:	9308      	str	r3, [sp, #32]
   b77a0:	910d      	str	r1, [sp, #52]	; 0x34
   b77a2:	e746      	b.n	b7632 <_strtod_l+0x702>
   b77a4:	2300      	movs	r3, #0
   b77a6:	9308      	str	r3, [sp, #32]
   b77a8:	2301      	movs	r3, #1
   b77aa:	930d      	str	r3, [sp, #52]	; 0x34
   b77ac:	e741      	b.n	b7632 <_strtod_l+0x702>
   b77ae:	9918      	ldr	r1, [sp, #96]	; 0x60
   b77b0:	4642      	mov	r2, r8
   b77b2:	4620      	mov	r0, r4
   b77b4:	f001 f812 	bl	b87dc <__lshift>
   b77b8:	9018      	str	r0, [sp, #96]	; 0x60
   b77ba:	2800      	cmp	r0, #0
   b77bc:	f47f af6b 	bne.w	b7696 <_strtod_l+0x766>
   b77c0:	e5fe      	b.n	b73c0 <_strtod_l+0x490>
   b77c2:	465f      	mov	r7, fp
   b77c4:	d16e      	bne.n	b78a4 <_strtod_l+0x974>
   b77c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b77c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b77cc:	b342      	cbz	r2, b7820 <_strtod_l+0x8f0>
   b77ce:	4a32      	ldr	r2, [pc, #200]	; (b7898 <_strtod_l+0x968>)
   b77d0:	4293      	cmp	r3, r2
   b77d2:	d128      	bne.n	b7826 <_strtod_l+0x8f6>
   b77d4:	9b04      	ldr	r3, [sp, #16]
   b77d6:	4651      	mov	r1, sl
   b77d8:	b1eb      	cbz	r3, b7816 <_strtod_l+0x8e6>
   b77da:	4b2d      	ldr	r3, [pc, #180]	; (b7890 <_strtod_l+0x960>)
   b77dc:	403b      	ands	r3, r7
   b77de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b77e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b77e6:	d819      	bhi.n	b781c <_strtod_l+0x8ec>
   b77e8:	0d1b      	lsrs	r3, r3, #20
   b77ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b77ee:	fa02 f303 	lsl.w	r3, r2, r3
   b77f2:	4299      	cmp	r1, r3
   b77f4:	d117      	bne.n	b7826 <_strtod_l+0x8f6>
   b77f6:	4b29      	ldr	r3, [pc, #164]	; (b789c <_strtod_l+0x96c>)
   b77f8:	429f      	cmp	r7, r3
   b77fa:	d102      	bne.n	b7802 <_strtod_l+0x8d2>
   b77fc:	3101      	adds	r1, #1
   b77fe:	f43f addf 	beq.w	b73c0 <_strtod_l+0x490>
   b7802:	4b23      	ldr	r3, [pc, #140]	; (b7890 <_strtod_l+0x960>)
   b7804:	403b      	ands	r3, r7
   b7806:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   b780a:	f04f 0a00 	mov.w	sl, #0
   b780e:	9b04      	ldr	r3, [sp, #16]
   b7810:	2b00      	cmp	r3, #0
   b7812:	d1a4      	bne.n	b775e <_strtod_l+0x82e>
   b7814:	e5de      	b.n	b73d4 <_strtod_l+0x4a4>
   b7816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b781a:	e7ea      	b.n	b77f2 <_strtod_l+0x8c2>
   b781c:	4613      	mov	r3, r2
   b781e:	e7e8      	b.n	b77f2 <_strtod_l+0x8c2>
   b7820:	ea53 030a 	orrs.w	r3, r3, sl
   b7824:	d08c      	beq.n	b7740 <_strtod_l+0x810>
   b7826:	9b08      	ldr	r3, [sp, #32]
   b7828:	b1db      	cbz	r3, b7862 <_strtod_l+0x932>
   b782a:	423b      	tst	r3, r7
   b782c:	d0ef      	beq.n	b780e <_strtod_l+0x8de>
   b782e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b7830:	9a04      	ldr	r2, [sp, #16]
   b7832:	4650      	mov	r0, sl
   b7834:	4659      	mov	r1, fp
   b7836:	b1c3      	cbz	r3, b786a <_strtod_l+0x93a>
   b7838:	f7ff fb5d 	bl	b6ef6 <sulp>
   b783c:	4602      	mov	r2, r0
   b783e:	460b      	mov	r3, r1
   b7840:	ec51 0b18 	vmov	r0, r1, d8
   b7844:	f7fe fdc2 	bl	b63cc <__adddf3>
   b7848:	4682      	mov	sl, r0
   b784a:	468b      	mov	fp, r1
   b784c:	e7df      	b.n	b780e <_strtod_l+0x8de>
   b784e:	4013      	ands	r3, r2
   b7850:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   b7854:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   b7858:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   b785c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b7860:	e7d5      	b.n	b780e <_strtod_l+0x8de>
   b7862:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b7864:	ea13 0f0a 	tst.w	r3, sl
   b7868:	e7e0      	b.n	b782c <_strtod_l+0x8fc>
   b786a:	f7ff fb44 	bl	b6ef6 <sulp>
   b786e:	4602      	mov	r2, r0
   b7870:	460b      	mov	r3, r1
   b7872:	ec51 0b18 	vmov	r0, r1, d8
   b7876:	f7fe fda7 	bl	b63c8 <__aeabi_dsub>
   b787a:	2200      	movs	r2, #0
   b787c:	2300      	movs	r3, #0
   b787e:	4682      	mov	sl, r0
   b7880:	468b      	mov	fp, r1
   b7882:	f7ff f9c1 	bl	b6c08 <__aeabi_dcmpeq>
   b7886:	2800      	cmp	r0, #0
   b7888:	d0c1      	beq.n	b780e <_strtod_l+0x8de>
   b788a:	e611      	b.n	b74b0 <_strtod_l+0x580>
   b788c:	fffffc02 	.word	0xfffffc02
   b7890:	7ff00000 	.word	0x7ff00000
   b7894:	39500000 	.word	0x39500000
   b7898:	000fffff 	.word	0x000fffff
   b789c:	7fefffff 	.word	0x7fefffff
   b78a0:	000b94b0 	.word	0x000b94b0
   b78a4:	4631      	mov	r1, r6
   b78a6:	4628      	mov	r0, r5
   b78a8:	f001 f986 	bl	b8bb8 <__ratio>
   b78ac:	ec59 8b10 	vmov	r8, r9, d0
   b78b0:	ee10 0a10 	vmov	r0, s0
   b78b4:	2200      	movs	r2, #0
   b78b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b78ba:	4649      	mov	r1, r9
   b78bc:	f7ff f9b8 	bl	b6c30 <__aeabi_dcmple>
   b78c0:	2800      	cmp	r0, #0
   b78c2:	d07a      	beq.n	b79ba <_strtod_l+0xa8a>
   b78c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b78c6:	2b00      	cmp	r3, #0
   b78c8:	d04a      	beq.n	b7960 <_strtod_l+0xa30>
   b78ca:	4b95      	ldr	r3, [pc, #596]	; (b7b20 <_strtod_l+0xbf0>)
   b78cc:	2200      	movs	r2, #0
   b78ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b78d2:	f8df 924c 	ldr.w	r9, [pc, #588]	; b7b20 <_strtod_l+0xbf0>
   b78d6:	f04f 0800 	mov.w	r8, #0
   b78da:	4b92      	ldr	r3, [pc, #584]	; (b7b24 <_strtod_l+0xbf4>)
   b78dc:	403b      	ands	r3, r7
   b78de:	930d      	str	r3, [sp, #52]	; 0x34
   b78e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b78e2:	4b91      	ldr	r3, [pc, #580]	; (b7b28 <_strtod_l+0xbf8>)
   b78e4:	429a      	cmp	r2, r3
   b78e6:	f040 80b0 	bne.w	b7a4a <_strtod_l+0xb1a>
   b78ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b78ee:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   b78f2:	ec4b ab10 	vmov	d0, sl, fp
   b78f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b78fa:	f001 f885 	bl	b8a08 <__ulp>
   b78fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b7902:	ec53 2b10 	vmov	r2, r3, d0
   b7906:	f7fe ff17 	bl	b6738 <__aeabi_dmul>
   b790a:	4652      	mov	r2, sl
   b790c:	465b      	mov	r3, fp
   b790e:	f7fe fd5d 	bl	b63cc <__adddf3>
   b7912:	460b      	mov	r3, r1
   b7914:	4983      	ldr	r1, [pc, #524]	; (b7b24 <_strtod_l+0xbf4>)
   b7916:	4a85      	ldr	r2, [pc, #532]	; (b7b2c <_strtod_l+0xbfc>)
   b7918:	4019      	ands	r1, r3
   b791a:	4291      	cmp	r1, r2
   b791c:	4682      	mov	sl, r0
   b791e:	d960      	bls.n	b79e2 <_strtod_l+0xab2>
   b7920:	ee18 3a90 	vmov	r3, s17
   b7924:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   b7928:	4293      	cmp	r3, r2
   b792a:	d104      	bne.n	b7936 <_strtod_l+0xa06>
   b792c:	ee18 3a10 	vmov	r3, s16
   b7930:	3301      	adds	r3, #1
   b7932:	f43f ad45 	beq.w	b73c0 <_strtod_l+0x490>
   b7936:	f8df b200 	ldr.w	fp, [pc, #512]	; b7b38 <_strtod_l+0xc08>
   b793a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b793e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b7940:	4620      	mov	r0, r4
   b7942:	f000 fd2f 	bl	b83a4 <_Bfree>
   b7946:	9905      	ldr	r1, [sp, #20]
   b7948:	4620      	mov	r0, r4
   b794a:	f000 fd2b 	bl	b83a4 <_Bfree>
   b794e:	4631      	mov	r1, r6
   b7950:	4620      	mov	r0, r4
   b7952:	f000 fd27 	bl	b83a4 <_Bfree>
   b7956:	4629      	mov	r1, r5
   b7958:	4620      	mov	r0, r4
   b795a:	f000 fd23 	bl	b83a4 <_Bfree>
   b795e:	e61a      	b.n	b7596 <_strtod_l+0x666>
   b7960:	f1ba 0f00 	cmp.w	sl, #0
   b7964:	d11b      	bne.n	b799e <_strtod_l+0xa6e>
   b7966:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b796a:	b9f3      	cbnz	r3, b79aa <_strtod_l+0xa7a>
   b796c:	4b6c      	ldr	r3, [pc, #432]	; (b7b20 <_strtod_l+0xbf0>)
   b796e:	2200      	movs	r2, #0
   b7970:	4640      	mov	r0, r8
   b7972:	4649      	mov	r1, r9
   b7974:	f7ff f952 	bl	b6c1c <__aeabi_dcmplt>
   b7978:	b9d0      	cbnz	r0, b79b0 <_strtod_l+0xa80>
   b797a:	4640      	mov	r0, r8
   b797c:	4649      	mov	r1, r9
   b797e:	4b6c      	ldr	r3, [pc, #432]	; (b7b30 <_strtod_l+0xc00>)
   b7980:	2200      	movs	r2, #0
   b7982:	f7fe fed9 	bl	b6738 <__aeabi_dmul>
   b7986:	4680      	mov	r8, r0
   b7988:	4689      	mov	r9, r1
   b798a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   b798e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   b7992:	9315      	str	r3, [sp, #84]	; 0x54
   b7994:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   b7998:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b799c:	e79d      	b.n	b78da <_strtod_l+0x9aa>
   b799e:	f1ba 0f01 	cmp.w	sl, #1
   b79a2:	d102      	bne.n	b79aa <_strtod_l+0xa7a>
   b79a4:	2f00      	cmp	r7, #0
   b79a6:	f43f ad83 	beq.w	b74b0 <_strtod_l+0x580>
   b79aa:	4b62      	ldr	r3, [pc, #392]	; (b7b34 <_strtod_l+0xc04>)
   b79ac:	2200      	movs	r2, #0
   b79ae:	e78e      	b.n	b78ce <_strtod_l+0x99e>
   b79b0:	f8df 917c 	ldr.w	r9, [pc, #380]	; b7b30 <_strtod_l+0xc00>
   b79b4:	f04f 0800 	mov.w	r8, #0
   b79b8:	e7e7      	b.n	b798a <_strtod_l+0xa5a>
   b79ba:	4b5d      	ldr	r3, [pc, #372]	; (b7b30 <_strtod_l+0xc00>)
   b79bc:	4640      	mov	r0, r8
   b79be:	4649      	mov	r1, r9
   b79c0:	2200      	movs	r2, #0
   b79c2:	f7fe feb9 	bl	b6738 <__aeabi_dmul>
   b79c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b79c8:	4680      	mov	r8, r0
   b79ca:	4689      	mov	r9, r1
   b79cc:	b933      	cbnz	r3, b79dc <_strtod_l+0xaac>
   b79ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b79d2:	900e      	str	r0, [sp, #56]	; 0x38
   b79d4:	930f      	str	r3, [sp, #60]	; 0x3c
   b79d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   b79da:	e7dd      	b.n	b7998 <_strtod_l+0xa68>
   b79dc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   b79e0:	e7f9      	b.n	b79d6 <_strtod_l+0xaa6>
   b79e2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   b79e6:	9b04      	ldr	r3, [sp, #16]
   b79e8:	2b00      	cmp	r3, #0
   b79ea:	d1a8      	bne.n	b793e <_strtod_l+0xa0e>
   b79ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b79f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b79f2:	0d1b      	lsrs	r3, r3, #20
   b79f4:	051b      	lsls	r3, r3, #20
   b79f6:	429a      	cmp	r2, r3
   b79f8:	d1a1      	bne.n	b793e <_strtod_l+0xa0e>
   b79fa:	4640      	mov	r0, r8
   b79fc:	4649      	mov	r1, r9
   b79fe:	f001 f979 	bl	b8cf4 <__aeabi_d2lz>
   b7a02:	f7fe fe6b 	bl	b66dc <__aeabi_l2d>
   b7a06:	4602      	mov	r2, r0
   b7a08:	460b      	mov	r3, r1
   b7a0a:	4640      	mov	r0, r8
   b7a0c:	4649      	mov	r1, r9
   b7a0e:	f7fe fcdb 	bl	b63c8 <__aeabi_dsub>
   b7a12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b7a14:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b7a18:	ea43 030a 	orr.w	r3, r3, sl
   b7a1c:	4313      	orrs	r3, r2
   b7a1e:	4680      	mov	r8, r0
   b7a20:	4689      	mov	r9, r1
   b7a22:	d055      	beq.n	b7ad0 <_strtod_l+0xba0>
   b7a24:	a336      	add	r3, pc, #216	; (adr r3, b7b00 <_strtod_l+0xbd0>)
   b7a26:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7a2a:	f7ff f8f7 	bl	b6c1c <__aeabi_dcmplt>
   b7a2e:	2800      	cmp	r0, #0
   b7a30:	f47f acd0 	bne.w	b73d4 <_strtod_l+0x4a4>
   b7a34:	a334      	add	r3, pc, #208	; (adr r3, b7b08 <_strtod_l+0xbd8>)
   b7a36:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7a3a:	4640      	mov	r0, r8
   b7a3c:	4649      	mov	r1, r9
   b7a3e:	f7ff f90b 	bl	b6c58 <__aeabi_dcmpgt>
   b7a42:	2800      	cmp	r0, #0
   b7a44:	f43f af7b 	beq.w	b793e <_strtod_l+0xa0e>
   b7a48:	e4c4      	b.n	b73d4 <_strtod_l+0x4a4>
   b7a4a:	9b04      	ldr	r3, [sp, #16]
   b7a4c:	b333      	cbz	r3, b7a9c <_strtod_l+0xb6c>
   b7a4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b7a50:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b7a54:	d822      	bhi.n	b7a9c <_strtod_l+0xb6c>
   b7a56:	a32e      	add	r3, pc, #184	; (adr r3, b7b10 <_strtod_l+0xbe0>)
   b7a58:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7a5c:	4640      	mov	r0, r8
   b7a5e:	4649      	mov	r1, r9
   b7a60:	f7ff f8e6 	bl	b6c30 <__aeabi_dcmple>
   b7a64:	b1a0      	cbz	r0, b7a90 <_strtod_l+0xb60>
   b7a66:	4649      	mov	r1, r9
   b7a68:	4640      	mov	r0, r8
   b7a6a:	f7ff f927 	bl	b6cbc <__aeabi_d2uiz>
   b7a6e:	2801      	cmp	r0, #1
   b7a70:	bf38      	it	cc
   b7a72:	2001      	movcc	r0, #1
   b7a74:	f7fe fde6 	bl	b6644 <__aeabi_ui2d>
   b7a78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b7a7a:	4680      	mov	r8, r0
   b7a7c:	4689      	mov	r9, r1
   b7a7e:	bb23      	cbnz	r3, b7aca <_strtod_l+0xb9a>
   b7a80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b7a84:	9010      	str	r0, [sp, #64]	; 0x40
   b7a86:	9311      	str	r3, [sp, #68]	; 0x44
   b7a88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   b7a8c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b7a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b7a92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b7a94:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   b7a98:	1a9b      	subs	r3, r3, r2
   b7a9a:	9309      	str	r3, [sp, #36]	; 0x24
   b7a9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b7aa0:	eeb0 0a48 	vmov.f32	s0, s16
   b7aa4:	eef0 0a68 	vmov.f32	s1, s17
   b7aa8:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b7aac:	f000 ffac 	bl	b8a08 <__ulp>
   b7ab0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b7ab4:	ec53 2b10 	vmov	r2, r3, d0
   b7ab8:	f7fe fe3e 	bl	b6738 <__aeabi_dmul>
   b7abc:	ec53 2b18 	vmov	r2, r3, d8
   b7ac0:	f7fe fc84 	bl	b63cc <__adddf3>
   b7ac4:	4682      	mov	sl, r0
   b7ac6:	468b      	mov	fp, r1
   b7ac8:	e78d      	b.n	b79e6 <_strtod_l+0xab6>
   b7aca:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   b7ace:	e7db      	b.n	b7a88 <_strtod_l+0xb58>
   b7ad0:	a311      	add	r3, pc, #68	; (adr r3, b7b18 <_strtod_l+0xbe8>)
   b7ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7ad6:	f7ff f8a1 	bl	b6c1c <__aeabi_dcmplt>
   b7ada:	e7b2      	b.n	b7a42 <_strtod_l+0xb12>
   b7adc:	2300      	movs	r3, #0
   b7ade:	930a      	str	r3, [sp, #40]	; 0x28
   b7ae0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b7ae2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7ae4:	6013      	str	r3, [r2, #0]
   b7ae6:	f7ff ba6b 	b.w	b6fc0 <_strtod_l+0x90>
   b7aea:	2a65      	cmp	r2, #101	; 0x65
   b7aec:	f43f ab5f 	beq.w	b71ae <_strtod_l+0x27e>
   b7af0:	2a45      	cmp	r2, #69	; 0x45
   b7af2:	f43f ab5c 	beq.w	b71ae <_strtod_l+0x27e>
   b7af6:	2301      	movs	r3, #1
   b7af8:	f7ff bb94 	b.w	b7224 <_strtod_l+0x2f4>
   b7afc:	f3af 8000 	nop.w
   b7b00:	94a03595 	.word	0x94a03595
   b7b04:	3fdfffff 	.word	0x3fdfffff
   b7b08:	35afe535 	.word	0x35afe535
   b7b0c:	3fe00000 	.word	0x3fe00000
   b7b10:	ffc00000 	.word	0xffc00000
   b7b14:	41dfffff 	.word	0x41dfffff
   b7b18:	94a03595 	.word	0x94a03595
   b7b1c:	3fcfffff 	.word	0x3fcfffff
   b7b20:	3ff00000 	.word	0x3ff00000
   b7b24:	7ff00000 	.word	0x7ff00000
   b7b28:	7fe00000 	.word	0x7fe00000
   b7b2c:	7c9fffff 	.word	0x7c9fffff
   b7b30:	3fe00000 	.word	0x3fe00000
   b7b34:	bff00000 	.word	0xbff00000
   b7b38:	7fefffff 	.word	0x7fefffff

000b7b3c <strtod>:
   b7b3c:	460a      	mov	r2, r1
   b7b3e:	4601      	mov	r1, r0
   b7b40:	4802      	ldr	r0, [pc, #8]	; (b7b4c <strtod+0x10>)
   b7b42:	4b03      	ldr	r3, [pc, #12]	; (b7b50 <strtod+0x14>)
   b7b44:	6800      	ldr	r0, [r0, #0]
   b7b46:	f7ff b9f3 	b.w	b6f30 <_strtod_l>
   b7b4a:	bf00      	nop
   b7b4c:	2003e35c 	.word	0x2003e35c
   b7b50:	2003e3c8 	.word	0x2003e3c8

000b7b54 <__register_exitproc>:
   b7b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7b58:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7c14 <__register_exitproc+0xc0>
   b7b5c:	4606      	mov	r6, r0
   b7b5e:	f8d8 0000 	ldr.w	r0, [r8]
   b7b62:	461f      	mov	r7, r3
   b7b64:	460d      	mov	r5, r1
   b7b66:	4691      	mov	r9, r2
   b7b68:	f000 fbc6 	bl	b82f8 <__retarget_lock_acquire_recursive>
   b7b6c:	4b25      	ldr	r3, [pc, #148]	; (b7c04 <__register_exitproc+0xb0>)
   b7b6e:	681c      	ldr	r4, [r3, #0]
   b7b70:	b934      	cbnz	r4, b7b80 <__register_exitproc+0x2c>
   b7b72:	4c25      	ldr	r4, [pc, #148]	; (b7c08 <__register_exitproc+0xb4>)
   b7b74:	601c      	str	r4, [r3, #0]
   b7b76:	4b25      	ldr	r3, [pc, #148]	; (b7c0c <__register_exitproc+0xb8>)
   b7b78:	b113      	cbz	r3, b7b80 <__register_exitproc+0x2c>
   b7b7a:	681b      	ldr	r3, [r3, #0]
   b7b7c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7b80:	6863      	ldr	r3, [r4, #4]
   b7b82:	2b1f      	cmp	r3, #31
   b7b84:	dd07      	ble.n	b7b96 <__register_exitproc+0x42>
   b7b86:	f8d8 0000 	ldr.w	r0, [r8]
   b7b8a:	f000 fbb7 	bl	b82fc <__retarget_lock_release_recursive>
   b7b8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7b96:	b34e      	cbz	r6, b7bec <__register_exitproc+0x98>
   b7b98:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7b9c:	b988      	cbnz	r0, b7bc2 <__register_exitproc+0x6e>
   b7b9e:	4b1c      	ldr	r3, [pc, #112]	; (b7c10 <__register_exitproc+0xbc>)
   b7ba0:	b923      	cbnz	r3, b7bac <__register_exitproc+0x58>
   b7ba2:	f8d8 0000 	ldr.w	r0, [r8]
   b7ba6:	f000 fba8 	bl	b82fa <__retarget_lock_release>
   b7baa:	e7f0      	b.n	b7b8e <__register_exitproc+0x3a>
   b7bac:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7bb0:	f7fd fa18 	bl	b4fe4 <malloc>
   b7bb4:	2800      	cmp	r0, #0
   b7bb6:	d0f4      	beq.n	b7ba2 <__register_exitproc+0x4e>
   b7bb8:	2300      	movs	r3, #0
   b7bba:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7bbe:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7bc2:	6863      	ldr	r3, [r4, #4]
   b7bc4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7bc8:	2201      	movs	r2, #1
   b7bca:	409a      	lsls	r2, r3
   b7bcc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7bd0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7bd4:	4313      	orrs	r3, r2
   b7bd6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7bda:	2e02      	cmp	r6, #2
   b7bdc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7be0:	bf02      	ittt	eq
   b7be2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7be6:	4313      	orreq	r3, r2
   b7be8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7bec:	6863      	ldr	r3, [r4, #4]
   b7bee:	f8d8 0000 	ldr.w	r0, [r8]
   b7bf2:	1c5a      	adds	r2, r3, #1
   b7bf4:	3302      	adds	r3, #2
   b7bf6:	6062      	str	r2, [r4, #4]
   b7bf8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7bfc:	f000 fb7e 	bl	b82fc <__retarget_lock_release_recursive>
   b7c00:	2000      	movs	r0, #0
   b7c02:	e7c6      	b.n	b7b92 <__register_exitproc+0x3e>
   b7c04:	2003e7e8 	.word	0x2003e7e8
   b7c08:	2003e75c 	.word	0x2003e75c
   b7c0c:	00000000 	.word	0x00000000
   b7c10:	000b4fe5 	.word	0x000b4fe5
   b7c14:	2003e3c0 	.word	0x2003e3c0

000b7c18 <rshift>:
   b7c18:	6903      	ldr	r3, [r0, #16]
   b7c1a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   b7c1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7c22:	ea4f 1261 	mov.w	r2, r1, asr #5
   b7c26:	f100 0414 	add.w	r4, r0, #20
   b7c2a:	dd45      	ble.n	b7cb8 <rshift+0xa0>
   b7c2c:	f011 011f 	ands.w	r1, r1, #31
   b7c30:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   b7c34:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   b7c38:	d10c      	bne.n	b7c54 <rshift+0x3c>
   b7c3a:	f100 0710 	add.w	r7, r0, #16
   b7c3e:	4629      	mov	r1, r5
   b7c40:	42b1      	cmp	r1, r6
   b7c42:	d334      	bcc.n	b7cae <rshift+0x96>
   b7c44:	1a9b      	subs	r3, r3, r2
   b7c46:	009b      	lsls	r3, r3, #2
   b7c48:	1eea      	subs	r2, r5, #3
   b7c4a:	4296      	cmp	r6, r2
   b7c4c:	bf38      	it	cc
   b7c4e:	2300      	movcc	r3, #0
   b7c50:	4423      	add	r3, r4
   b7c52:	e015      	b.n	b7c80 <rshift+0x68>
   b7c54:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   b7c58:	f1c1 0820 	rsb	r8, r1, #32
   b7c5c:	40cf      	lsrs	r7, r1
   b7c5e:	f105 0e04 	add.w	lr, r5, #4
   b7c62:	46a1      	mov	r9, r4
   b7c64:	4576      	cmp	r6, lr
   b7c66:	46f4      	mov	ip, lr
   b7c68:	d815      	bhi.n	b7c96 <rshift+0x7e>
   b7c6a:	1a9a      	subs	r2, r3, r2
   b7c6c:	0092      	lsls	r2, r2, #2
   b7c6e:	3a04      	subs	r2, #4
   b7c70:	3501      	adds	r5, #1
   b7c72:	42ae      	cmp	r6, r5
   b7c74:	bf38      	it	cc
   b7c76:	2200      	movcc	r2, #0
   b7c78:	18a3      	adds	r3, r4, r2
   b7c7a:	50a7      	str	r7, [r4, r2]
   b7c7c:	b107      	cbz	r7, b7c80 <rshift+0x68>
   b7c7e:	3304      	adds	r3, #4
   b7c80:	1b1a      	subs	r2, r3, r4
   b7c82:	42a3      	cmp	r3, r4
   b7c84:	ea4f 02a2 	mov.w	r2, r2, asr #2
   b7c88:	bf08      	it	eq
   b7c8a:	2300      	moveq	r3, #0
   b7c8c:	6102      	str	r2, [r0, #16]
   b7c8e:	bf08      	it	eq
   b7c90:	6143      	streq	r3, [r0, #20]
   b7c92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b7c96:	f8dc c000 	ldr.w	ip, [ip]
   b7c9a:	fa0c fc08 	lsl.w	ip, ip, r8
   b7c9e:	ea4c 0707 	orr.w	r7, ip, r7
   b7ca2:	f849 7b04 	str.w	r7, [r9], #4
   b7ca6:	f85e 7b04 	ldr.w	r7, [lr], #4
   b7caa:	40cf      	lsrs	r7, r1
   b7cac:	e7da      	b.n	b7c64 <rshift+0x4c>
   b7cae:	f851 cb04 	ldr.w	ip, [r1], #4
   b7cb2:	f847 cf04 	str.w	ip, [r7, #4]!
   b7cb6:	e7c3      	b.n	b7c40 <rshift+0x28>
   b7cb8:	4623      	mov	r3, r4
   b7cba:	e7e1      	b.n	b7c80 <rshift+0x68>

000b7cbc <__hexdig_fun>:
   b7cbc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b7cc0:	2b09      	cmp	r3, #9
   b7cc2:	d802      	bhi.n	b7cca <__hexdig_fun+0xe>
   b7cc4:	3820      	subs	r0, #32
   b7cc6:	b2c0      	uxtb	r0, r0
   b7cc8:	4770      	bx	lr
   b7cca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b7cce:	2b05      	cmp	r3, #5
   b7cd0:	d801      	bhi.n	b7cd6 <__hexdig_fun+0x1a>
   b7cd2:	3847      	subs	r0, #71	; 0x47
   b7cd4:	e7f7      	b.n	b7cc6 <__hexdig_fun+0xa>
   b7cd6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b7cda:	2b05      	cmp	r3, #5
   b7cdc:	d801      	bhi.n	b7ce2 <__hexdig_fun+0x26>
   b7cde:	3827      	subs	r0, #39	; 0x27
   b7ce0:	e7f1      	b.n	b7cc6 <__hexdig_fun+0xa>
   b7ce2:	2000      	movs	r0, #0
   b7ce4:	4770      	bx	lr
	...

000b7ce8 <__gethex>:
   b7ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7cec:	ed2d 8b02 	vpush	{d8}
   b7cf0:	b089      	sub	sp, #36	; 0x24
   b7cf2:	ee08 0a10 	vmov	s16, r0
   b7cf6:	9304      	str	r3, [sp, #16]
   b7cf8:	4bb4      	ldr	r3, [pc, #720]	; (b7fcc <__gethex+0x2e4>)
   b7cfa:	681b      	ldr	r3, [r3, #0]
   b7cfc:	9301      	str	r3, [sp, #4]
   b7cfe:	4618      	mov	r0, r3
   b7d00:	468b      	mov	fp, r1
   b7d02:	4690      	mov	r8, r2
   b7d04:	f7ff f8a6 	bl	b6e54 <strlen>
   b7d08:	9b01      	ldr	r3, [sp, #4]
   b7d0a:	f8db 2000 	ldr.w	r2, [fp]
   b7d0e:	4403      	add	r3, r0
   b7d10:	4682      	mov	sl, r0
   b7d12:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b7d16:	9305      	str	r3, [sp, #20]
   b7d18:	1c93      	adds	r3, r2, #2
   b7d1a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   b7d1e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   b7d22:	32fe      	adds	r2, #254	; 0xfe
   b7d24:	18d1      	adds	r1, r2, r3
   b7d26:	461f      	mov	r7, r3
   b7d28:	f813 0b01 	ldrb.w	r0, [r3], #1
   b7d2c:	9100      	str	r1, [sp, #0]
   b7d2e:	2830      	cmp	r0, #48	; 0x30
   b7d30:	d0f8      	beq.n	b7d24 <__gethex+0x3c>
   b7d32:	f7ff ffc3 	bl	b7cbc <__hexdig_fun>
   b7d36:	4604      	mov	r4, r0
   b7d38:	2800      	cmp	r0, #0
   b7d3a:	d13a      	bne.n	b7db2 <__gethex+0xca>
   b7d3c:	9901      	ldr	r1, [sp, #4]
   b7d3e:	4652      	mov	r2, sl
   b7d40:	4638      	mov	r0, r7
   b7d42:	f7ff f8b1 	bl	b6ea8 <strncmp>
   b7d46:	4605      	mov	r5, r0
   b7d48:	2800      	cmp	r0, #0
   b7d4a:	d168      	bne.n	b7e1e <__gethex+0x136>
   b7d4c:	f817 000a 	ldrb.w	r0, [r7, sl]
   b7d50:	eb07 060a 	add.w	r6, r7, sl
   b7d54:	f7ff ffb2 	bl	b7cbc <__hexdig_fun>
   b7d58:	2800      	cmp	r0, #0
   b7d5a:	d062      	beq.n	b7e22 <__gethex+0x13a>
   b7d5c:	4633      	mov	r3, r6
   b7d5e:	7818      	ldrb	r0, [r3, #0]
   b7d60:	2830      	cmp	r0, #48	; 0x30
   b7d62:	461f      	mov	r7, r3
   b7d64:	f103 0301 	add.w	r3, r3, #1
   b7d68:	d0f9      	beq.n	b7d5e <__gethex+0x76>
   b7d6a:	f7ff ffa7 	bl	b7cbc <__hexdig_fun>
   b7d6e:	2301      	movs	r3, #1
   b7d70:	fab0 f480 	clz	r4, r0
   b7d74:	0964      	lsrs	r4, r4, #5
   b7d76:	4635      	mov	r5, r6
   b7d78:	9300      	str	r3, [sp, #0]
   b7d7a:	463a      	mov	r2, r7
   b7d7c:	4616      	mov	r6, r2
   b7d7e:	3201      	adds	r2, #1
   b7d80:	7830      	ldrb	r0, [r6, #0]
   b7d82:	f7ff ff9b 	bl	b7cbc <__hexdig_fun>
   b7d86:	2800      	cmp	r0, #0
   b7d88:	d1f8      	bne.n	b7d7c <__gethex+0x94>
   b7d8a:	9901      	ldr	r1, [sp, #4]
   b7d8c:	4652      	mov	r2, sl
   b7d8e:	4630      	mov	r0, r6
   b7d90:	f7ff f88a 	bl	b6ea8 <strncmp>
   b7d94:	b980      	cbnz	r0, b7db8 <__gethex+0xd0>
   b7d96:	b94d      	cbnz	r5, b7dac <__gethex+0xc4>
   b7d98:	eb06 050a 	add.w	r5, r6, sl
   b7d9c:	462a      	mov	r2, r5
   b7d9e:	4616      	mov	r6, r2
   b7da0:	3201      	adds	r2, #1
   b7da2:	7830      	ldrb	r0, [r6, #0]
   b7da4:	f7ff ff8a 	bl	b7cbc <__hexdig_fun>
   b7da8:	2800      	cmp	r0, #0
   b7daa:	d1f8      	bne.n	b7d9e <__gethex+0xb6>
   b7dac:	1bad      	subs	r5, r5, r6
   b7dae:	00ad      	lsls	r5, r5, #2
   b7db0:	e004      	b.n	b7dbc <__gethex+0xd4>
   b7db2:	2400      	movs	r4, #0
   b7db4:	4625      	mov	r5, r4
   b7db6:	e7e0      	b.n	b7d7a <__gethex+0x92>
   b7db8:	2d00      	cmp	r5, #0
   b7dba:	d1f7      	bne.n	b7dac <__gethex+0xc4>
   b7dbc:	7833      	ldrb	r3, [r6, #0]
   b7dbe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b7dc2:	2b50      	cmp	r3, #80	; 0x50
   b7dc4:	d13b      	bne.n	b7e3e <__gethex+0x156>
   b7dc6:	7873      	ldrb	r3, [r6, #1]
   b7dc8:	2b2b      	cmp	r3, #43	; 0x2b
   b7dca:	d02c      	beq.n	b7e26 <__gethex+0x13e>
   b7dcc:	2b2d      	cmp	r3, #45	; 0x2d
   b7dce:	d02e      	beq.n	b7e2e <__gethex+0x146>
   b7dd0:	1c71      	adds	r1, r6, #1
   b7dd2:	f04f 0900 	mov.w	r9, #0
   b7dd6:	7808      	ldrb	r0, [r1, #0]
   b7dd8:	f7ff ff70 	bl	b7cbc <__hexdig_fun>
   b7ddc:	1e43      	subs	r3, r0, #1
   b7dde:	b2db      	uxtb	r3, r3
   b7de0:	2b18      	cmp	r3, #24
   b7de2:	d82c      	bhi.n	b7e3e <__gethex+0x156>
   b7de4:	f1a0 0210 	sub.w	r2, r0, #16
   b7de8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   b7dec:	f7ff ff66 	bl	b7cbc <__hexdig_fun>
   b7df0:	1e43      	subs	r3, r0, #1
   b7df2:	b2db      	uxtb	r3, r3
   b7df4:	2b18      	cmp	r3, #24
   b7df6:	d91d      	bls.n	b7e34 <__gethex+0x14c>
   b7df8:	f1b9 0f00 	cmp.w	r9, #0
   b7dfc:	d000      	beq.n	b7e00 <__gethex+0x118>
   b7dfe:	4252      	negs	r2, r2
   b7e00:	4415      	add	r5, r2
   b7e02:	f8cb 1000 	str.w	r1, [fp]
   b7e06:	b1e4      	cbz	r4, b7e42 <__gethex+0x15a>
   b7e08:	9b00      	ldr	r3, [sp, #0]
   b7e0a:	2b00      	cmp	r3, #0
   b7e0c:	bf14      	ite	ne
   b7e0e:	2700      	movne	r7, #0
   b7e10:	2706      	moveq	r7, #6
   b7e12:	4638      	mov	r0, r7
   b7e14:	b009      	add	sp, #36	; 0x24
   b7e16:	ecbd 8b02 	vpop	{d8}
   b7e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7e1e:	463e      	mov	r6, r7
   b7e20:	4625      	mov	r5, r4
   b7e22:	2401      	movs	r4, #1
   b7e24:	e7ca      	b.n	b7dbc <__gethex+0xd4>
   b7e26:	f04f 0900 	mov.w	r9, #0
   b7e2a:	1cb1      	adds	r1, r6, #2
   b7e2c:	e7d3      	b.n	b7dd6 <__gethex+0xee>
   b7e2e:	f04f 0901 	mov.w	r9, #1
   b7e32:	e7fa      	b.n	b7e2a <__gethex+0x142>
   b7e34:	230a      	movs	r3, #10
   b7e36:	fb03 0202 	mla	r2, r3, r2, r0
   b7e3a:	3a10      	subs	r2, #16
   b7e3c:	e7d4      	b.n	b7de8 <__gethex+0x100>
   b7e3e:	4631      	mov	r1, r6
   b7e40:	e7df      	b.n	b7e02 <__gethex+0x11a>
   b7e42:	1bf3      	subs	r3, r6, r7
   b7e44:	3b01      	subs	r3, #1
   b7e46:	4621      	mov	r1, r4
   b7e48:	2b07      	cmp	r3, #7
   b7e4a:	dc0b      	bgt.n	b7e64 <__gethex+0x17c>
   b7e4c:	ee18 0a10 	vmov	r0, s16
   b7e50:	f000 fa68 	bl	b8324 <_Balloc>
   b7e54:	4604      	mov	r4, r0
   b7e56:	b940      	cbnz	r0, b7e6a <__gethex+0x182>
   b7e58:	4b5d      	ldr	r3, [pc, #372]	; (b7fd0 <__gethex+0x2e8>)
   b7e5a:	4602      	mov	r2, r0
   b7e5c:	21de      	movs	r1, #222	; 0xde
   b7e5e:	485d      	ldr	r0, [pc, #372]	; (b7fd4 <__gethex+0x2ec>)
   b7e60:	f7fd f8e8 	bl	b5034 <__assert_func>
   b7e64:	3101      	adds	r1, #1
   b7e66:	105b      	asrs	r3, r3, #1
   b7e68:	e7ee      	b.n	b7e48 <__gethex+0x160>
   b7e6a:	f100 0914 	add.w	r9, r0, #20
   b7e6e:	f04f 0b00 	mov.w	fp, #0
   b7e72:	f1ca 0301 	rsb	r3, sl, #1
   b7e76:	f8cd 9008 	str.w	r9, [sp, #8]
   b7e7a:	f8cd b000 	str.w	fp, [sp]
   b7e7e:	9306      	str	r3, [sp, #24]
   b7e80:	42b7      	cmp	r7, r6
   b7e82:	d340      	bcc.n	b7f06 <__gethex+0x21e>
   b7e84:	9802      	ldr	r0, [sp, #8]
   b7e86:	9b00      	ldr	r3, [sp, #0]
   b7e88:	f840 3b04 	str.w	r3, [r0], #4
   b7e8c:	eba0 0009 	sub.w	r0, r0, r9
   b7e90:	1080      	asrs	r0, r0, #2
   b7e92:	0146      	lsls	r6, r0, #5
   b7e94:	6120      	str	r0, [r4, #16]
   b7e96:	4618      	mov	r0, r3
   b7e98:	f000 fb36 	bl	b8508 <__hi0bits>
   b7e9c:	1a30      	subs	r0, r6, r0
   b7e9e:	f8d8 6000 	ldr.w	r6, [r8]
   b7ea2:	42b0      	cmp	r0, r6
   b7ea4:	dd63      	ble.n	b7f6e <__gethex+0x286>
   b7ea6:	1b87      	subs	r7, r0, r6
   b7ea8:	4639      	mov	r1, r7
   b7eaa:	4620      	mov	r0, r4
   b7eac:	f000 feda 	bl	b8c64 <__any_on>
   b7eb0:	4682      	mov	sl, r0
   b7eb2:	b1a8      	cbz	r0, b7ee0 <__gethex+0x1f8>
   b7eb4:	1e7b      	subs	r3, r7, #1
   b7eb6:	1159      	asrs	r1, r3, #5
   b7eb8:	f003 021f 	and.w	r2, r3, #31
   b7ebc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   b7ec0:	f04f 0a01 	mov.w	sl, #1
   b7ec4:	fa0a f202 	lsl.w	r2, sl, r2
   b7ec8:	420a      	tst	r2, r1
   b7eca:	d009      	beq.n	b7ee0 <__gethex+0x1f8>
   b7ecc:	4553      	cmp	r3, sl
   b7ece:	dd05      	ble.n	b7edc <__gethex+0x1f4>
   b7ed0:	1eb9      	subs	r1, r7, #2
   b7ed2:	4620      	mov	r0, r4
   b7ed4:	f000 fec6 	bl	b8c64 <__any_on>
   b7ed8:	2800      	cmp	r0, #0
   b7eda:	d145      	bne.n	b7f68 <__gethex+0x280>
   b7edc:	f04f 0a02 	mov.w	sl, #2
   b7ee0:	4639      	mov	r1, r7
   b7ee2:	4620      	mov	r0, r4
   b7ee4:	f7ff fe98 	bl	b7c18 <rshift>
   b7ee8:	443d      	add	r5, r7
   b7eea:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b7eee:	42ab      	cmp	r3, r5
   b7ef0:	da4c      	bge.n	b7f8c <__gethex+0x2a4>
   b7ef2:	ee18 0a10 	vmov	r0, s16
   b7ef6:	4621      	mov	r1, r4
   b7ef8:	f000 fa54 	bl	b83a4 <_Bfree>
   b7efc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b7efe:	2300      	movs	r3, #0
   b7f00:	6013      	str	r3, [r2, #0]
   b7f02:	27a3      	movs	r7, #163	; 0xa3
   b7f04:	e785      	b.n	b7e12 <__gethex+0x12a>
   b7f06:	1e73      	subs	r3, r6, #1
   b7f08:	9a05      	ldr	r2, [sp, #20]
   b7f0a:	9303      	str	r3, [sp, #12]
   b7f0c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   b7f10:	4293      	cmp	r3, r2
   b7f12:	d019      	beq.n	b7f48 <__gethex+0x260>
   b7f14:	f1bb 0f20 	cmp.w	fp, #32
   b7f18:	d107      	bne.n	b7f2a <__gethex+0x242>
   b7f1a:	9b02      	ldr	r3, [sp, #8]
   b7f1c:	9a00      	ldr	r2, [sp, #0]
   b7f1e:	f843 2b04 	str.w	r2, [r3], #4
   b7f22:	9302      	str	r3, [sp, #8]
   b7f24:	2300      	movs	r3, #0
   b7f26:	9300      	str	r3, [sp, #0]
   b7f28:	469b      	mov	fp, r3
   b7f2a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   b7f2e:	f7ff fec5 	bl	b7cbc <__hexdig_fun>
   b7f32:	9b00      	ldr	r3, [sp, #0]
   b7f34:	f000 000f 	and.w	r0, r0, #15
   b7f38:	fa00 f00b 	lsl.w	r0, r0, fp
   b7f3c:	4303      	orrs	r3, r0
   b7f3e:	9300      	str	r3, [sp, #0]
   b7f40:	f10b 0b04 	add.w	fp, fp, #4
   b7f44:	9b03      	ldr	r3, [sp, #12]
   b7f46:	e00d      	b.n	b7f64 <__gethex+0x27c>
   b7f48:	9b03      	ldr	r3, [sp, #12]
   b7f4a:	9a06      	ldr	r2, [sp, #24]
   b7f4c:	4413      	add	r3, r2
   b7f4e:	42bb      	cmp	r3, r7
   b7f50:	d3e0      	bcc.n	b7f14 <__gethex+0x22c>
   b7f52:	4618      	mov	r0, r3
   b7f54:	9901      	ldr	r1, [sp, #4]
   b7f56:	9307      	str	r3, [sp, #28]
   b7f58:	4652      	mov	r2, sl
   b7f5a:	f7fe ffa5 	bl	b6ea8 <strncmp>
   b7f5e:	9b07      	ldr	r3, [sp, #28]
   b7f60:	2800      	cmp	r0, #0
   b7f62:	d1d7      	bne.n	b7f14 <__gethex+0x22c>
   b7f64:	461e      	mov	r6, r3
   b7f66:	e78b      	b.n	b7e80 <__gethex+0x198>
   b7f68:	f04f 0a03 	mov.w	sl, #3
   b7f6c:	e7b8      	b.n	b7ee0 <__gethex+0x1f8>
   b7f6e:	da0a      	bge.n	b7f86 <__gethex+0x29e>
   b7f70:	1a37      	subs	r7, r6, r0
   b7f72:	4621      	mov	r1, r4
   b7f74:	ee18 0a10 	vmov	r0, s16
   b7f78:	463a      	mov	r2, r7
   b7f7a:	f000 fc2f 	bl	b87dc <__lshift>
   b7f7e:	1bed      	subs	r5, r5, r7
   b7f80:	4604      	mov	r4, r0
   b7f82:	f100 0914 	add.w	r9, r0, #20
   b7f86:	f04f 0a00 	mov.w	sl, #0
   b7f8a:	e7ae      	b.n	b7eea <__gethex+0x202>
   b7f8c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b7f90:	42a8      	cmp	r0, r5
   b7f92:	dd72      	ble.n	b807a <__gethex+0x392>
   b7f94:	1b45      	subs	r5, r0, r5
   b7f96:	42ae      	cmp	r6, r5
   b7f98:	dc36      	bgt.n	b8008 <__gethex+0x320>
   b7f9a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b7f9e:	2b02      	cmp	r3, #2
   b7fa0:	d02a      	beq.n	b7ff8 <__gethex+0x310>
   b7fa2:	2b03      	cmp	r3, #3
   b7fa4:	d02c      	beq.n	b8000 <__gethex+0x318>
   b7fa6:	2b01      	cmp	r3, #1
   b7fa8:	d11c      	bne.n	b7fe4 <__gethex+0x2fc>
   b7faa:	42ae      	cmp	r6, r5
   b7fac:	d11a      	bne.n	b7fe4 <__gethex+0x2fc>
   b7fae:	2e01      	cmp	r6, #1
   b7fb0:	d112      	bne.n	b7fd8 <__gethex+0x2f0>
   b7fb2:	9a04      	ldr	r2, [sp, #16]
   b7fb4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b7fb8:	6013      	str	r3, [r2, #0]
   b7fba:	2301      	movs	r3, #1
   b7fbc:	6123      	str	r3, [r4, #16]
   b7fbe:	f8c9 3000 	str.w	r3, [r9]
   b7fc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b7fc4:	2762      	movs	r7, #98	; 0x62
   b7fc6:	601c      	str	r4, [r3, #0]
   b7fc8:	e723      	b.n	b7e12 <__gethex+0x12a>
   b7fca:	bf00      	nop
   b7fcc:	000b964c 	.word	0x000b964c
   b7fd0:	000b95d9 	.word	0x000b95d9
   b7fd4:	000b95ea 	.word	0x000b95ea
   b7fd8:	1e71      	subs	r1, r6, #1
   b7fda:	4620      	mov	r0, r4
   b7fdc:	f000 fe42 	bl	b8c64 <__any_on>
   b7fe0:	2800      	cmp	r0, #0
   b7fe2:	d1e6      	bne.n	b7fb2 <__gethex+0x2ca>
   b7fe4:	ee18 0a10 	vmov	r0, s16
   b7fe8:	4621      	mov	r1, r4
   b7fea:	f000 f9db 	bl	b83a4 <_Bfree>
   b7fee:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b7ff0:	2300      	movs	r3, #0
   b7ff2:	6013      	str	r3, [r2, #0]
   b7ff4:	2750      	movs	r7, #80	; 0x50
   b7ff6:	e70c      	b.n	b7e12 <__gethex+0x12a>
   b7ff8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b7ffa:	2b00      	cmp	r3, #0
   b7ffc:	d1f2      	bne.n	b7fe4 <__gethex+0x2fc>
   b7ffe:	e7d8      	b.n	b7fb2 <__gethex+0x2ca>
   b8000:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b8002:	2b00      	cmp	r3, #0
   b8004:	d1d5      	bne.n	b7fb2 <__gethex+0x2ca>
   b8006:	e7ed      	b.n	b7fe4 <__gethex+0x2fc>
   b8008:	1e6f      	subs	r7, r5, #1
   b800a:	f1ba 0f00 	cmp.w	sl, #0
   b800e:	d131      	bne.n	b8074 <__gethex+0x38c>
   b8010:	b127      	cbz	r7, b801c <__gethex+0x334>
   b8012:	4639      	mov	r1, r7
   b8014:	4620      	mov	r0, r4
   b8016:	f000 fe25 	bl	b8c64 <__any_on>
   b801a:	4682      	mov	sl, r0
   b801c:	117b      	asrs	r3, r7, #5
   b801e:	2101      	movs	r1, #1
   b8020:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   b8024:	f007 071f 	and.w	r7, r7, #31
   b8028:	fa01 f707 	lsl.w	r7, r1, r7
   b802c:	421f      	tst	r7, r3
   b802e:	4629      	mov	r1, r5
   b8030:	4620      	mov	r0, r4
   b8032:	bf18      	it	ne
   b8034:	f04a 0a02 	orrne.w	sl, sl, #2
   b8038:	1b76      	subs	r6, r6, r5
   b803a:	f7ff fded 	bl	b7c18 <rshift>
   b803e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   b8042:	2702      	movs	r7, #2
   b8044:	f1ba 0f00 	cmp.w	sl, #0
   b8048:	d048      	beq.n	b80dc <__gethex+0x3f4>
   b804a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b804e:	2b02      	cmp	r3, #2
   b8050:	d015      	beq.n	b807e <__gethex+0x396>
   b8052:	2b03      	cmp	r3, #3
   b8054:	d017      	beq.n	b8086 <__gethex+0x39e>
   b8056:	2b01      	cmp	r3, #1
   b8058:	d109      	bne.n	b806e <__gethex+0x386>
   b805a:	f01a 0f02 	tst.w	sl, #2
   b805e:	d006      	beq.n	b806e <__gethex+0x386>
   b8060:	f8d9 0000 	ldr.w	r0, [r9]
   b8064:	ea4a 0a00 	orr.w	sl, sl, r0
   b8068:	f01a 0f01 	tst.w	sl, #1
   b806c:	d10e      	bne.n	b808c <__gethex+0x3a4>
   b806e:	f047 0710 	orr.w	r7, r7, #16
   b8072:	e033      	b.n	b80dc <__gethex+0x3f4>
   b8074:	f04f 0a01 	mov.w	sl, #1
   b8078:	e7d0      	b.n	b801c <__gethex+0x334>
   b807a:	2701      	movs	r7, #1
   b807c:	e7e2      	b.n	b8044 <__gethex+0x35c>
   b807e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b8080:	f1c3 0301 	rsb	r3, r3, #1
   b8084:	9315      	str	r3, [sp, #84]	; 0x54
   b8086:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b8088:	2b00      	cmp	r3, #0
   b808a:	d0f0      	beq.n	b806e <__gethex+0x386>
   b808c:	f8d4 b010 	ldr.w	fp, [r4, #16]
   b8090:	f104 0314 	add.w	r3, r4, #20
   b8094:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   b8098:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   b809c:	f04f 0c00 	mov.w	ip, #0
   b80a0:	4618      	mov	r0, r3
   b80a2:	f853 2b04 	ldr.w	r2, [r3], #4
   b80a6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   b80aa:	d01c      	beq.n	b80e6 <__gethex+0x3fe>
   b80ac:	3201      	adds	r2, #1
   b80ae:	6002      	str	r2, [r0, #0]
   b80b0:	2f02      	cmp	r7, #2
   b80b2:	f104 0314 	add.w	r3, r4, #20
   b80b6:	d13f      	bne.n	b8138 <__gethex+0x450>
   b80b8:	f8d8 2000 	ldr.w	r2, [r8]
   b80bc:	3a01      	subs	r2, #1
   b80be:	42b2      	cmp	r2, r6
   b80c0:	d10a      	bne.n	b80d8 <__gethex+0x3f0>
   b80c2:	1171      	asrs	r1, r6, #5
   b80c4:	2201      	movs	r2, #1
   b80c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   b80ca:	f006 061f 	and.w	r6, r6, #31
   b80ce:	fa02 f606 	lsl.w	r6, r2, r6
   b80d2:	421e      	tst	r6, r3
   b80d4:	bf18      	it	ne
   b80d6:	4617      	movne	r7, r2
   b80d8:	f047 0720 	orr.w	r7, r7, #32
   b80dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b80de:	601c      	str	r4, [r3, #0]
   b80e0:	9b04      	ldr	r3, [sp, #16]
   b80e2:	601d      	str	r5, [r3, #0]
   b80e4:	e695      	b.n	b7e12 <__gethex+0x12a>
   b80e6:	4299      	cmp	r1, r3
   b80e8:	f843 cc04 	str.w	ip, [r3, #-4]
   b80ec:	d8d8      	bhi.n	b80a0 <__gethex+0x3b8>
   b80ee:	68a3      	ldr	r3, [r4, #8]
   b80f0:	459b      	cmp	fp, r3
   b80f2:	db19      	blt.n	b8128 <__gethex+0x440>
   b80f4:	6861      	ldr	r1, [r4, #4]
   b80f6:	ee18 0a10 	vmov	r0, s16
   b80fa:	3101      	adds	r1, #1
   b80fc:	f000 f912 	bl	b8324 <_Balloc>
   b8100:	4681      	mov	r9, r0
   b8102:	b918      	cbnz	r0, b810c <__gethex+0x424>
   b8104:	4b1a      	ldr	r3, [pc, #104]	; (b8170 <__gethex+0x488>)
   b8106:	4602      	mov	r2, r0
   b8108:	2184      	movs	r1, #132	; 0x84
   b810a:	e6a8      	b.n	b7e5e <__gethex+0x176>
   b810c:	6922      	ldr	r2, [r4, #16]
   b810e:	3202      	adds	r2, #2
   b8110:	f104 010c 	add.w	r1, r4, #12
   b8114:	0092      	lsls	r2, r2, #2
   b8116:	300c      	adds	r0, #12
   b8118:	f7fe fe2b 	bl	b6d72 <memcpy>
   b811c:	4621      	mov	r1, r4
   b811e:	ee18 0a10 	vmov	r0, s16
   b8122:	f000 f93f 	bl	b83a4 <_Bfree>
   b8126:	464c      	mov	r4, r9
   b8128:	6923      	ldr	r3, [r4, #16]
   b812a:	1c5a      	adds	r2, r3, #1
   b812c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   b8130:	6122      	str	r2, [r4, #16]
   b8132:	2201      	movs	r2, #1
   b8134:	615a      	str	r2, [r3, #20]
   b8136:	e7bb      	b.n	b80b0 <__gethex+0x3c8>
   b8138:	6922      	ldr	r2, [r4, #16]
   b813a:	455a      	cmp	r2, fp
   b813c:	dd0b      	ble.n	b8156 <__gethex+0x46e>
   b813e:	2101      	movs	r1, #1
   b8140:	4620      	mov	r0, r4
   b8142:	f7ff fd69 	bl	b7c18 <rshift>
   b8146:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b814a:	3501      	adds	r5, #1
   b814c:	42ab      	cmp	r3, r5
   b814e:	f6ff aed0 	blt.w	b7ef2 <__gethex+0x20a>
   b8152:	2701      	movs	r7, #1
   b8154:	e7c0      	b.n	b80d8 <__gethex+0x3f0>
   b8156:	f016 061f 	ands.w	r6, r6, #31
   b815a:	d0fa      	beq.n	b8152 <__gethex+0x46a>
   b815c:	4453      	add	r3, sl
   b815e:	f1c6 0620 	rsb	r6, r6, #32
   b8162:	f853 0c04 	ldr.w	r0, [r3, #-4]
   b8166:	f000 f9cf 	bl	b8508 <__hi0bits>
   b816a:	42b0      	cmp	r0, r6
   b816c:	dbe7      	blt.n	b813e <__gethex+0x456>
   b816e:	e7f0      	b.n	b8152 <__gethex+0x46a>
   b8170:	000b95d9 	.word	0x000b95d9

000b8174 <L_shift>:
   b8174:	f1c2 0208 	rsb	r2, r2, #8
   b8178:	0092      	lsls	r2, r2, #2
   b817a:	b570      	push	{r4, r5, r6, lr}
   b817c:	f1c2 0620 	rsb	r6, r2, #32
   b8180:	6843      	ldr	r3, [r0, #4]
   b8182:	6804      	ldr	r4, [r0, #0]
   b8184:	fa03 f506 	lsl.w	r5, r3, r6
   b8188:	432c      	orrs	r4, r5
   b818a:	40d3      	lsrs	r3, r2
   b818c:	6004      	str	r4, [r0, #0]
   b818e:	f840 3f04 	str.w	r3, [r0, #4]!
   b8192:	4288      	cmp	r0, r1
   b8194:	d3f4      	bcc.n	b8180 <L_shift+0xc>
   b8196:	bd70      	pop	{r4, r5, r6, pc}

000b8198 <__match>:
   b8198:	b530      	push	{r4, r5, lr}
   b819a:	6803      	ldr	r3, [r0, #0]
   b819c:	3301      	adds	r3, #1
   b819e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b81a2:	b914      	cbnz	r4, b81aa <__match+0x12>
   b81a4:	6003      	str	r3, [r0, #0]
   b81a6:	2001      	movs	r0, #1
   b81a8:	bd30      	pop	{r4, r5, pc}
   b81aa:	f813 2b01 	ldrb.w	r2, [r3], #1
   b81ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   b81b2:	2d19      	cmp	r5, #25
   b81b4:	bf98      	it	ls
   b81b6:	3220      	addls	r2, #32
   b81b8:	42a2      	cmp	r2, r4
   b81ba:	d0f0      	beq.n	b819e <__match+0x6>
   b81bc:	2000      	movs	r0, #0
   b81be:	e7f3      	b.n	b81a8 <__match+0x10>

000b81c0 <__hexnan>:
   b81c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b81c4:	680b      	ldr	r3, [r1, #0]
   b81c6:	115e      	asrs	r6, r3, #5
   b81c8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   b81cc:	f013 031f 	ands.w	r3, r3, #31
   b81d0:	b087      	sub	sp, #28
   b81d2:	bf18      	it	ne
   b81d4:	3604      	addne	r6, #4
   b81d6:	2500      	movs	r5, #0
   b81d8:	1f37      	subs	r7, r6, #4
   b81da:	4690      	mov	r8, r2
   b81dc:	6802      	ldr	r2, [r0, #0]
   b81de:	9301      	str	r3, [sp, #4]
   b81e0:	4682      	mov	sl, r0
   b81e2:	f846 5c04 	str.w	r5, [r6, #-4]
   b81e6:	46b9      	mov	r9, r7
   b81e8:	463c      	mov	r4, r7
   b81ea:	9502      	str	r5, [sp, #8]
   b81ec:	46ab      	mov	fp, r5
   b81ee:	7851      	ldrb	r1, [r2, #1]
   b81f0:	1c53      	adds	r3, r2, #1
   b81f2:	9303      	str	r3, [sp, #12]
   b81f4:	b341      	cbz	r1, b8248 <__hexnan+0x88>
   b81f6:	4608      	mov	r0, r1
   b81f8:	9205      	str	r2, [sp, #20]
   b81fa:	9104      	str	r1, [sp, #16]
   b81fc:	f7ff fd5e 	bl	b7cbc <__hexdig_fun>
   b8200:	2800      	cmp	r0, #0
   b8202:	d14f      	bne.n	b82a4 <__hexnan+0xe4>
   b8204:	9904      	ldr	r1, [sp, #16]
   b8206:	9a05      	ldr	r2, [sp, #20]
   b8208:	2920      	cmp	r1, #32
   b820a:	d818      	bhi.n	b823e <__hexnan+0x7e>
   b820c:	9b02      	ldr	r3, [sp, #8]
   b820e:	459b      	cmp	fp, r3
   b8210:	dd13      	ble.n	b823a <__hexnan+0x7a>
   b8212:	454c      	cmp	r4, r9
   b8214:	d206      	bcs.n	b8224 <__hexnan+0x64>
   b8216:	2d07      	cmp	r5, #7
   b8218:	dc04      	bgt.n	b8224 <__hexnan+0x64>
   b821a:	462a      	mov	r2, r5
   b821c:	4649      	mov	r1, r9
   b821e:	4620      	mov	r0, r4
   b8220:	f7ff ffa8 	bl	b8174 <L_shift>
   b8224:	4544      	cmp	r4, r8
   b8226:	d950      	bls.n	b82ca <__hexnan+0x10a>
   b8228:	2300      	movs	r3, #0
   b822a:	f1a4 0904 	sub.w	r9, r4, #4
   b822e:	f844 3c04 	str.w	r3, [r4, #-4]
   b8232:	f8cd b008 	str.w	fp, [sp, #8]
   b8236:	464c      	mov	r4, r9
   b8238:	461d      	mov	r5, r3
   b823a:	9a03      	ldr	r2, [sp, #12]
   b823c:	e7d7      	b.n	b81ee <__hexnan+0x2e>
   b823e:	2929      	cmp	r1, #41	; 0x29
   b8240:	d156      	bne.n	b82f0 <__hexnan+0x130>
   b8242:	3202      	adds	r2, #2
   b8244:	f8ca 2000 	str.w	r2, [sl]
   b8248:	f1bb 0f00 	cmp.w	fp, #0
   b824c:	d050      	beq.n	b82f0 <__hexnan+0x130>
   b824e:	454c      	cmp	r4, r9
   b8250:	d206      	bcs.n	b8260 <__hexnan+0xa0>
   b8252:	2d07      	cmp	r5, #7
   b8254:	dc04      	bgt.n	b8260 <__hexnan+0xa0>
   b8256:	462a      	mov	r2, r5
   b8258:	4649      	mov	r1, r9
   b825a:	4620      	mov	r0, r4
   b825c:	f7ff ff8a 	bl	b8174 <L_shift>
   b8260:	4544      	cmp	r4, r8
   b8262:	d934      	bls.n	b82ce <__hexnan+0x10e>
   b8264:	f1a8 0204 	sub.w	r2, r8, #4
   b8268:	4623      	mov	r3, r4
   b826a:	f853 1b04 	ldr.w	r1, [r3], #4
   b826e:	f842 1f04 	str.w	r1, [r2, #4]!
   b8272:	429f      	cmp	r7, r3
   b8274:	d2f9      	bcs.n	b826a <__hexnan+0xaa>
   b8276:	1b3b      	subs	r3, r7, r4
   b8278:	f023 0303 	bic.w	r3, r3, #3
   b827c:	3304      	adds	r3, #4
   b827e:	3401      	adds	r4, #1
   b8280:	3e03      	subs	r6, #3
   b8282:	42b4      	cmp	r4, r6
   b8284:	bf88      	it	hi
   b8286:	2304      	movhi	r3, #4
   b8288:	4443      	add	r3, r8
   b828a:	2200      	movs	r2, #0
   b828c:	f843 2b04 	str.w	r2, [r3], #4
   b8290:	429f      	cmp	r7, r3
   b8292:	d2fb      	bcs.n	b828c <__hexnan+0xcc>
   b8294:	683b      	ldr	r3, [r7, #0]
   b8296:	b91b      	cbnz	r3, b82a0 <__hexnan+0xe0>
   b8298:	4547      	cmp	r7, r8
   b829a:	d127      	bne.n	b82ec <__hexnan+0x12c>
   b829c:	2301      	movs	r3, #1
   b829e:	603b      	str	r3, [r7, #0]
   b82a0:	2005      	movs	r0, #5
   b82a2:	e026      	b.n	b82f2 <__hexnan+0x132>
   b82a4:	3501      	adds	r5, #1
   b82a6:	2d08      	cmp	r5, #8
   b82a8:	f10b 0b01 	add.w	fp, fp, #1
   b82ac:	dd06      	ble.n	b82bc <__hexnan+0xfc>
   b82ae:	4544      	cmp	r4, r8
   b82b0:	d9c3      	bls.n	b823a <__hexnan+0x7a>
   b82b2:	2300      	movs	r3, #0
   b82b4:	f844 3c04 	str.w	r3, [r4, #-4]
   b82b8:	2501      	movs	r5, #1
   b82ba:	3c04      	subs	r4, #4
   b82bc:	6822      	ldr	r2, [r4, #0]
   b82be:	f000 000f 	and.w	r0, r0, #15
   b82c2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   b82c6:	6022      	str	r2, [r4, #0]
   b82c8:	e7b7      	b.n	b823a <__hexnan+0x7a>
   b82ca:	2508      	movs	r5, #8
   b82cc:	e7b5      	b.n	b823a <__hexnan+0x7a>
   b82ce:	9b01      	ldr	r3, [sp, #4]
   b82d0:	2b00      	cmp	r3, #0
   b82d2:	d0df      	beq.n	b8294 <__hexnan+0xd4>
   b82d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b82d8:	f1c3 0320 	rsb	r3, r3, #32
   b82dc:	fa22 f303 	lsr.w	r3, r2, r3
   b82e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
   b82e4:	401a      	ands	r2, r3
   b82e6:	f846 2c04 	str.w	r2, [r6, #-4]
   b82ea:	e7d3      	b.n	b8294 <__hexnan+0xd4>
   b82ec:	3f04      	subs	r7, #4
   b82ee:	e7d1      	b.n	b8294 <__hexnan+0xd4>
   b82f0:	2004      	movs	r0, #4
   b82f2:	b007      	add	sp, #28
   b82f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b82f8 <__retarget_lock_acquire_recursive>:
   b82f8:	4770      	bx	lr

000b82fa <__retarget_lock_release>:
   b82fa:	4770      	bx	lr

000b82fc <__retarget_lock_release_recursive>:
   b82fc:	4770      	bx	lr

000b82fe <__ascii_mbtowc>:
   b82fe:	b082      	sub	sp, #8
   b8300:	b901      	cbnz	r1, b8304 <__ascii_mbtowc+0x6>
   b8302:	a901      	add	r1, sp, #4
   b8304:	b142      	cbz	r2, b8318 <__ascii_mbtowc+0x1a>
   b8306:	b14b      	cbz	r3, b831c <__ascii_mbtowc+0x1e>
   b8308:	7813      	ldrb	r3, [r2, #0]
   b830a:	600b      	str	r3, [r1, #0]
   b830c:	7812      	ldrb	r2, [r2, #0]
   b830e:	1e10      	subs	r0, r2, #0
   b8310:	bf18      	it	ne
   b8312:	2001      	movne	r0, #1
   b8314:	b002      	add	sp, #8
   b8316:	4770      	bx	lr
   b8318:	4610      	mov	r0, r2
   b831a:	e7fb      	b.n	b8314 <__ascii_mbtowc+0x16>
   b831c:	f06f 0001 	mvn.w	r0, #1
   b8320:	e7f8      	b.n	b8314 <__ascii_mbtowc+0x16>
	...

000b8324 <_Balloc>:
   b8324:	b570      	push	{r4, r5, r6, lr}
   b8326:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b8328:	4604      	mov	r4, r0
   b832a:	460d      	mov	r5, r1
   b832c:	b976      	cbnz	r6, b834c <_Balloc+0x28>
   b832e:	2010      	movs	r0, #16
   b8330:	f7fc fe58 	bl	b4fe4 <malloc>
   b8334:	4602      	mov	r2, r0
   b8336:	6260      	str	r0, [r4, #36]	; 0x24
   b8338:	b920      	cbnz	r0, b8344 <_Balloc+0x20>
   b833a:	4b18      	ldr	r3, [pc, #96]	; (b839c <_Balloc+0x78>)
   b833c:	4818      	ldr	r0, [pc, #96]	; (b83a0 <_Balloc+0x7c>)
   b833e:	2166      	movs	r1, #102	; 0x66
   b8340:	f7fc fe78 	bl	b5034 <__assert_func>
   b8344:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b8348:	6006      	str	r6, [r0, #0]
   b834a:	60c6      	str	r6, [r0, #12]
   b834c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b834e:	68f3      	ldr	r3, [r6, #12]
   b8350:	b183      	cbz	r3, b8374 <_Balloc+0x50>
   b8352:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b8354:	68db      	ldr	r3, [r3, #12]
   b8356:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   b835a:	b9b8      	cbnz	r0, b838c <_Balloc+0x68>
   b835c:	2101      	movs	r1, #1
   b835e:	fa01 f605 	lsl.w	r6, r1, r5
   b8362:	1d72      	adds	r2, r6, #5
   b8364:	0092      	lsls	r2, r2, #2
   b8366:	4620      	mov	r0, r4
   b8368:	f000 fc9d 	bl	b8ca6 <_calloc_r>
   b836c:	b160      	cbz	r0, b8388 <_Balloc+0x64>
   b836e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   b8372:	e00e      	b.n	b8392 <_Balloc+0x6e>
   b8374:	2221      	movs	r2, #33	; 0x21
   b8376:	2104      	movs	r1, #4
   b8378:	4620      	mov	r0, r4
   b837a:	f000 fc94 	bl	b8ca6 <_calloc_r>
   b837e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b8380:	60f0      	str	r0, [r6, #12]
   b8382:	68db      	ldr	r3, [r3, #12]
   b8384:	2b00      	cmp	r3, #0
   b8386:	d1e4      	bne.n	b8352 <_Balloc+0x2e>
   b8388:	2000      	movs	r0, #0
   b838a:	bd70      	pop	{r4, r5, r6, pc}
   b838c:	6802      	ldr	r2, [r0, #0]
   b838e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   b8392:	2300      	movs	r3, #0
   b8394:	e9c0 3303 	strd	r3, r3, [r0, #12]
   b8398:	e7f7      	b.n	b838a <_Balloc+0x66>
   b839a:	bf00      	nop
   b839c:	000b9409 	.word	0x000b9409
   b83a0:	000b9660 	.word	0x000b9660

000b83a4 <_Bfree>:
   b83a4:	b570      	push	{r4, r5, r6, lr}
   b83a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b83a8:	4605      	mov	r5, r0
   b83aa:	460c      	mov	r4, r1
   b83ac:	b976      	cbnz	r6, b83cc <_Bfree+0x28>
   b83ae:	2010      	movs	r0, #16
   b83b0:	f7fc fe18 	bl	b4fe4 <malloc>
   b83b4:	4602      	mov	r2, r0
   b83b6:	6268      	str	r0, [r5, #36]	; 0x24
   b83b8:	b920      	cbnz	r0, b83c4 <_Bfree+0x20>
   b83ba:	4b09      	ldr	r3, [pc, #36]	; (b83e0 <_Bfree+0x3c>)
   b83bc:	4809      	ldr	r0, [pc, #36]	; (b83e4 <_Bfree+0x40>)
   b83be:	218a      	movs	r1, #138	; 0x8a
   b83c0:	f7fc fe38 	bl	b5034 <__assert_func>
   b83c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b83c8:	6006      	str	r6, [r0, #0]
   b83ca:	60c6      	str	r6, [r0, #12]
   b83cc:	b13c      	cbz	r4, b83de <_Bfree+0x3a>
   b83ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b83d0:	6862      	ldr	r2, [r4, #4]
   b83d2:	68db      	ldr	r3, [r3, #12]
   b83d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b83d8:	6021      	str	r1, [r4, #0]
   b83da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   b83de:	bd70      	pop	{r4, r5, r6, pc}
   b83e0:	000b9409 	.word	0x000b9409
   b83e4:	000b9660 	.word	0x000b9660

000b83e8 <__multadd>:
   b83e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b83ec:	690d      	ldr	r5, [r1, #16]
   b83ee:	4607      	mov	r7, r0
   b83f0:	460c      	mov	r4, r1
   b83f2:	461e      	mov	r6, r3
   b83f4:	f101 0c14 	add.w	ip, r1, #20
   b83f8:	2000      	movs	r0, #0
   b83fa:	f8dc 3000 	ldr.w	r3, [ip]
   b83fe:	b299      	uxth	r1, r3
   b8400:	fb02 6101 	mla	r1, r2, r1, r6
   b8404:	0c1e      	lsrs	r6, r3, #16
   b8406:	0c0b      	lsrs	r3, r1, #16
   b8408:	fb02 3306 	mla	r3, r2, r6, r3
   b840c:	b289      	uxth	r1, r1
   b840e:	3001      	adds	r0, #1
   b8410:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   b8414:	4285      	cmp	r5, r0
   b8416:	f84c 1b04 	str.w	r1, [ip], #4
   b841a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   b841e:	dcec      	bgt.n	b83fa <__multadd+0x12>
   b8420:	b30e      	cbz	r6, b8466 <__multadd+0x7e>
   b8422:	68a3      	ldr	r3, [r4, #8]
   b8424:	42ab      	cmp	r3, r5
   b8426:	dc19      	bgt.n	b845c <__multadd+0x74>
   b8428:	6861      	ldr	r1, [r4, #4]
   b842a:	4638      	mov	r0, r7
   b842c:	3101      	adds	r1, #1
   b842e:	f7ff ff79 	bl	b8324 <_Balloc>
   b8432:	4680      	mov	r8, r0
   b8434:	b928      	cbnz	r0, b8442 <__multadd+0x5a>
   b8436:	4602      	mov	r2, r0
   b8438:	4b0c      	ldr	r3, [pc, #48]	; (b846c <__multadd+0x84>)
   b843a:	480d      	ldr	r0, [pc, #52]	; (b8470 <__multadd+0x88>)
   b843c:	21b5      	movs	r1, #181	; 0xb5
   b843e:	f7fc fdf9 	bl	b5034 <__assert_func>
   b8442:	6922      	ldr	r2, [r4, #16]
   b8444:	3202      	adds	r2, #2
   b8446:	f104 010c 	add.w	r1, r4, #12
   b844a:	0092      	lsls	r2, r2, #2
   b844c:	300c      	adds	r0, #12
   b844e:	f7fe fc90 	bl	b6d72 <memcpy>
   b8452:	4621      	mov	r1, r4
   b8454:	4638      	mov	r0, r7
   b8456:	f7ff ffa5 	bl	b83a4 <_Bfree>
   b845a:	4644      	mov	r4, r8
   b845c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   b8460:	3501      	adds	r5, #1
   b8462:	615e      	str	r6, [r3, #20]
   b8464:	6125      	str	r5, [r4, #16]
   b8466:	4620      	mov	r0, r4
   b8468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b846c:	000b95d9 	.word	0x000b95d9
   b8470:	000b9660 	.word	0x000b9660

000b8474 <__s2b>:
   b8474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8478:	460c      	mov	r4, r1
   b847a:	4615      	mov	r5, r2
   b847c:	461f      	mov	r7, r3
   b847e:	2209      	movs	r2, #9
   b8480:	3308      	adds	r3, #8
   b8482:	4606      	mov	r6, r0
   b8484:	fb93 f3f2 	sdiv	r3, r3, r2
   b8488:	2100      	movs	r1, #0
   b848a:	2201      	movs	r2, #1
   b848c:	429a      	cmp	r2, r3
   b848e:	db09      	blt.n	b84a4 <__s2b+0x30>
   b8490:	4630      	mov	r0, r6
   b8492:	f7ff ff47 	bl	b8324 <_Balloc>
   b8496:	b940      	cbnz	r0, b84aa <__s2b+0x36>
   b8498:	4602      	mov	r2, r0
   b849a:	4b19      	ldr	r3, [pc, #100]	; (b8500 <__s2b+0x8c>)
   b849c:	4819      	ldr	r0, [pc, #100]	; (b8504 <__s2b+0x90>)
   b849e:	21ce      	movs	r1, #206	; 0xce
   b84a0:	f7fc fdc8 	bl	b5034 <__assert_func>
   b84a4:	0052      	lsls	r2, r2, #1
   b84a6:	3101      	adds	r1, #1
   b84a8:	e7f0      	b.n	b848c <__s2b+0x18>
   b84aa:	9b08      	ldr	r3, [sp, #32]
   b84ac:	6143      	str	r3, [r0, #20]
   b84ae:	2d09      	cmp	r5, #9
   b84b0:	f04f 0301 	mov.w	r3, #1
   b84b4:	6103      	str	r3, [r0, #16]
   b84b6:	dd16      	ble.n	b84e6 <__s2b+0x72>
   b84b8:	f104 0909 	add.w	r9, r4, #9
   b84bc:	46c8      	mov	r8, r9
   b84be:	442c      	add	r4, r5
   b84c0:	f818 3b01 	ldrb.w	r3, [r8], #1
   b84c4:	4601      	mov	r1, r0
   b84c6:	3b30      	subs	r3, #48	; 0x30
   b84c8:	220a      	movs	r2, #10
   b84ca:	4630      	mov	r0, r6
   b84cc:	f7ff ff8c 	bl	b83e8 <__multadd>
   b84d0:	45a0      	cmp	r8, r4
   b84d2:	d1f5      	bne.n	b84c0 <__s2b+0x4c>
   b84d4:	f1a5 0408 	sub.w	r4, r5, #8
   b84d8:	444c      	add	r4, r9
   b84da:	1b2d      	subs	r5, r5, r4
   b84dc:	1963      	adds	r3, r4, r5
   b84de:	42bb      	cmp	r3, r7
   b84e0:	db04      	blt.n	b84ec <__s2b+0x78>
   b84e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b84e6:	340a      	adds	r4, #10
   b84e8:	2509      	movs	r5, #9
   b84ea:	e7f6      	b.n	b84da <__s2b+0x66>
   b84ec:	f814 3b01 	ldrb.w	r3, [r4], #1
   b84f0:	4601      	mov	r1, r0
   b84f2:	3b30      	subs	r3, #48	; 0x30
   b84f4:	220a      	movs	r2, #10
   b84f6:	4630      	mov	r0, r6
   b84f8:	f7ff ff76 	bl	b83e8 <__multadd>
   b84fc:	e7ee      	b.n	b84dc <__s2b+0x68>
   b84fe:	bf00      	nop
   b8500:	000b95d9 	.word	0x000b95d9
   b8504:	000b9660 	.word	0x000b9660

000b8508 <__hi0bits>:
   b8508:	0c03      	lsrs	r3, r0, #16
   b850a:	041b      	lsls	r3, r3, #16
   b850c:	b9d3      	cbnz	r3, b8544 <__hi0bits+0x3c>
   b850e:	0400      	lsls	r0, r0, #16
   b8510:	2310      	movs	r3, #16
   b8512:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   b8516:	bf04      	itt	eq
   b8518:	0200      	lsleq	r0, r0, #8
   b851a:	3308      	addeq	r3, #8
   b851c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   b8520:	bf04      	itt	eq
   b8522:	0100      	lsleq	r0, r0, #4
   b8524:	3304      	addeq	r3, #4
   b8526:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   b852a:	bf04      	itt	eq
   b852c:	0080      	lsleq	r0, r0, #2
   b852e:	3302      	addeq	r3, #2
   b8530:	2800      	cmp	r0, #0
   b8532:	db05      	blt.n	b8540 <__hi0bits+0x38>
   b8534:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   b8538:	f103 0301 	add.w	r3, r3, #1
   b853c:	bf08      	it	eq
   b853e:	2320      	moveq	r3, #32
   b8540:	4618      	mov	r0, r3
   b8542:	4770      	bx	lr
   b8544:	2300      	movs	r3, #0
   b8546:	e7e4      	b.n	b8512 <__hi0bits+0xa>

000b8548 <__lo0bits>:
   b8548:	6803      	ldr	r3, [r0, #0]
   b854a:	f013 0207 	ands.w	r2, r3, #7
   b854e:	4601      	mov	r1, r0
   b8550:	d00b      	beq.n	b856a <__lo0bits+0x22>
   b8552:	07da      	lsls	r2, r3, #31
   b8554:	d423      	bmi.n	b859e <__lo0bits+0x56>
   b8556:	0798      	lsls	r0, r3, #30
   b8558:	bf49      	itett	mi
   b855a:	085b      	lsrmi	r3, r3, #1
   b855c:	089b      	lsrpl	r3, r3, #2
   b855e:	2001      	movmi	r0, #1
   b8560:	600b      	strmi	r3, [r1, #0]
   b8562:	bf5c      	itt	pl
   b8564:	600b      	strpl	r3, [r1, #0]
   b8566:	2002      	movpl	r0, #2
   b8568:	4770      	bx	lr
   b856a:	b298      	uxth	r0, r3
   b856c:	b9a8      	cbnz	r0, b859a <__lo0bits+0x52>
   b856e:	0c1b      	lsrs	r3, r3, #16
   b8570:	2010      	movs	r0, #16
   b8572:	b2da      	uxtb	r2, r3
   b8574:	b90a      	cbnz	r2, b857a <__lo0bits+0x32>
   b8576:	3008      	adds	r0, #8
   b8578:	0a1b      	lsrs	r3, r3, #8
   b857a:	071a      	lsls	r2, r3, #28
   b857c:	bf04      	itt	eq
   b857e:	091b      	lsreq	r3, r3, #4
   b8580:	3004      	addeq	r0, #4
   b8582:	079a      	lsls	r2, r3, #30
   b8584:	bf04      	itt	eq
   b8586:	089b      	lsreq	r3, r3, #2
   b8588:	3002      	addeq	r0, #2
   b858a:	07da      	lsls	r2, r3, #31
   b858c:	d403      	bmi.n	b8596 <__lo0bits+0x4e>
   b858e:	085b      	lsrs	r3, r3, #1
   b8590:	f100 0001 	add.w	r0, r0, #1
   b8594:	d005      	beq.n	b85a2 <__lo0bits+0x5a>
   b8596:	600b      	str	r3, [r1, #0]
   b8598:	4770      	bx	lr
   b859a:	4610      	mov	r0, r2
   b859c:	e7e9      	b.n	b8572 <__lo0bits+0x2a>
   b859e:	2000      	movs	r0, #0
   b85a0:	4770      	bx	lr
   b85a2:	2020      	movs	r0, #32
   b85a4:	4770      	bx	lr
	...

000b85a8 <__i2b>:
   b85a8:	b510      	push	{r4, lr}
   b85aa:	460c      	mov	r4, r1
   b85ac:	2101      	movs	r1, #1
   b85ae:	f7ff feb9 	bl	b8324 <_Balloc>
   b85b2:	4602      	mov	r2, r0
   b85b4:	b928      	cbnz	r0, b85c2 <__i2b+0x1a>
   b85b6:	4b05      	ldr	r3, [pc, #20]	; (b85cc <__i2b+0x24>)
   b85b8:	4805      	ldr	r0, [pc, #20]	; (b85d0 <__i2b+0x28>)
   b85ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
   b85be:	f7fc fd39 	bl	b5034 <__assert_func>
   b85c2:	2301      	movs	r3, #1
   b85c4:	6144      	str	r4, [r0, #20]
   b85c6:	6103      	str	r3, [r0, #16]
   b85c8:	bd10      	pop	{r4, pc}
   b85ca:	bf00      	nop
   b85cc:	000b95d9 	.word	0x000b95d9
   b85d0:	000b9660 	.word	0x000b9660

000b85d4 <__multiply>:
   b85d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b85d8:	4691      	mov	r9, r2
   b85da:	690a      	ldr	r2, [r1, #16]
   b85dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b85e0:	429a      	cmp	r2, r3
   b85e2:	bfb8      	it	lt
   b85e4:	460b      	movlt	r3, r1
   b85e6:	460c      	mov	r4, r1
   b85e8:	bfbc      	itt	lt
   b85ea:	464c      	movlt	r4, r9
   b85ec:	4699      	movlt	r9, r3
   b85ee:	6927      	ldr	r7, [r4, #16]
   b85f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
   b85f4:	68a3      	ldr	r3, [r4, #8]
   b85f6:	6861      	ldr	r1, [r4, #4]
   b85f8:	eb07 060a 	add.w	r6, r7, sl
   b85fc:	42b3      	cmp	r3, r6
   b85fe:	b085      	sub	sp, #20
   b8600:	bfb8      	it	lt
   b8602:	3101      	addlt	r1, #1
   b8604:	f7ff fe8e 	bl	b8324 <_Balloc>
   b8608:	b930      	cbnz	r0, b8618 <__multiply+0x44>
   b860a:	4602      	mov	r2, r0
   b860c:	4b44      	ldr	r3, [pc, #272]	; (b8720 <__multiply+0x14c>)
   b860e:	4845      	ldr	r0, [pc, #276]	; (b8724 <__multiply+0x150>)
   b8610:	f240 115d 	movw	r1, #349	; 0x15d
   b8614:	f7fc fd0e 	bl	b5034 <__assert_func>
   b8618:	f100 0514 	add.w	r5, r0, #20
   b861c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   b8620:	462b      	mov	r3, r5
   b8622:	2200      	movs	r2, #0
   b8624:	4543      	cmp	r3, r8
   b8626:	d321      	bcc.n	b866c <__multiply+0x98>
   b8628:	f104 0314 	add.w	r3, r4, #20
   b862c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   b8630:	f109 0314 	add.w	r3, r9, #20
   b8634:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   b8638:	9202      	str	r2, [sp, #8]
   b863a:	1b3a      	subs	r2, r7, r4
   b863c:	3a15      	subs	r2, #21
   b863e:	f022 0203 	bic.w	r2, r2, #3
   b8642:	3204      	adds	r2, #4
   b8644:	f104 0115 	add.w	r1, r4, #21
   b8648:	428f      	cmp	r7, r1
   b864a:	bf38      	it	cc
   b864c:	2204      	movcc	r2, #4
   b864e:	9201      	str	r2, [sp, #4]
   b8650:	9a02      	ldr	r2, [sp, #8]
   b8652:	9303      	str	r3, [sp, #12]
   b8654:	429a      	cmp	r2, r3
   b8656:	d80c      	bhi.n	b8672 <__multiply+0x9e>
   b8658:	2e00      	cmp	r6, #0
   b865a:	dd03      	ble.n	b8664 <__multiply+0x90>
   b865c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   b8660:	2b00      	cmp	r3, #0
   b8662:	d05a      	beq.n	b871a <__multiply+0x146>
   b8664:	6106      	str	r6, [r0, #16]
   b8666:	b005      	add	sp, #20
   b8668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b866c:	f843 2b04 	str.w	r2, [r3], #4
   b8670:	e7d8      	b.n	b8624 <__multiply+0x50>
   b8672:	f8b3 a000 	ldrh.w	sl, [r3]
   b8676:	f1ba 0f00 	cmp.w	sl, #0
   b867a:	d024      	beq.n	b86c6 <__multiply+0xf2>
   b867c:	f104 0e14 	add.w	lr, r4, #20
   b8680:	46a9      	mov	r9, r5
   b8682:	f04f 0c00 	mov.w	ip, #0
   b8686:	f85e 2b04 	ldr.w	r2, [lr], #4
   b868a:	f8d9 1000 	ldr.w	r1, [r9]
   b868e:	fa1f fb82 	uxth.w	fp, r2
   b8692:	b289      	uxth	r1, r1
   b8694:	fb0a 110b 	mla	r1, sl, fp, r1
   b8698:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   b869c:	f8d9 2000 	ldr.w	r2, [r9]
   b86a0:	4461      	add	r1, ip
   b86a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b86a6:	fb0a c20b 	mla	r2, sl, fp, ip
   b86aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   b86ae:	b289      	uxth	r1, r1
   b86b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   b86b4:	4577      	cmp	r7, lr
   b86b6:	f849 1b04 	str.w	r1, [r9], #4
   b86ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b86be:	d8e2      	bhi.n	b8686 <__multiply+0xb2>
   b86c0:	9a01      	ldr	r2, [sp, #4]
   b86c2:	f845 c002 	str.w	ip, [r5, r2]
   b86c6:	9a03      	ldr	r2, [sp, #12]
   b86c8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   b86cc:	3304      	adds	r3, #4
   b86ce:	f1b9 0f00 	cmp.w	r9, #0
   b86d2:	d020      	beq.n	b8716 <__multiply+0x142>
   b86d4:	6829      	ldr	r1, [r5, #0]
   b86d6:	f104 0c14 	add.w	ip, r4, #20
   b86da:	46ae      	mov	lr, r5
   b86dc:	f04f 0a00 	mov.w	sl, #0
   b86e0:	f8bc b000 	ldrh.w	fp, [ip]
   b86e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
   b86e8:	fb09 220b 	mla	r2, r9, fp, r2
   b86ec:	4492      	add	sl, r2
   b86ee:	b289      	uxth	r1, r1
   b86f0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   b86f4:	f84e 1b04 	str.w	r1, [lr], #4
   b86f8:	f85c 2b04 	ldr.w	r2, [ip], #4
   b86fc:	f8be 1000 	ldrh.w	r1, [lr]
   b8700:	0c12      	lsrs	r2, r2, #16
   b8702:	fb09 1102 	mla	r1, r9, r2, r1
   b8706:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   b870a:	4567      	cmp	r7, ip
   b870c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   b8710:	d8e6      	bhi.n	b86e0 <__multiply+0x10c>
   b8712:	9a01      	ldr	r2, [sp, #4]
   b8714:	50a9      	str	r1, [r5, r2]
   b8716:	3504      	adds	r5, #4
   b8718:	e79a      	b.n	b8650 <__multiply+0x7c>
   b871a:	3e01      	subs	r6, #1
   b871c:	e79c      	b.n	b8658 <__multiply+0x84>
   b871e:	bf00      	nop
   b8720:	000b95d9 	.word	0x000b95d9
   b8724:	000b9660 	.word	0x000b9660

000b8728 <__pow5mult>:
   b8728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b872c:	4615      	mov	r5, r2
   b872e:	f012 0203 	ands.w	r2, r2, #3
   b8732:	4606      	mov	r6, r0
   b8734:	460f      	mov	r7, r1
   b8736:	d007      	beq.n	b8748 <__pow5mult+0x20>
   b8738:	4c25      	ldr	r4, [pc, #148]	; (b87d0 <__pow5mult+0xa8>)
   b873a:	3a01      	subs	r2, #1
   b873c:	2300      	movs	r3, #0
   b873e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   b8742:	f7ff fe51 	bl	b83e8 <__multadd>
   b8746:	4607      	mov	r7, r0
   b8748:	10ad      	asrs	r5, r5, #2
   b874a:	d03d      	beq.n	b87c8 <__pow5mult+0xa0>
   b874c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   b874e:	b97c      	cbnz	r4, b8770 <__pow5mult+0x48>
   b8750:	2010      	movs	r0, #16
   b8752:	f7fc fc47 	bl	b4fe4 <malloc>
   b8756:	4602      	mov	r2, r0
   b8758:	6270      	str	r0, [r6, #36]	; 0x24
   b875a:	b928      	cbnz	r0, b8768 <__pow5mult+0x40>
   b875c:	4b1d      	ldr	r3, [pc, #116]	; (b87d4 <__pow5mult+0xac>)
   b875e:	481e      	ldr	r0, [pc, #120]	; (b87d8 <__pow5mult+0xb0>)
   b8760:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   b8764:	f7fc fc66 	bl	b5034 <__assert_func>
   b8768:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b876c:	6004      	str	r4, [r0, #0]
   b876e:	60c4      	str	r4, [r0, #12]
   b8770:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   b8774:	f8d8 4008 	ldr.w	r4, [r8, #8]
   b8778:	b94c      	cbnz	r4, b878e <__pow5mult+0x66>
   b877a:	f240 2171 	movw	r1, #625	; 0x271
   b877e:	4630      	mov	r0, r6
   b8780:	f7ff ff12 	bl	b85a8 <__i2b>
   b8784:	2300      	movs	r3, #0
   b8786:	f8c8 0008 	str.w	r0, [r8, #8]
   b878a:	4604      	mov	r4, r0
   b878c:	6003      	str	r3, [r0, #0]
   b878e:	f04f 0900 	mov.w	r9, #0
   b8792:	07eb      	lsls	r3, r5, #31
   b8794:	d50a      	bpl.n	b87ac <__pow5mult+0x84>
   b8796:	4639      	mov	r1, r7
   b8798:	4622      	mov	r2, r4
   b879a:	4630      	mov	r0, r6
   b879c:	f7ff ff1a 	bl	b85d4 <__multiply>
   b87a0:	4639      	mov	r1, r7
   b87a2:	4680      	mov	r8, r0
   b87a4:	4630      	mov	r0, r6
   b87a6:	f7ff fdfd 	bl	b83a4 <_Bfree>
   b87aa:	4647      	mov	r7, r8
   b87ac:	106d      	asrs	r5, r5, #1
   b87ae:	d00b      	beq.n	b87c8 <__pow5mult+0xa0>
   b87b0:	6820      	ldr	r0, [r4, #0]
   b87b2:	b938      	cbnz	r0, b87c4 <__pow5mult+0x9c>
   b87b4:	4622      	mov	r2, r4
   b87b6:	4621      	mov	r1, r4
   b87b8:	4630      	mov	r0, r6
   b87ba:	f7ff ff0b 	bl	b85d4 <__multiply>
   b87be:	6020      	str	r0, [r4, #0]
   b87c0:	f8c0 9000 	str.w	r9, [r0]
   b87c4:	4604      	mov	r4, r0
   b87c6:	e7e4      	b.n	b8792 <__pow5mult+0x6a>
   b87c8:	4638      	mov	r0, r7
   b87ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b87ce:	bf00      	nop
   b87d0:	000b97b0 	.word	0x000b97b0
   b87d4:	000b9409 	.word	0x000b9409
   b87d8:	000b9660 	.word	0x000b9660

000b87dc <__lshift>:
   b87dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b87e0:	460c      	mov	r4, r1
   b87e2:	6849      	ldr	r1, [r1, #4]
   b87e4:	6923      	ldr	r3, [r4, #16]
   b87e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
   b87ea:	68a3      	ldr	r3, [r4, #8]
   b87ec:	4607      	mov	r7, r0
   b87ee:	4691      	mov	r9, r2
   b87f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
   b87f4:	f108 0601 	add.w	r6, r8, #1
   b87f8:	42b3      	cmp	r3, r6
   b87fa:	db0b      	blt.n	b8814 <__lshift+0x38>
   b87fc:	4638      	mov	r0, r7
   b87fe:	f7ff fd91 	bl	b8324 <_Balloc>
   b8802:	4605      	mov	r5, r0
   b8804:	b948      	cbnz	r0, b881a <__lshift+0x3e>
   b8806:	4602      	mov	r2, r0
   b8808:	4b2a      	ldr	r3, [pc, #168]	; (b88b4 <__lshift+0xd8>)
   b880a:	482b      	ldr	r0, [pc, #172]	; (b88b8 <__lshift+0xdc>)
   b880c:	f240 11d9 	movw	r1, #473	; 0x1d9
   b8810:	f7fc fc10 	bl	b5034 <__assert_func>
   b8814:	3101      	adds	r1, #1
   b8816:	005b      	lsls	r3, r3, #1
   b8818:	e7ee      	b.n	b87f8 <__lshift+0x1c>
   b881a:	2300      	movs	r3, #0
   b881c:	f100 0114 	add.w	r1, r0, #20
   b8820:	f100 0210 	add.w	r2, r0, #16
   b8824:	4618      	mov	r0, r3
   b8826:	4553      	cmp	r3, sl
   b8828:	db37      	blt.n	b889a <__lshift+0xbe>
   b882a:	6920      	ldr	r0, [r4, #16]
   b882c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   b8830:	f104 0314 	add.w	r3, r4, #20
   b8834:	f019 091f 	ands.w	r9, r9, #31
   b8838:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   b883c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b8840:	d02f      	beq.n	b88a2 <__lshift+0xc6>
   b8842:	f1c9 0e20 	rsb	lr, r9, #32
   b8846:	468a      	mov	sl, r1
   b8848:	f04f 0c00 	mov.w	ip, #0
   b884c:	681a      	ldr	r2, [r3, #0]
   b884e:	fa02 f209 	lsl.w	r2, r2, r9
   b8852:	ea42 020c 	orr.w	r2, r2, ip
   b8856:	f84a 2b04 	str.w	r2, [sl], #4
   b885a:	f853 2b04 	ldr.w	r2, [r3], #4
   b885e:	4298      	cmp	r0, r3
   b8860:	fa22 fc0e 	lsr.w	ip, r2, lr
   b8864:	d8f2      	bhi.n	b884c <__lshift+0x70>
   b8866:	1b03      	subs	r3, r0, r4
   b8868:	3b15      	subs	r3, #21
   b886a:	f023 0303 	bic.w	r3, r3, #3
   b886e:	3304      	adds	r3, #4
   b8870:	f104 0215 	add.w	r2, r4, #21
   b8874:	4290      	cmp	r0, r2
   b8876:	bf38      	it	cc
   b8878:	2304      	movcc	r3, #4
   b887a:	f841 c003 	str.w	ip, [r1, r3]
   b887e:	f1bc 0f00 	cmp.w	ip, #0
   b8882:	d001      	beq.n	b8888 <__lshift+0xac>
   b8884:	f108 0602 	add.w	r6, r8, #2
   b8888:	3e01      	subs	r6, #1
   b888a:	4638      	mov	r0, r7
   b888c:	612e      	str	r6, [r5, #16]
   b888e:	4621      	mov	r1, r4
   b8890:	f7ff fd88 	bl	b83a4 <_Bfree>
   b8894:	4628      	mov	r0, r5
   b8896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b889a:	f842 0f04 	str.w	r0, [r2, #4]!
   b889e:	3301      	adds	r3, #1
   b88a0:	e7c1      	b.n	b8826 <__lshift+0x4a>
   b88a2:	3904      	subs	r1, #4
   b88a4:	f853 2b04 	ldr.w	r2, [r3], #4
   b88a8:	f841 2f04 	str.w	r2, [r1, #4]!
   b88ac:	4298      	cmp	r0, r3
   b88ae:	d8f9      	bhi.n	b88a4 <__lshift+0xc8>
   b88b0:	e7ea      	b.n	b8888 <__lshift+0xac>
   b88b2:	bf00      	nop
   b88b4:	000b95d9 	.word	0x000b95d9
   b88b8:	000b9660 	.word	0x000b9660

000b88bc <__mcmp>:
   b88bc:	b530      	push	{r4, r5, lr}
   b88be:	6902      	ldr	r2, [r0, #16]
   b88c0:	690c      	ldr	r4, [r1, #16]
   b88c2:	1b12      	subs	r2, r2, r4
   b88c4:	d10e      	bne.n	b88e4 <__mcmp+0x28>
   b88c6:	f100 0314 	add.w	r3, r0, #20
   b88ca:	3114      	adds	r1, #20
   b88cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   b88d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   b88d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   b88d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   b88dc:	42a5      	cmp	r5, r4
   b88de:	d003      	beq.n	b88e8 <__mcmp+0x2c>
   b88e0:	d305      	bcc.n	b88ee <__mcmp+0x32>
   b88e2:	2201      	movs	r2, #1
   b88e4:	4610      	mov	r0, r2
   b88e6:	bd30      	pop	{r4, r5, pc}
   b88e8:	4283      	cmp	r3, r0
   b88ea:	d3f3      	bcc.n	b88d4 <__mcmp+0x18>
   b88ec:	e7fa      	b.n	b88e4 <__mcmp+0x28>
   b88ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b88f2:	e7f7      	b.n	b88e4 <__mcmp+0x28>

000b88f4 <__mdiff>:
   b88f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b88f8:	460c      	mov	r4, r1
   b88fa:	4606      	mov	r6, r0
   b88fc:	4611      	mov	r1, r2
   b88fe:	4620      	mov	r0, r4
   b8900:	4690      	mov	r8, r2
   b8902:	f7ff ffdb 	bl	b88bc <__mcmp>
   b8906:	1e05      	subs	r5, r0, #0
   b8908:	d110      	bne.n	b892c <__mdiff+0x38>
   b890a:	4629      	mov	r1, r5
   b890c:	4630      	mov	r0, r6
   b890e:	f7ff fd09 	bl	b8324 <_Balloc>
   b8912:	b930      	cbnz	r0, b8922 <__mdiff+0x2e>
   b8914:	4b3a      	ldr	r3, [pc, #232]	; (b8a00 <__mdiff+0x10c>)
   b8916:	4602      	mov	r2, r0
   b8918:	f240 2132 	movw	r1, #562	; 0x232
   b891c:	4839      	ldr	r0, [pc, #228]	; (b8a04 <__mdiff+0x110>)
   b891e:	f7fc fb89 	bl	b5034 <__assert_func>
   b8922:	2301      	movs	r3, #1
   b8924:	e9c0 3504 	strd	r3, r5, [r0, #16]
   b8928:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b892c:	bfa4      	itt	ge
   b892e:	4643      	movge	r3, r8
   b8930:	46a0      	movge	r8, r4
   b8932:	4630      	mov	r0, r6
   b8934:	f8d8 1004 	ldr.w	r1, [r8, #4]
   b8938:	bfa6      	itte	ge
   b893a:	461c      	movge	r4, r3
   b893c:	2500      	movge	r5, #0
   b893e:	2501      	movlt	r5, #1
   b8940:	f7ff fcf0 	bl	b8324 <_Balloc>
   b8944:	b920      	cbnz	r0, b8950 <__mdiff+0x5c>
   b8946:	4b2e      	ldr	r3, [pc, #184]	; (b8a00 <__mdiff+0x10c>)
   b8948:	4602      	mov	r2, r0
   b894a:	f44f 7110 	mov.w	r1, #576	; 0x240
   b894e:	e7e5      	b.n	b891c <__mdiff+0x28>
   b8950:	f8d8 7010 	ldr.w	r7, [r8, #16]
   b8954:	6926      	ldr	r6, [r4, #16]
   b8956:	60c5      	str	r5, [r0, #12]
   b8958:	f104 0914 	add.w	r9, r4, #20
   b895c:	f108 0514 	add.w	r5, r8, #20
   b8960:	f100 0e14 	add.w	lr, r0, #20
   b8964:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   b8968:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   b896c:	f108 0210 	add.w	r2, r8, #16
   b8970:	46f2      	mov	sl, lr
   b8972:	2100      	movs	r1, #0
   b8974:	f859 3b04 	ldr.w	r3, [r9], #4
   b8978:	f852 bf04 	ldr.w	fp, [r2, #4]!
   b897c:	fa1f f883 	uxth.w	r8, r3
   b8980:	fa11 f18b 	uxtah	r1, r1, fp
   b8984:	0c1b      	lsrs	r3, r3, #16
   b8986:	eba1 0808 	sub.w	r8, r1, r8
   b898a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   b898e:	eb03 4328 	add.w	r3, r3, r8, asr #16
   b8992:	fa1f f888 	uxth.w	r8, r8
   b8996:	1419      	asrs	r1, r3, #16
   b8998:	454e      	cmp	r6, r9
   b899a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   b899e:	f84a 3b04 	str.w	r3, [sl], #4
   b89a2:	d8e7      	bhi.n	b8974 <__mdiff+0x80>
   b89a4:	1b33      	subs	r3, r6, r4
   b89a6:	3b15      	subs	r3, #21
   b89a8:	f023 0303 	bic.w	r3, r3, #3
   b89ac:	3304      	adds	r3, #4
   b89ae:	3415      	adds	r4, #21
   b89b0:	42a6      	cmp	r6, r4
   b89b2:	bf38      	it	cc
   b89b4:	2304      	movcc	r3, #4
   b89b6:	441d      	add	r5, r3
   b89b8:	4473      	add	r3, lr
   b89ba:	469e      	mov	lr, r3
   b89bc:	462e      	mov	r6, r5
   b89be:	4566      	cmp	r6, ip
   b89c0:	d30e      	bcc.n	b89e0 <__mdiff+0xec>
   b89c2:	f10c 0203 	add.w	r2, ip, #3
   b89c6:	1b52      	subs	r2, r2, r5
   b89c8:	f022 0203 	bic.w	r2, r2, #3
   b89cc:	3d03      	subs	r5, #3
   b89ce:	45ac      	cmp	ip, r5
   b89d0:	bf38      	it	cc
   b89d2:	2200      	movcc	r2, #0
   b89d4:	441a      	add	r2, r3
   b89d6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   b89da:	b17b      	cbz	r3, b89fc <__mdiff+0x108>
   b89dc:	6107      	str	r7, [r0, #16]
   b89de:	e7a3      	b.n	b8928 <__mdiff+0x34>
   b89e0:	f856 8b04 	ldr.w	r8, [r6], #4
   b89e4:	fa11 f288 	uxtah	r2, r1, r8
   b89e8:	1414      	asrs	r4, r2, #16
   b89ea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   b89ee:	b292      	uxth	r2, r2
   b89f0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   b89f4:	f84e 2b04 	str.w	r2, [lr], #4
   b89f8:	1421      	asrs	r1, r4, #16
   b89fa:	e7e0      	b.n	b89be <__mdiff+0xca>
   b89fc:	3f01      	subs	r7, #1
   b89fe:	e7ea      	b.n	b89d6 <__mdiff+0xe2>
   b8a00:	000b95d9 	.word	0x000b95d9
   b8a04:	000b9660 	.word	0x000b9660

000b8a08 <__ulp>:
   b8a08:	b082      	sub	sp, #8
   b8a0a:	ed8d 0b00 	vstr	d0, [sp]
   b8a0e:	9b01      	ldr	r3, [sp, #4]
   b8a10:	4912      	ldr	r1, [pc, #72]	; (b8a5c <__ulp+0x54>)
   b8a12:	4019      	ands	r1, r3
   b8a14:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   b8a18:	2900      	cmp	r1, #0
   b8a1a:	dd05      	ble.n	b8a28 <__ulp+0x20>
   b8a1c:	2200      	movs	r2, #0
   b8a1e:	460b      	mov	r3, r1
   b8a20:	ec43 2b10 	vmov	d0, r2, r3
   b8a24:	b002      	add	sp, #8
   b8a26:	4770      	bx	lr
   b8a28:	4249      	negs	r1, r1
   b8a2a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   b8a2e:	ea4f 5021 	mov.w	r0, r1, asr #20
   b8a32:	f04f 0200 	mov.w	r2, #0
   b8a36:	f04f 0300 	mov.w	r3, #0
   b8a3a:	da04      	bge.n	b8a46 <__ulp+0x3e>
   b8a3c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   b8a40:	fa41 f300 	asr.w	r3, r1, r0
   b8a44:	e7ec      	b.n	b8a20 <__ulp+0x18>
   b8a46:	f1a0 0114 	sub.w	r1, r0, #20
   b8a4a:	291e      	cmp	r1, #30
   b8a4c:	bfda      	itte	le
   b8a4e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   b8a52:	fa20 f101 	lsrle.w	r1, r0, r1
   b8a56:	2101      	movgt	r1, #1
   b8a58:	460a      	mov	r2, r1
   b8a5a:	e7e1      	b.n	b8a20 <__ulp+0x18>
   b8a5c:	7ff00000 	.word	0x7ff00000

000b8a60 <__b2d>:
   b8a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8a62:	6905      	ldr	r5, [r0, #16]
   b8a64:	f100 0714 	add.w	r7, r0, #20
   b8a68:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   b8a6c:	1f2e      	subs	r6, r5, #4
   b8a6e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   b8a72:	4620      	mov	r0, r4
   b8a74:	f7ff fd48 	bl	b8508 <__hi0bits>
   b8a78:	f1c0 0320 	rsb	r3, r0, #32
   b8a7c:	280a      	cmp	r0, #10
   b8a7e:	f8df c07c 	ldr.w	ip, [pc, #124]	; b8afc <__b2d+0x9c>
   b8a82:	600b      	str	r3, [r1, #0]
   b8a84:	dc14      	bgt.n	b8ab0 <__b2d+0x50>
   b8a86:	f1c0 0e0b 	rsb	lr, r0, #11
   b8a8a:	fa24 f10e 	lsr.w	r1, r4, lr
   b8a8e:	42b7      	cmp	r7, r6
   b8a90:	ea41 030c 	orr.w	r3, r1, ip
   b8a94:	bf34      	ite	cc
   b8a96:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   b8a9a:	2100      	movcs	r1, #0
   b8a9c:	3015      	adds	r0, #21
   b8a9e:	fa04 f000 	lsl.w	r0, r4, r0
   b8aa2:	fa21 f10e 	lsr.w	r1, r1, lr
   b8aa6:	ea40 0201 	orr.w	r2, r0, r1
   b8aaa:	ec43 2b10 	vmov	d0, r2, r3
   b8aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b8ab0:	42b7      	cmp	r7, r6
   b8ab2:	bf3a      	itte	cc
   b8ab4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   b8ab8:	f1a5 0608 	subcc.w	r6, r5, #8
   b8abc:	2100      	movcs	r1, #0
   b8abe:	380b      	subs	r0, #11
   b8ac0:	d017      	beq.n	b8af2 <__b2d+0x92>
   b8ac2:	f1c0 0c20 	rsb	ip, r0, #32
   b8ac6:	fa04 f500 	lsl.w	r5, r4, r0
   b8aca:	42be      	cmp	r6, r7
   b8acc:	fa21 f40c 	lsr.w	r4, r1, ip
   b8ad0:	ea45 0504 	orr.w	r5, r5, r4
   b8ad4:	bf8c      	ite	hi
   b8ad6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   b8ada:	2400      	movls	r4, #0
   b8adc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   b8ae0:	fa01 f000 	lsl.w	r0, r1, r0
   b8ae4:	fa24 f40c 	lsr.w	r4, r4, ip
   b8ae8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   b8aec:	ea40 0204 	orr.w	r2, r0, r4
   b8af0:	e7db      	b.n	b8aaa <__b2d+0x4a>
   b8af2:	ea44 030c 	orr.w	r3, r4, ip
   b8af6:	460a      	mov	r2, r1
   b8af8:	e7d7      	b.n	b8aaa <__b2d+0x4a>
   b8afa:	bf00      	nop
   b8afc:	3ff00000 	.word	0x3ff00000

000b8b00 <__d2b>:
   b8b00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b8b04:	4689      	mov	r9, r1
   b8b06:	2101      	movs	r1, #1
   b8b08:	ec57 6b10 	vmov	r6, r7, d0
   b8b0c:	4690      	mov	r8, r2
   b8b0e:	f7ff fc09 	bl	b8324 <_Balloc>
   b8b12:	4604      	mov	r4, r0
   b8b14:	b930      	cbnz	r0, b8b24 <__d2b+0x24>
   b8b16:	4602      	mov	r2, r0
   b8b18:	4b25      	ldr	r3, [pc, #148]	; (b8bb0 <__d2b+0xb0>)
   b8b1a:	4826      	ldr	r0, [pc, #152]	; (b8bb4 <__d2b+0xb4>)
   b8b1c:	f240 310a 	movw	r1, #778	; 0x30a
   b8b20:	f7fc fa88 	bl	b5034 <__assert_func>
   b8b24:	f3c7 550a 	ubfx	r5, r7, #20, #11
   b8b28:	f3c7 0313 	ubfx	r3, r7, #0, #20
   b8b2c:	bb35      	cbnz	r5, b8b7c <__d2b+0x7c>
   b8b2e:	2e00      	cmp	r6, #0
   b8b30:	9301      	str	r3, [sp, #4]
   b8b32:	d028      	beq.n	b8b86 <__d2b+0x86>
   b8b34:	4668      	mov	r0, sp
   b8b36:	9600      	str	r6, [sp, #0]
   b8b38:	f7ff fd06 	bl	b8548 <__lo0bits>
   b8b3c:	9900      	ldr	r1, [sp, #0]
   b8b3e:	b300      	cbz	r0, b8b82 <__d2b+0x82>
   b8b40:	9a01      	ldr	r2, [sp, #4]
   b8b42:	f1c0 0320 	rsb	r3, r0, #32
   b8b46:	fa02 f303 	lsl.w	r3, r2, r3
   b8b4a:	430b      	orrs	r3, r1
   b8b4c:	40c2      	lsrs	r2, r0
   b8b4e:	6163      	str	r3, [r4, #20]
   b8b50:	9201      	str	r2, [sp, #4]
   b8b52:	9b01      	ldr	r3, [sp, #4]
   b8b54:	61a3      	str	r3, [r4, #24]
   b8b56:	2b00      	cmp	r3, #0
   b8b58:	bf14      	ite	ne
   b8b5a:	2202      	movne	r2, #2
   b8b5c:	2201      	moveq	r2, #1
   b8b5e:	6122      	str	r2, [r4, #16]
   b8b60:	b1d5      	cbz	r5, b8b98 <__d2b+0x98>
   b8b62:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   b8b66:	4405      	add	r5, r0
   b8b68:	f8c9 5000 	str.w	r5, [r9]
   b8b6c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   b8b70:	f8c8 0000 	str.w	r0, [r8]
   b8b74:	4620      	mov	r0, r4
   b8b76:	b003      	add	sp, #12
   b8b78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b8b7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b8b80:	e7d5      	b.n	b8b2e <__d2b+0x2e>
   b8b82:	6161      	str	r1, [r4, #20]
   b8b84:	e7e5      	b.n	b8b52 <__d2b+0x52>
   b8b86:	a801      	add	r0, sp, #4
   b8b88:	f7ff fcde 	bl	b8548 <__lo0bits>
   b8b8c:	9b01      	ldr	r3, [sp, #4]
   b8b8e:	6163      	str	r3, [r4, #20]
   b8b90:	2201      	movs	r2, #1
   b8b92:	6122      	str	r2, [r4, #16]
   b8b94:	3020      	adds	r0, #32
   b8b96:	e7e3      	b.n	b8b60 <__d2b+0x60>
   b8b98:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   b8b9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   b8ba0:	f8c9 0000 	str.w	r0, [r9]
   b8ba4:	6918      	ldr	r0, [r3, #16]
   b8ba6:	f7ff fcaf 	bl	b8508 <__hi0bits>
   b8baa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   b8bae:	e7df      	b.n	b8b70 <__d2b+0x70>
   b8bb0:	000b95d9 	.word	0x000b95d9
   b8bb4:	000b9660 	.word	0x000b9660

000b8bb8 <__ratio>:
   b8bb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8bbc:	4688      	mov	r8, r1
   b8bbe:	4669      	mov	r1, sp
   b8bc0:	4681      	mov	r9, r0
   b8bc2:	f7ff ff4d 	bl	b8a60 <__b2d>
   b8bc6:	a901      	add	r1, sp, #4
   b8bc8:	4640      	mov	r0, r8
   b8bca:	ec55 4b10 	vmov	r4, r5, d0
   b8bce:	f7ff ff47 	bl	b8a60 <__b2d>
   b8bd2:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b8bd6:	f8d8 2010 	ldr.w	r2, [r8, #16]
   b8bda:	eba3 0c02 	sub.w	ip, r3, r2
   b8bde:	e9dd 3200 	ldrd	r3, r2, [sp]
   b8be2:	1a9b      	subs	r3, r3, r2
   b8be4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   b8be8:	ec51 0b10 	vmov	r0, r1, d0
   b8bec:	2b00      	cmp	r3, #0
   b8bee:	bfd6      	itet	le
   b8bf0:	460a      	movle	r2, r1
   b8bf2:	462a      	movgt	r2, r5
   b8bf4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   b8bf8:	468b      	mov	fp, r1
   b8bfa:	462f      	mov	r7, r5
   b8bfc:	bfd4      	ite	le
   b8bfe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   b8c02:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   b8c06:	4620      	mov	r0, r4
   b8c08:	ee10 2a10 	vmov	r2, s0
   b8c0c:	465b      	mov	r3, fp
   b8c0e:	4639      	mov	r1, r7
   b8c10:	f7fd febc 	bl	b698c <__aeabi_ddiv>
   b8c14:	ec41 0b10 	vmov	d0, r0, r1
   b8c18:	b003      	add	sp, #12
   b8c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b8c1e <__copybits>:
   b8c1e:	3901      	subs	r1, #1
   b8c20:	b570      	push	{r4, r5, r6, lr}
   b8c22:	1149      	asrs	r1, r1, #5
   b8c24:	6914      	ldr	r4, [r2, #16]
   b8c26:	3101      	adds	r1, #1
   b8c28:	f102 0314 	add.w	r3, r2, #20
   b8c2c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   b8c30:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b8c34:	1f05      	subs	r5, r0, #4
   b8c36:	42a3      	cmp	r3, r4
   b8c38:	d30c      	bcc.n	b8c54 <__copybits+0x36>
   b8c3a:	1aa3      	subs	r3, r4, r2
   b8c3c:	3b11      	subs	r3, #17
   b8c3e:	f023 0303 	bic.w	r3, r3, #3
   b8c42:	3211      	adds	r2, #17
   b8c44:	42a2      	cmp	r2, r4
   b8c46:	bf88      	it	hi
   b8c48:	2300      	movhi	r3, #0
   b8c4a:	4418      	add	r0, r3
   b8c4c:	2300      	movs	r3, #0
   b8c4e:	4288      	cmp	r0, r1
   b8c50:	d305      	bcc.n	b8c5e <__copybits+0x40>
   b8c52:	bd70      	pop	{r4, r5, r6, pc}
   b8c54:	f853 6b04 	ldr.w	r6, [r3], #4
   b8c58:	f845 6f04 	str.w	r6, [r5, #4]!
   b8c5c:	e7eb      	b.n	b8c36 <__copybits+0x18>
   b8c5e:	f840 3b04 	str.w	r3, [r0], #4
   b8c62:	e7f4      	b.n	b8c4e <__copybits+0x30>

000b8c64 <__any_on>:
   b8c64:	f100 0214 	add.w	r2, r0, #20
   b8c68:	6900      	ldr	r0, [r0, #16]
   b8c6a:	114b      	asrs	r3, r1, #5
   b8c6c:	4298      	cmp	r0, r3
   b8c6e:	b510      	push	{r4, lr}
   b8c70:	db11      	blt.n	b8c96 <__any_on+0x32>
   b8c72:	dd0a      	ble.n	b8c8a <__any_on+0x26>
   b8c74:	f011 011f 	ands.w	r1, r1, #31
   b8c78:	d007      	beq.n	b8c8a <__any_on+0x26>
   b8c7a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   b8c7e:	fa24 f001 	lsr.w	r0, r4, r1
   b8c82:	fa00 f101 	lsl.w	r1, r0, r1
   b8c86:	428c      	cmp	r4, r1
   b8c88:	d10b      	bne.n	b8ca2 <__any_on+0x3e>
   b8c8a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   b8c8e:	4293      	cmp	r3, r2
   b8c90:	d803      	bhi.n	b8c9a <__any_on+0x36>
   b8c92:	2000      	movs	r0, #0
   b8c94:	bd10      	pop	{r4, pc}
   b8c96:	4603      	mov	r3, r0
   b8c98:	e7f7      	b.n	b8c8a <__any_on+0x26>
   b8c9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   b8c9e:	2900      	cmp	r1, #0
   b8ca0:	d0f5      	beq.n	b8c8e <__any_on+0x2a>
   b8ca2:	2001      	movs	r0, #1
   b8ca4:	e7f6      	b.n	b8c94 <__any_on+0x30>

000b8ca6 <_calloc_r>:
   b8ca6:	b513      	push	{r0, r1, r4, lr}
   b8ca8:	434a      	muls	r2, r1
   b8caa:	4611      	mov	r1, r2
   b8cac:	9201      	str	r2, [sp, #4]
   b8cae:	f7fc f9b1 	bl	b5014 <_malloc_r>
   b8cb2:	4604      	mov	r4, r0
   b8cb4:	b118      	cbz	r0, b8cbe <_calloc_r+0x18>
   b8cb6:	9a01      	ldr	r2, [sp, #4]
   b8cb8:	2100      	movs	r1, #0
   b8cba:	f7fe f882 	bl	b6dc2 <memset>
   b8cbe:	4620      	mov	r0, r4
   b8cc0:	b002      	add	sp, #8
   b8cc2:	bd10      	pop	{r4, pc}
   b8cc4:	0000      	movs	r0, r0
	...

000b8cc8 <nan>:
   b8cc8:	ed9f 0b01 	vldr	d0, [pc, #4]	; b8cd0 <nan+0x8>
   b8ccc:	4770      	bx	lr
   b8cce:	bf00      	nop
   b8cd0:	00000000 	.word	0x00000000
   b8cd4:	7ff80000 	.word	0x7ff80000

000b8cd8 <__ascii_wctomb>:
   b8cd8:	b149      	cbz	r1, b8cee <__ascii_wctomb+0x16>
   b8cda:	2aff      	cmp	r2, #255	; 0xff
   b8cdc:	bf85      	ittet	hi
   b8cde:	238a      	movhi	r3, #138	; 0x8a
   b8ce0:	6003      	strhi	r3, [r0, #0]
   b8ce2:	700a      	strbls	r2, [r1, #0]
   b8ce4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   b8ce8:	bf98      	it	ls
   b8cea:	2001      	movls	r0, #1
   b8cec:	4770      	bx	lr
   b8cee:	4608      	mov	r0, r1
   b8cf0:	4770      	bx	lr
	...

000b8cf4 <__aeabi_d2lz>:
   b8cf4:	b538      	push	{r3, r4, r5, lr}
   b8cf6:	2200      	movs	r2, #0
   b8cf8:	2300      	movs	r3, #0
   b8cfa:	4604      	mov	r4, r0
   b8cfc:	460d      	mov	r5, r1
   b8cfe:	f7fd ff8d 	bl	b6c1c <__aeabi_dcmplt>
   b8d02:	b928      	cbnz	r0, b8d10 <__aeabi_d2lz+0x1c>
   b8d04:	4620      	mov	r0, r4
   b8d06:	4629      	mov	r1, r5
   b8d08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b8d0c:	f7fd bff6 	b.w	b6cfc <__aeabi_d2ulz>
   b8d10:	4620      	mov	r0, r4
   b8d12:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b8d16:	f7fd fff1 	bl	b6cfc <__aeabi_d2ulz>
   b8d1a:	4240      	negs	r0, r0
   b8d1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8d20:	bd38      	pop	{r3, r4, r5, pc}
   b8d22:	bf00      	nop

000b8d24 <dynalib_user>:
   b8d24:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b8d34:	0000 0000 6f43 6e6e 6365 6974 676e 7420     ....Connecting t
   b8d44:	206f 514d 5454 2e2e 202e 2500 0a73 5200     o MQTT... .%s..R
   b8d54:	7465 7972 6e69 2067 514d 5454 6320 6e6f     etrying MQTT con
   b8d64:	656e 7463 6f69 206e 6e69 3520 7320 6365     nection in 5 sec
   b8d74:	6e6f 7364 2e2e 000a 514d 5454 4320 6e6f     onds....MQTT Con
   b8d84:	656e 7463 6465 0a21 5000 6275 696c 6873     nected!..Publish
   b8d94:	6e69 2067 3025 322e 2066 000a 6552 6563     ing %0.2f ..Rece
   b8da4:	7669 6465 2520 2069 7266 6d6f 4120 6164     ived %i from Ada
   b8db4:	7266 6975 2e74 6f69 6620 6565 2064 6546     fruit.io feed Fe
   b8dc4:	6465 614e 656d 2042 000a 6854 2065 6964     edNameB ..The di
   b8dd4:	7473 6e61 6563 7420 206f 626f 7473 6361     stance to obstac
   b8de4:	656c 2073 6e69 6620 6f72 746e 6920 3a73     les in front is:
   b8df4:	0020 6320 006d 6c46 6d61 2065 6544 6574      . cm.Flame Dete
   b8e04:	7463 6465 0021 6c66 6d61 2065 6573 736e     cted!.flame sens
   b8e14:	726f 253a 2069 4944 4947 4154 3a4c 6925     or:%i DIGITAL:%i
   b8e24:	000a 716d 2034 6e41 6c61 676f 5220 6165     ..mq4 Analog Rea
   b8e34:	3a64 6925 716d 4420 6769 7469 6c61 5220     d:%imq Digital R
   b8e44:	6165 3a64 6925 000a 6964 646f 2065 7453     ead:%i..diode St
   b8e54:	7461 3a65 6925 6320 6e6f 6576 7372 6f69     ate:%i conversio
   b8e64:	3a6e 6925 000a 6f54 616d 6973 006f 6f69     n:%i..Tomasio.io
   b8e74:	612e 6164 7266 6975 2e74 6f63 006d 6961     .adafruit.com.ai
   b8e84:	5f6f 696c 6953 3637 5854 3459 3961 3049     o_liSi76TXY4a9I0
   b8e94:	306a 4859 7751 664e 5479 6c68 7165 5400     j0YHQwNfyThleq.T
   b8ea4:	6d6f 7361 6f69 662f 6565 7364 612f 7162     omasio/feeds/abq
   b8eb4:	675f 7370 5400 6d6f 7361 6f69 662f 6565     _gps.Tomasio/fee
   b8ec4:	7364 4f2f 5f4e 464f 0046 7244 706f 6570     ds/ON_OFF.Droppe
   b8ed4:	2064 2061 6170 6b63 7465 5500 6b6e 6f6e     d a packet.Unkno
   b8ee4:	6e77 6520 7272 726f 4d00 5451 0054 6146     wn error.MQTT.Fa
   b8ef4:	6c69 6465 7420 206f 7573 7362 7263 6269     iled to subscrib
   b8f04:	0065 6f43 6e6e 6365 6974 6e6f 6620 6961     e.Connection fai
   b8f14:	656c 0064 6854 2065 6553 7672 7265 6420     led.The Server d
   b8f24:	656f 2073 6f6e 2074 7573 7070 726f 2074     oes not support 
   b8f34:	6874 2065 656c 6576 206c 666f 7420 6568     the level of the
   b8f44:	4d20 5451 2054 7270 746f 636f 6c6f 7220      MQTT protocol r
   b8f54:	7165 6575 7473 6465 5400 6568 4320 696c     equested.The Cli
   b8f64:	6e65 2074 6469 6e65 6974 6966 7265 6920     ent identifier i
   b8f74:	2073 6f63 7272 6365 2074 5455 2d46 2038     s correct UTF-8 
   b8f84:	7562 2074 6f6e 2074 6c61 6f6c 6577 2064     but not allowed 
   b8f94:	7962 7420 6568 5320 7265 6576 0072 6854     by the Server.Th
   b8fa4:	2065 514d 5454 7320 7265 6976 6563 6920     e MQTT service i
   b8fb4:	2073 6e75 7661 6961 616c 6c62 0065 6854     s unavailable.Th
   b8fc4:	2065 6164 6174 6920 206e 6874 2065 7375     e data in the us
   b8fd4:	7265 6e20 6d61 2065 726f 7020 7361 7773     er name or passw
   b8fe4:	726f 2064 7369 6d20 6c61 6f66 6d72 6465     ord is malformed
   b8ff4:	4e00 746f 6120 7475 6f68 6972 657a 2064     .Not authorized 
   b9004:	6f74 6320 6e6f 656e 7463 4500 6378 6565     to connect.Excee
   b9014:	6564 2064 6572 6f63 6e6e 6365 2074 6172     ded reconnect ra
   b9024:	6574 6c20 6d69 7469 202e 6c50 6165 6573     te limit. Please
   b9034:	7420 7972 6120 6167 6e69 6c20 7461 7265      try again later
   b9044:	002e 6f59 2075 6168 6576 6220 6565 206e     ..You have been 
   b9054:	6162 6e6e 6465 6620 6f72 206d 6f63 6e6e     banned from conn
   b9064:	6365 6974 676e 202e 6c50 6165 6573 6320     ecting. Please c
   b9074:	6e6f 6174 7463 7420 6568 4d20 5451 2054     ontact the MQTT 
   b9084:	6573 7672 7265 6120 6d64 6e69 7369 7274     server administr
   b9094:	7461 726f 6620 726f 6d20 726f 2065 6564     ator for more de
   b90a4:	6174 6c69 2e73 0000                         tails...

000b90ac <_ZTV13Adafruit_MQTT>:
	...
   b90bc:	40a5 000b 40a5 000b 40a5 000b 40a5 000b     .@...@...@...@..
   b90cc:	40a5 000b                                   .@..

000b90d0 <CSWTCH.44>:
   b90d0:	8ef2 000b 8f06 000b 8edf 000b 8f18 000b     ................
   b90e0:	8f5d 000b 8fa2 000b 8fc2 000b 8ff5 000b     ]...............
   b90f0:	900f 000b 9046 000b                         ....F...

000b90f8 <_ZTV19Adafruit_MQTT_SPARK>:
	...
   b9100:	4ab3 000b 4b3f 000b 4a5f 000b 4b0d 000b     .J..?K.._J...K..
   b9110:	4b4d 000b 4a73 000b 4ab5 000b               MK..sJ...J..

000b911c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b9124 <_ZTVN5spark13EthernetClassE>:
	...
   b912c:	50e3 000b 50d9 000b 50cf 000b 50c5 000b     .P...P...P...P..
   b913c:	50b9 000b 50ad 000b 52e9 000b 52f1 000b     .P...P...R...R..
   b914c:	50a1 000b 5099 000b 508f 000b 5085 000b     .P...P...P...P..
   b915c:	5321 000b                                   !S..

000b9160 <_ZTV7TwoWire>:
	...
   b9168:	5101 000b 514b 000b 5123 000b 5103 000b     .Q..KQ..#Q...Q..
   b9178:	512b 000b 5133 000b 513b 000b 5143 000b     +Q..3Q..;Q..CQ..

000b9188 <_ZTV9IPAddress>:
	...
   b9190:	518d 000b 517d 000b 517f 000b 7061 0070     .Q..}Q...Q..app.

000b91a0 <_ZTVN5spark12NetworkClassE>:
	...
   b91a8:	52a9 000b 52b3 000b 52bd 000b 52c7 000b     .R...R...R...R..
   b91b8:	52d1 000b 52dd 000b 52e9 000b 52f1 000b     .R...R...R...R..
   b91c8:	52f9 000b 5305 000b 530d 000b 5317 000b     .R...S...S...S..
   b91d8:	5321 000b 6977 6972 676e 7200 6365 2076     !S..wiring.recv 
   b91e8:	7265 6f72 2072 203d 6425 0000               error = %d..

000b91f4 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b91fc:	55fd 000b 5621 000b 5b53 000b 562f 000b     .U..!V..S[../V..
   b920c:	5601 000b                                   .V..

000b9210 <_ZTV9TCPClient>:
	...
   b9218:	56ad 000b 56e1 000b 5579 000b 5593 000b     .V...V..yU...U..
   b9228:	59e9 000b 55bd 000b 585f 000b 55f1 000b     .Y...U.._X...U..
   b9238:	58f1 000b 5731 000b 588d 000b 5a9d 000b     .X..1W...X...Z..
   b9248:	582d 000b 55f3 000b 55a5 000b 5635 000b     -X...U...U..5V..
   b9258:	5711 000b 5925 252d 2d6d 6425 2554 3a48     .W..%Y-%m-%dT%H:
   b9268:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b9278 <_ZTV11USARTSerial>:
	...
   b9280:	5b6d 000b 5bd9 000b 5bb1 000b 540d 000b     m[...[...[...T..
   b9290:	5b81 000b 5b9d 000b 5b8f 000b 5bab 000b     .[...[...[...[..
   b92a0:	5b6f 000b 5b73 000b                         o[..s[..

000b92a8 <_ZTV9USBSerial>:
	...
   b92b0:	5c17 000b 5c7f 000b 5c55 000b 540d 000b     .\...\..U\...T..
   b92c0:	5c47 000b 5c19 000b 5c29 000b 5c79 000b     G\...\..)\..y\..
   b92d0:	5c39 000b 5c11 000b                         9\...\..

000b92d8 <_ZTVN5spark9WiFiClassE>:
	...
   b92e0:	5d77 000b 5d6d 000b 5d63 000b 5d19 000b     w]..m]..c]...]..
   b92f0:	5d57 000b 5d4b 000b 52e9 000b 52f1 000b     W]..K]...R...R..
   b9300:	5d3f 000b 5d37 000b 5d2d 000b 5d23 000b     ?]..7]..-]..#]..
   b9310:	5321 000b                                   !S..

000b9314 <_ZSt7nothrow>:
	...

000b9315 <_ZTSSt19_Sp_make_shared_tag>:
   b9315:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b9325:	6572 5f64 6174 0067 0000                     red_tag....

000b9330 <_ZTISt19_Sp_make_shared_tag>:
   b9330:	9370 000b 9315 000b                         p.......

000b9338 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b9338:	93d0 000b 9344 000b 93f4 000b               ....D.......

000b9344 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b9344:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b9354:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b9364:	0045 0000                                   E...

000b9368 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b9368:	0000 0000 9338 000b 61e9 000b 61fd 000b     ....8....a...a..
   b9378:	6391 000b 6391 000b 6267 000b 61a9 000b     .c...c..gb...a..
   b9388:	624f 000b 6211 000b 61db 000b               Ob...b...a..

000b9394 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b9394:	93d0 000b 93a0 000b 9338 000b               ........8...

000b93a0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b93a0:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b93b0:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b93c0:	666e 456f 0000 0000                         nfoE....

000b93c8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b93c8:	0000 0000 9394 000b 6291 000b 62a5 000b     .........b...b..
   b93d8:	6391 000b 6391 000b 6267 000b 61a9 000b     .c...c..gb...a..
   b93e8:	6365 000b 62f1 000b 62b9 000b               ec...b...b..

000b93f4 <_ZTISt9type_info>:
   b93f4:	9370 000b 93fc 000b                         p.......

000b93fc <_ZTSSt9type_info>:
   b93fc:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b940c:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b941c:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   b942c:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   b943c:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   b944c:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   b945c:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   b946c:	6474 696c 2f62 6172 646e 632e 6e00 0066     tdlib/rand.c.nf.
   b947c:	6e69 7469 0079 6e61 0000 0000               inity.an....

000b9488 <fpi.1>:
   b9488:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   b9498:	0000 0000                                   ....

000b949c <fpinan.0>:
   b949c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   b94ac:	0000 0000                                   ....

000b94b0 <tinytens>:
   b94b0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   b94c0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   b94d0:	6f43 64ac 0628 1168                         Co.d(.h.

000b94d8 <_ctype_>:
   b94d8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b94e8:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b94f8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b9508:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b9518:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b9528:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b9538:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b9548:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b9558:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   b95d8:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   b95e8:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   b95f8:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   b9608:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   b9618:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   b9628:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   b9638:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   b9648:	632e 0000                                   .c..

000b964c <_C_numeric_locale>:
   b964c:	9044 000b 8dcd 000b e3c4 2003 0043 4f50     D.......... C.PO
   b965c:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   b966c:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   b967c:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   b968c:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   b969c:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   b96ac:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   b96bc:	0000 0000                                   ....

000b96c0 <__mprec_bigtens>:
   b96c0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   b96d0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   b96e0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000b96e8 <__mprec_tens>:
   b96e8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   b96f8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   b9708:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   b9718:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   b9728:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   b9738:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   b9748:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   b9758:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   b9768:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   b9778:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   b9788:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   b9798:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   b97a8:	9db4 79d9 7843 44ea                         ...yCx.D

000b97b0 <p05.0>:
   b97b0:	0005 0000 0019 0000 007d 0000               ........}...

000b97bc <link_const_variable_data_end>:
   b97bc:	000b43e9 	.word	0x000b43e9
   b97c0:	000b5075 	.word	0x000b5075
   b97c4:	000b50ed 	.word	0x000b50ed
   b97c8:	000b5299 	.word	0x000b5299
   b97cc:	000b53f9 	.word	0x000b53f9
   b97d0:	000b5535 	.word	0x000b5535
   b97d4:	000b5555 	.word	0x000b5555
   b97d8:	000b5b59 	.word	0x000b5b59
   b97dc:	000b5d81 	.word	0x000b5d81
